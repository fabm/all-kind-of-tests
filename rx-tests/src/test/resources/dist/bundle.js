!function(e){var t=window.webpackHotUpdate;window.webpackHotUpdate=function(e,n){!function(e,t){if(!b[e]||!w[e])return;for(var n in w[e]=!1,t)Object.prototype.hasOwnProperty.call(t,n)&&(h[n]=t[n]);0==--v&&0===m&&T()}(e,n),t&&t(e,n)};var n,r=!0,o="246b90599dfdbaf81bb0",a=1e4,i={},s=[],u=[];function l(e){var t=S[e];if(!t)return N;var r=function(r){return t.hot.active?(S[r]?-1===S[r].parents.indexOf(e)&&S[r].parents.push(e):(s=[e],n=r),-1===t.children.indexOf(r)&&t.children.push(r)):(console.warn("[HMR] unexpected require("+r+") from disposed module "+e),s=[]),N(r)},o=function(e){return{configurable:!0,enumerable:!0,get:function(){return N[e]},set:function(t){N[e]=t}}};for(var a in N)Object.prototype.hasOwnProperty.call(N,a)&&"e"!==a&&"t"!==a&&Object.defineProperty(r,a,o(a));return r.e=function(e){return"ready"===f&&d("prepare"),m++,N.e(e).then(t,function(e){throw t(),e});function t(){m--,"prepare"===f&&(y[e]||C(e),0===m&&0===v&&T())}},r.t=function(e,t){return 1&t&&(e=r(e)),N.t(e,-2&t)},r}var c=[],f="idle";function d(e){f=e;for(var t=0;t<c.length;t++)c[t].call(null,e)}var p,h,g,v=0,m=0,y={},w={},b={};function E(e){return+e+""===e?+e:e}function _(e){if("idle"!==f)throw new Error("check() is only allowed in idle status");return r=e,d("check"),function(e){return e=e||1e4,new Promise(function(t,n){if("undefined"==typeof XMLHttpRequest)return n(new Error("No browser support"));try{var r=new XMLHttpRequest,a=N.p+""+o+".hot-update.json";r.open("GET",a,!0),r.timeout=e,r.send(null)}catch(e){return n(e)}r.onreadystatechange=function(){if(4===r.readyState)if(0===r.status)n(new Error("Manifest request to "+a+" timed out."));else if(404===r.status)t();else if(200!==r.status&&304!==r.status)n(new Error("Manifest request to "+a+" failed."));else{try{var e=JSON.parse(r.responseText)}catch(e){return void n(e)}t(e)}}})}(a).then(function(e){if(!e)return d("idle"),null;w={},y={},b=e.c,g=e.h,d("prepare");var t=new Promise(function(e,t){p={resolve:e,reject:t}});h={};return C(0),"prepare"===f&&0===m&&0===v&&T(),t})}function C(e){b[e]?(w[e]=!0,v++,function(e){var t=document.getElementsByTagName("head")[0],n=document.createElement("script");n.charset="utf-8",n.src=N.p+""+e+"."+o+".hot-update.js",t.appendChild(n)}(e)):y[e]=!0}function T(){d("ready");var e=p;if(p=null,e)if(r)Promise.resolve().then(function(){return O(r)}).then(function(t){e.resolve(t)},function(t){e.reject(t)});else{var t=[];for(var n in h)Object.prototype.hasOwnProperty.call(h,n)&&t.push(E(n));e.resolve(t)}}function O(t){if("ready"!==f)throw new Error("apply() is only allowed in ready status");var n,r,a,u,l;function c(e){for(var t=[e],n={},r=t.slice().map(function(e){return{chain:[e],id:e}});r.length>0;){var o=r.pop(),a=o.id,i=o.chain;if((u=S[a])&&!u.hot._selfAccepted){if(u.hot._selfDeclined)return{type:"self-declined",chain:i,moduleId:a};if(u.hot._main)return{type:"unaccepted",chain:i,moduleId:a};for(var s=0;s<u.parents.length;s++){var l=u.parents[s],c=S[l];if(c){if(c.hot._declinedDependencies[a])return{type:"declined",chain:i.concat([l]),moduleId:a,parentId:l};-1===t.indexOf(l)&&(c.hot._acceptedDependencies[a]?(n[l]||(n[l]=[]),p(n[l],[a])):(delete n[l],t.push(l),r.push({chain:i.concat([l]),id:l})))}}}}return{type:"accepted",moduleId:e,outdatedModules:t,outdatedDependencies:n}}function p(e,t){for(var n=0;n<t.length;n++){var r=t[n];-1===e.indexOf(r)&&e.push(r)}}t=t||{};var v={},m=[],y={},w=function(){console.warn("[HMR] unexpected require("+C.moduleId+") to disposed module")};for(var _ in h)if(Object.prototype.hasOwnProperty.call(h,_)){var C;l=E(_);var T=!1,O=!1,A=!1,P="";switch((C=h[_]?c(l):{type:"disposed",moduleId:_}).chain&&(P="\nUpdate propagation: "+C.chain.join(" -> ")),C.type){case"self-declined":t.onDeclined&&t.onDeclined(C),t.ignoreDeclined||(T=new Error("Aborted because of self decline: "+C.moduleId+P));break;case"declined":t.onDeclined&&t.onDeclined(C),t.ignoreDeclined||(T=new Error("Aborted because of declined dependency: "+C.moduleId+" in "+C.parentId+P));break;case"unaccepted":t.onUnaccepted&&t.onUnaccepted(C),t.ignoreUnaccepted||(T=new Error("Aborted because "+l+" is not accepted"+P));break;case"accepted":t.onAccepted&&t.onAccepted(C),O=!0;break;case"disposed":t.onDisposed&&t.onDisposed(C),A=!0;break;default:throw new Error("Unexception type "+C.type)}if(T)return d("abort"),Promise.reject(T);if(O)for(l in y[l]=h[l],p(m,C.outdatedModules),C.outdatedDependencies)Object.prototype.hasOwnProperty.call(C.outdatedDependencies,l)&&(v[l]||(v[l]=[]),p(v[l],C.outdatedDependencies[l]));A&&(p(m,[C.moduleId]),y[l]=w)}var I,M=[];for(r=0;r<m.length;r++)l=m[r],S[l]&&S[l].hot._selfAccepted&&M.push({module:l,errorHandler:S[l].hot._selfAccepted});d("dispose"),Object.keys(b).forEach(function(e){!1===b[e]&&function(e){delete installedChunks[e]}(e)});for(var k,x,R=m.slice();R.length>0;)if(l=R.pop(),u=S[l]){var D={},B=u.hot._disposeHandlers;for(a=0;a<B.length;a++)(n=B[a])(D);for(i[l]=D,u.hot.active=!1,delete S[l],delete v[l],a=0;a<u.children.length;a++){var j=S[u.children[a]];j&&((I=j.parents.indexOf(l))>=0&&j.parents.splice(I,1))}}for(l in v)if(Object.prototype.hasOwnProperty.call(v,l)&&(u=S[l]))for(x=v[l],a=0;a<x.length;a++)k=x[a],(I=u.children.indexOf(k))>=0&&u.children.splice(I,1);for(l in d("apply"),o=g,y)Object.prototype.hasOwnProperty.call(y,l)&&(e[l]=y[l]);var L=null;for(l in v)if(Object.prototype.hasOwnProperty.call(v,l)&&(u=S[l])){x=v[l];var U=[];for(r=0;r<x.length;r++)if(k=x[r],n=u.hot._acceptedDependencies[k]){if(-1!==U.indexOf(n))continue;U.push(n)}for(r=0;r<U.length;r++){n=U[r];try{n(x)}catch(e){t.onErrored&&t.onErrored({type:"accept-errored",moduleId:l,dependencyId:x[r],error:e}),t.ignoreErrored||L||(L=e)}}}for(r=0;r<M.length;r++){var F=M[r];l=F.module,s=[l];try{N(l)}catch(e){if("function"==typeof F.errorHandler)try{F.errorHandler(e)}catch(n){t.onErrored&&t.onErrored({type:"self-accept-error-handler-errored",moduleId:l,error:n,originalError:e}),t.ignoreErrored||L||(L=n),L||(L=e)}else t.onErrored&&t.onErrored({type:"self-accept-errored",moduleId:l,error:e}),t.ignoreErrored||L||(L=e)}}return L?(d("fail"),Promise.reject(L)):(d("idle"),new Promise(function(e){e(m)}))}var S={};function N(t){if(S[t])return S[t].exports;var r=S[t]={i:t,l:!1,exports:{},hot:function(e){var t={_acceptedDependencies:{},_declinedDependencies:{},_selfAccepted:!1,_selfDeclined:!1,_disposeHandlers:[],_main:n!==e,active:!0,accept:function(e,n){if(void 0===e)t._selfAccepted=!0;else if("function"==typeof e)t._selfAccepted=e;else if("object"==typeof e)for(var r=0;r<e.length;r++)t._acceptedDependencies[e[r]]=n||function(){};else t._acceptedDependencies[e]=n||function(){}},decline:function(e){if(void 0===e)t._selfDeclined=!0;else if("object"==typeof e)for(var n=0;n<e.length;n++)t._declinedDependencies[e[n]]=!0;else t._declinedDependencies[e]=!0},dispose:function(e){t._disposeHandlers.push(e)},addDisposeHandler:function(e){t._disposeHandlers.push(e)},removeDisposeHandler:function(e){var n=t._disposeHandlers.indexOf(e);n>=0&&t._disposeHandlers.splice(n,1)},check:_,apply:O,status:function(e){if(!e)return f;c.push(e)},addStatusHandler:function(e){c.push(e)},removeStatusHandler:function(e){var t=c.indexOf(e);t>=0&&c.splice(t,1)},data:i[e]};return n=void 0,t}(t),parents:(u=s,s=[],u),children:[]};return e[t].call(r.exports,r,r.exports,l(t)),r.l=!0,r.exports}N.m=e,N.c=S,N.d=function(e,t,n){N.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},N.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},N.t=function(e,t){if(1&t&&(e=N(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(N.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)N.d(n,r,function(t){return e[t]}.bind(null,r));return n},N.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return N.d(t,"a",t),t},N.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},N.p="",N.h=function(){return o},l(95)(N.s=95)}([function(e,t,n){e.exports=n(100)()},function(e,t,n){"use strict";e.exports=n(99)},function(e,t,n){var r;
/*!
  Copyright (c) 2017 Jed Watson.
  Licensed under the MIT License (MIT), see
  http://jedwatson.github.io/classnames
*/
/*!
  Copyright (c) 2017 Jed Watson.
  Licensed under the MIT License (MIT), see
  http://jedwatson.github.io/classnames
*/
!function(){"use strict";var n={}.hasOwnProperty;function o(){for(var e=[],t=0;t<arguments.length;t++){var r=arguments[t];if(r){var a=typeof r;if("string"===a||"number"===a)e.push(r);else if(Array.isArray(r)&&r.length){var i=o.apply(null,r);i&&e.push(i)}else if("object"===a)for(var s in r)n.call(r,s)&&r[s]&&e.push(s)}}return e.join(" ")}void 0!==e&&e.exports?(o.default=o,e.exports=o):void 0===(r=function(){return o}.apply(t,[]))||(e.exports=r)}()},function(e,t,n){"use strict";var r=this&&this.__extends||function(){var e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])};return function(t,n){function r(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}();Object.defineProperty(t,"__esModule",{value:!0});var o=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return r(t,e),t}(n(9).default);t.default=o},function(e,t,n){"use strict";var r=this&&this.__extends||function(){var e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])};return function(t,n){function r(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}();Object.defineProperty(t,"__esModule",{value:!0});var o=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return r(t,e),t}(n(9).default);t.default=o},function(e,t,n){"use strict";var r;Object.defineProperty(t,"__esModule",{value:!0}),function(e){e[e.AZTEC=0]="AZTEC",e[e.CODABAR=1]="CODABAR",e[e.CODE_39=2]="CODE_39",e[e.CODE_93=3]="CODE_93",e[e.CODE_128=4]="CODE_128",e[e.DATA_MATRIX=5]="DATA_MATRIX",e[e.EAN_8=6]="EAN_8",e[e.EAN_13=7]="EAN_13",e[e.ITF=8]="ITF",e[e.MAXICODE=9]="MAXICODE",e[e.PDF_417=10]="PDF_417",e[e.QR_CODE=11]="QR_CODE",e[e.RSS_14=12]="RSS_14",e[e.RSS_EXPANDED=13]="RSS_EXPANDED",e[e.UPC_A=14]="UPC_A",e[e.UPC_E=15]="UPC_E",e[e.UPC_EAN_EXTENSION=16]="UPC_EAN_EXTENSION"}(r||(r={})),t.default=r},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(22),o=n(139),a=function(){function e(e,t){this.x=e,this.y=t}return e.prototype.getX=function(){return this.x},e.prototype.getY=function(){return this.y},e.prototype.equals=function(t){if(t instanceof e){var n=t;return this.x===n.x&&this.y===n.y}return!1},e.prototype.hashCode=function(){return 31*o.default.floatToIntBits(this.x)+o.default.floatToIntBits(this.y)},e.prototype.toString=function(){return"("+this.x+","+this.y+")"},e.orderBestPatterns=function(e){var t,n,r,o=this.distance(e[0],e[1]),a=this.distance(e[1],e[2]),i=this.distance(e[0],e[2]);if(a>=o&&a>=i?(n=e[0],t=e[1],r=e[2]):i>=a&&i>=o?(n=e[1],t=e[0],r=e[2]):(n=e[2],t=e[0],r=e[1]),this.crossProductZ(t,n,r)<0){var s=t;t=r,r=s}e[0]=t,e[1]=n,e[2]=r},e.distance=function(e,t){return r.default.distance(e.x,e.y,t.x,t.y)},e.crossProductZ=function(e,t,n){var r=t.x,o=t.y;return(n.x-r)*(e.y-o)-(n.y-o)*(e.x-r)},e}();t.default=a},function(e,t,n){"use strict";var r=this&&this.__extends||function(){var e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])};return function(t,n){function r(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}();Object.defineProperty(t,"__esModule",{value:!0});var o=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return r(t,e),t}(n(9).default);t.default=o},function(e,t,n){"use strict";var r=n(61),o=n(119),a=Object.prototype.toString;function i(e){return"[object Array]"===a.call(e)}function s(e){return null!==e&&"object"==typeof e}function u(e){return"[object Function]"===a.call(e)}function l(e,t){if(null!==e&&void 0!==e)if("object"!=typeof e&&(e=[e]),i(e))for(var n=0,r=e.length;n<r;n++)t.call(null,e[n],n,e);else for(var o in e)Object.prototype.hasOwnProperty.call(e,o)&&t.call(null,e[o],o,e)}e.exports={isArray:i,isArrayBuffer:function(e){return"[object ArrayBuffer]"===a.call(e)},isBuffer:o,isFormData:function(e){return"undefined"!=typeof FormData&&e instanceof FormData},isArrayBufferView:function(e){return"undefined"!=typeof ArrayBuffer&&ArrayBuffer.isView?ArrayBuffer.isView(e):e&&e.buffer&&e.buffer instanceof ArrayBuffer},isString:function(e){return"string"==typeof e},isNumber:function(e){return"number"==typeof e},isObject:s,isUndefined:function(e){return void 0===e},isDate:function(e){return"[object Date]"===a.call(e)},isFile:function(e){return"[object File]"===a.call(e)},isBlob:function(e){return"[object Blob]"===a.call(e)},isFunction:u,isStream:function(e){return s(e)&&u(e.pipe)},isURLSearchParams:function(e){return"undefined"!=typeof URLSearchParams&&e instanceof URLSearchParams},isStandardBrowserEnv:function(){return("undefined"==typeof navigator||"ReactNative"!==navigator.product)&&"undefined"!=typeof window&&"undefined"!=typeof document},forEach:l,merge:function e(){var t={};function n(n,r){"object"==typeof t[r]&&"object"==typeof n?t[r]=e(t[r],n):t[r]=n}for(var r=0,o=arguments.length;r<o;r++)l(arguments[r],n);return t},extend:function(e,t,n){return l(t,function(t,o){e[o]=n&&"function"==typeof t?r(t,n):t}),e},trim:function(e){return e.replace(/^\s*/,"").replace(/\s*$/,"")}}},function(e,t,n){"use strict";var r=this&&this.__extends||function(){var e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])};return function(t,n){function r(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}();Object.defineProperty(t,"__esModule",{value:!0});var o=function(e){function t(t){void 0===t&&(t=void 0);var n=e.call(this,t)||this;return n.message=t,n}return r(t,e),t}(n(138).CustomError);t.default=o},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(){}return e.arraycopy=function(e,t,n,r,o){for(;o--;)n[r++]=e[t++]},e.currentTimeMillis=function(){return Date.now()},e}();t.default=r},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(18),o=n(10),a=n(35),i=n(13),s=n(4),u=function(){function e(e,t,n,r){if(this.width=e,this.height=t,this.rowSize=n,this.bits=r,void 0!==t&&null!==t||(t=e),this.height=t,e<1||t<1)throw new s.default("Both dimensions must be greater than 0");void 0!==n&&null!==n||(n=Math.floor((e+31)/32)),this.rowSize=n,void 0!==r&&null!==r||(this.bits=new Int32Array(this.rowSize*this.height))}return e.parseFromBooleanArray=function(t){for(var n=t.length,r=t[0].length,o=new e(r,n),a=0;a<n;a++)for(var i=t[a],s=0;s<r;s++)i[s]&&o.set(s,a);return o},e.parseFromString=function(t,n,r){if(null===t)throw new s.default("stringRepresentation cannot be null");for(var o=new Array(t.length),a=0,i=0,u=-1,l=0,c=0;c<t.length;)if("\n"===t.charAt(c)||"\r"===t.charAt(c)){if(a>i){if(-1===u)u=a-i;else if(a-i!==u)throw new s.default("row lengths do not match");i=a,l++}c++}else if(t.substring(c,c+n.length)===n)c+=n.length,o[a]=!0,a++;else{if(t.substring(c,c+r.length)!==r)throw new s.default("illegal character encountered: "+t.substring(c));c+=r.length,o[a]=!1,a++}if(a>i){if(-1===u)u=a-i;else if(a-i!==u)throw new s.default("row lengths do not match");l++}for(var f=new e(u,l),d=0;d<a;d++)o[d]&&f.set(Math.floor(d%u),Math.floor(d/u));return f},e.prototype.get=function(e,t){var n=t*this.rowSize+Math.floor(e/32);return 0!=(this.bits[n]>>>(31&e)&1)},e.prototype.set=function(e,t){var n=t*this.rowSize+Math.floor(e/32);this.bits[n]|=1<<(31&e)&4294967295},e.prototype.unset=function(e,t){var n=t*this.rowSize+Math.floor(e/32);this.bits[n]&=~(1<<(31&e)&4294967295)},e.prototype.flip=function(e,t){var n=t*this.rowSize+Math.floor(e/32);this.bits[n]^=1<<(31&e)&4294967295},e.prototype.xor=function(e){if(this.width!==e.getWidth()||this.height!==e.getHeight()||this.rowSize!==e.getRowSize())throw new s.default("input matrix dimensions do not match");for(var t=new r.default(Math.floor(this.width/32)+1),n=this.rowSize,o=this.bits,a=0,i=this.height;a<i;a++)for(var u=a*n,l=e.getRow(a,t).getBitArray(),c=0;c<n;c++)o[u+c]^=l[c]},e.prototype.clear=function(){for(var e=this.bits,t=e.length,n=0;n<t;n++)e[n]=0},e.prototype.setRegion=function(e,t,n,r){if(t<0||e<0)throw new s.default("Left and top must be nonnegative");if(r<1||n<1)throw new s.default("Height and width must be at least 1");var o=e+n,a=t+r;if(a>this.height||o>this.width)throw new s.default("The region must fit inside the matrix");for(var i=this.rowSize,u=this.bits,l=t;l<a;l++)for(var c=l*i,f=e;f<o;f++)u[c+Math.floor(f/32)]|=1<<(31&f)&4294967295},e.prototype.getRow=function(e,t){null===t||void 0===t||t.getSize()<this.width?t=new r.default(this.width):t.clear();for(var n=this.rowSize,o=this.bits,a=e*n,i=0;i<n;i++)t.setBulk(32*i,o[a+i]);return t},e.prototype.setRow=function(e,t){o.default.arraycopy(t.getBitArray(),0,this.bits,e*this.rowSize,this.rowSize)},e.prototype.rotate180=function(){for(var e=this.getWidth(),t=this.getHeight(),n=new r.default(e),o=new r.default(e),a=0,i=Math.floor((t+1)/2);a<i;a++)n=this.getRow(a,n),o=this.getRow(t-1-a,o),n.reverse(),o.reverse(),this.setRow(a,o),this.setRow(t-1-a,n)},e.prototype.getEnclosingRectangle=function(){for(var e=this.width,t=this.height,n=this.rowSize,r=this.bits,o=e,a=t,i=-1,s=-1,u=0;u<t;u++)for(var l=0;l<n;l++){var c=r[u*n+l];if(0!==c){if(u<a&&(a=u),u>s&&(s=u),32*l<o){for(var f=0;0==(c<<31-f&4294967295);)f++;32*l+f<o&&(o=32*l+f)}if(32*l+31>i){for(f=31;c>>>f==0;)f--;32*l+f>i&&(i=32*l+f)}}}return i<o||s<a?null:Int32Array.from([o,a,i-o+1,s-a+1])},e.prototype.getTopLeftOnBit=function(){for(var e=this.rowSize,t=this.bits,n=0;n<t.length&&0===t[n];)n++;if(n===t.length)return null;for(var r=n/e,o=n%e*32,a=t[n],i=0;0==(a<<31-i&4294967295);)i++;return o+=i,Int32Array.from([o,r])},e.prototype.getBottomRightOnBit=function(){for(var e=this.rowSize,t=this.bits,n=t.length-1;n>=0&&0===t[n];)n--;if(n<0)return null;for(var r=Math.floor(n/e),o=32*Math.floor(n%e),a=t[n],i=31;a>>>i==0;)i--;return o+=i,Int32Array.from([o,r])},e.prototype.getWidth=function(){return this.width},e.prototype.getHeight=function(){return this.height},e.prototype.getRowSize=function(){return this.rowSize},e.prototype.equals=function(t){if(!(t instanceof e))return!1;var n=t;return this.width===n.width&&this.height===n.height&&this.rowSize===n.rowSize&&a.default.equals(this.bits,n.bits)},e.prototype.hashCode=function(){var e=this.width;return e=31*(e=31*(e=31*(e=31*e+this.width)+this.height)+this.rowSize)+a.default.hashCode(this.bits)},e.prototype.toString=function(e,t,n){return void 0===e&&(e="x"),void 0===t&&(t=" "),void 0===n&&(n="\n"),this.buildToString(e,t,n)},e.prototype.buildToString=function(e,t,n){var r=new i.default;r.append(n);for(var o=0,a=this.height;o<a;o++){for(var s=0,u=this.width;s<u;s++)r.append(this.get(s,o)?e:t);r.append(n)}return r.toString()},e.prototype.clone=function(){return new e(this.width,this.height,this.rowSize,this.bits.slice())},e}();t.default=u},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(6),o=n(10),a=function(){function e(e,t,n,r,a,i){this.text=e,this.rawBytes=t,this.numBits=n,this.resultPoints=r,this.format=a,this.timestamp=i,this.text=e,this.rawBytes=t,this.numBits=void 0===n||null===n?null===t||void 0===t?0:8*t.length:n,this.resultPoints=r,this.format=a,this.resultMetadata=null,this.timestamp=void 0===i||null===i?o.default.currentTimeMillis():i}return e.prototype.getText=function(){return this.text},e.prototype.getRawBytes=function(){return this.rawBytes},e.prototype.getNumBits=function(){return this.numBits},e.prototype.getResultPoints=function(){return this.resultPoints},e.prototype.getBarcodeFormat=function(){return this.format},e.prototype.getResultMetadata=function(){return this.resultMetadata},e.prototype.putMetadata=function(e,t){null===this.resultMetadata&&(this.resultMetadata=new Map),this.resultMetadata.set(e,t)},e.prototype.putAllMetadata=function(e){null!==e&&(null===this.resultMetadata?this.resultMetadata=e:this.resultMetadata=new Map(e))},e.prototype.addResultPoints=function(e){var t=this.resultPoints;if(null===t)this.resultPoints=e;else if(null!==e&&e.length>0){var n=new r.default[t.length+e.length];o.default.arraycopy(t,0,n,0,t.length),o.default.arraycopy(e,0,n,t.length,e.length),this.resultPoints=n}},e.prototype.getTimestamp=function(){return this.timestamp},e.prototype.toString=function(){return this.text},e}();t.default=a},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e){void 0===e&&(e=""),this.value=e}return e.prototype.append=function(e){return this.value+="string"==typeof e?e.toString():String.fromCharCode(e),this},e.prototype.length=function(){return this.value.length},e.prototype.charAt=function(e){return this.value.charAt(e)},e.prototype.deleteCharAt=function(e){this.value=this.value.substr(0,e)+this.value.substring(e+1)},e.prototype.setCharAt=function(e,t){this.value=this.value.substr(0,e)+t+this.value.substr(e+1)},e.prototype.toString=function(){return this.value},e.prototype.insert=function(e,t){this.value=this.value.substr(0,e)+t+this.value.substr(e+t.length)},e}();t.default=r},function(e,t,n){"use strict";var r=this&&this.__extends||function(){var e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])};return function(t,n){function r(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}();Object.defineProperty(t,"__esModule",{value:!0});var o=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return r(t,e),t}(n(9).default);t.default=o},function(e,t,n){"use strict";var r;Object.defineProperty(t,"__esModule",{value:!0}),function(e){e[e.OTHER=0]="OTHER",e[e.ORIENTATION=1]="ORIENTATION",e[e.BYTE_SEGMENTS=2]="BYTE_SEGMENTS",e[e.ERROR_CORRECTION_LEVEL=3]="ERROR_CORRECTION_LEVEL",e[e.ISSUE_NUMBER=4]="ISSUE_NUMBER",e[e.SUGGESTED_PRICE=5]="SUGGESTED_PRICE",e[e.POSSIBLE_COUNTRY=6]="POSSIBLE_COUNTRY",e[e.UPC_EAN_EXTENSION=7]="UPC_EAN_EXTENSION",e[e.PDF417_EXTRA_METADATA=8]="PDF417_EXTRA_METADATA",e[e.STRUCTURED_APPEND_SEQUENCE=9]="STRUCTURED_APPEND_SEQUENCE",e[e.STRUCTURED_APPEND_PARITY=10]="STRUCTURED_APPEND_PARITY"}(r||(r={})),t.default=r},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(18),o=n(15),a=n(6),i=n(3),s=function(){function e(){}return e.prototype.decode=function(e,t){try{return this.doDecode(e,t)}catch(d){if(t&&!0===t.get(3)&&e.isRotateSupported()){var n=e.rotateCounterClockwise(),r=this.doDecode(n,t),s=r.getResultMetadata(),u=270;null!==s&&!0===s.get(o.default.ORIENTATION)&&(u+=s.get(o.default.ORIENTATION)%360),r.putMetadata(o.default.ORIENTATION,u);var l=r.getResultPoints();if(null!==l)for(var c=n.getHeight(),f=0;f<l.length;f++)l[f]=new a.default(c-l[f].getY()-1,l[f].getX());return r}throw new i.default}},e.prototype.reset=function(){},e.prototype.doDecode=function(e,t){var n,s=e.getWidth(),u=e.getHeight(),l=new r.default(s),c=t&&!0===t.get(3),f=Math.max(1,u>>(c?8:5));n=c?u:15;for(var d=Math.trunc(u/2),p=0;p<n;p++){var h=Math.trunc((p+1)/2),g=d+f*(0==(1&p)?h:-h);if(g<0||g>=u)break;try{l=e.getBlackRow(g,l)}catch(e){continue}for(var v=function(e){if(1===e&&(l.reverse(),t&&!0===t.get(9))){var n=new Map;t.forEach(function(e,t){return n.set(t,e)}),n.delete(9),t=n}try{var r=m.decodeRow(g,l,t);if(1===e){r.putMetadata(o.default.ORIENTATION,180);var i=r.getResultPoints();null!==i&&(i[0]=new a.default(s-i[0].getX()-1,i[0].getY()),i[1]=new a.default(s-i[1].getX()-1,i[1].getY()))}return{value:r}}catch(e){}},m=this,y=0;y<2;y++){var w=v(y);if("object"==typeof w)return w.value}}throw new i.default},e.recordPattern=function(e,t,n){for(var r=n.length,o=0;o<r;o++)n[o]=0;var a=e.getSize();if(t>=a)throw new i.default;for(var s=!e.get(t),u=0,l=t;l<a;){if(e.get(l)!==s)n[u]++;else{if(++u===r)break;n[u]=1,s=!s}l++}if(u!==r&&(u!==r-1||l!==a))throw new i.default},e.recordPatternInReverse=function(t,n,r){for(var o=r.length,a=t.get(n);n>0&&o>=0;)t.get(--n)!==a&&(o--,a=!a);if(o>=0)throw new i.default;e.recordPattern(t,n+1,r)},e.patternMatchVariance=function(e,t,n){for(var r=e.length,o=0,a=0,i=0;i<r;i++)o+=e[i],a+=t[i];if(o<a)return Number.POSITIVE_INFINITY;var s=o/a;n*=s;for(var u=0,l=0;l<r;l++){var c=e[l],f=t[l]*s,d=c>f?c-f:f-c;if(d>n)return Number.POSITIVE_INFINITY;u+=d}return u/o},e}();t.default=s},function(e,t,n){"use strict";!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE)try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}(),e.exports=n(102)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(10),o=n(28),a=n(35),i=n(4),s=function(){function e(t,n){void 0===t?(this.size=0,this.bits=new Int32Array(1)):(this.size=t,this.bits=void 0===n||null===n?e.makeArray(t):n)}return e.prototype.getSize=function(){return this.size},e.prototype.getSizeInBytes=function(){return Math.floor((this.size+7)/8)},e.prototype.ensureCapacity=function(t){if(t>32*this.bits.length){var n=e.makeArray(t);r.default.arraycopy(this.bits,0,n,0,this.bits.length),this.bits=n}},e.prototype.get=function(e){return 0!=(this.bits[Math.floor(e/32)]&1<<(31&e))},e.prototype.set=function(e){this.bits[Math.floor(e/32)]|=1<<(31&e)},e.prototype.flip=function(e){this.bits[Math.floor(e/32)]^=1<<(31&e)},e.prototype.getNextSet=function(e){var t=this.size;if(e>=t)return t;var n=this.bits,r=Math.floor(e/32),a=n[r];a&=~((1<<(31&e))-1);for(var i=n.length;0===a;){if(++r===i)return t;a=n[r]}var s=32*r+o.default.numberOfTrailingZeros(a);return s>t?t:s},e.prototype.getNextUnset=function(e){var t=this.size;if(e>=t)return t;var n=this.bits,r=Math.floor(e/32),a=~n[r];a&=~((1<<(31&e))-1);for(var i=n.length;0===a;){if(++r===i)return t;a=~n[r]}var s=32*r+o.default.numberOfTrailingZeros(a);return s>t?t:s},e.prototype.setBulk=function(e,t){this.bits[Math.floor(e/32)]=t},e.prototype.setRange=function(e,t){if(t<e||e<0||t>this.size)throw new i.default;if(t!==e){t--;for(var n=Math.floor(e/32),r=Math.floor(t/32),o=this.bits,a=n;a<=r;a++){var s=(2<<(a<r?31:31&t))-(1<<(a>n?0:31&e));o[a]|=s}}},e.prototype.clear=function(){for(var e=this.bits.length,t=this.bits,n=0;n<e;n++)t[n]=0},e.prototype.isRange=function(e,t,n){if(t<e||e<0||t>this.size)throw new i.default;if(t===e)return!0;t--;for(var r=Math.floor(e/32),o=Math.floor(t/32),a=this.bits,s=r;s<=o;s++){var u=(2<<(s<o?31:31&t))-(1<<(s>r?0:31&e))&4294967295;if((a[s]&u)!==(n?u:0))return!1}return!0},e.prototype.appendBit=function(e){this.ensureCapacity(this.size+1),e&&(this.bits[Math.floor(this.size/32)]|=1<<(31&this.size)),this.size++},e.prototype.appendBits=function(e,t){if(t<0||t>32)throw new i.default("Num bits must be between 0 and 32");this.ensureCapacity(this.size+t);this.appendBit;for(var n=t;n>0;n--)this.appendBit(1==(e>>n-1&1))},e.prototype.appendBitArray=function(e){var t=e.size;this.ensureCapacity(this.size+t);this.appendBit;for(var n=0;n<t;n++)this.appendBit(e.get(n))},e.prototype.xor=function(e){if(this.size!==e.size)throw new i.default("Sizes don't match");for(var t=this.bits,n=0,r=t.length;n<r;n++)t[n]^=e.bits[n]},e.prototype.toBytes=function(e,t,n,r){for(var o=0;o<r;o++){for(var a=0,i=0;i<8;i++)this.get(e)&&(a|=1<<7-i),e++;t[n+o]=a}},e.prototype.getBitArray=function(){return this.bits},e.prototype.reverse=function(){for(var e=new Int32Array(this.bits.length),t=Math.floor((this.size-1)/32),n=t+1,r=this.bits,o=0;o<n;o++){var a=r[o];a=(a=(a=(a=(a=a>>1&1431655765|(1431655765&a)<<1)>>2&858993459|(858993459&a)<<2)>>4&252645135|(252645135&a)<<4)>>8&16711935|(16711935&a)<<8)>>16&65535|(65535&a)<<16,e[t-o]=a}if(this.size!==32*n){var i=32*n-this.size,s=e[0]>>>i;for(o=1;o<n;o++){var u=e[o];s|=u<<32-i,e[o-1]=s,s=u>>>i}e[n-1]=s}this.bits=e},e.makeArray=function(e){return new Int32Array(Math.floor((e+31)/32))},e.prototype.equals=function(t){if(!(t instanceof e))return!1;var n=t;return this.size===n.size&&a.default.equals(this.bits,n.bits)},e.prototype.hashCode=function(){return 31*this.size+a.default.hashCode(this.bits)},e.prototype.toString=function(){for(var e="",t=0,n=this.size;t<n;t++)0==(7&t)&&(e+=" "),e+=this.get(t)?"X":".";return e},e.prototype.clone=function(){return new e(this.size,this.bits.slice())},e}();t.default=s},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(29),o=n(28),a=n(4),i=n(73),s=function(){function e(e,t,n){this.primitive=e,this.size=t,this.generatorBase=n;for(var o=new Int32Array(t),a=1,i=0;i<t;i++)o[i]=a,(a*=2)>=t&&(a^=e,a&=t-1);this.expTable=o;var s=new Int32Array(t);for(i=0;i<t-1;i++)s[o[i]]=i;this.logTable=s,this.zero=new r.default(this,Int32Array.from([0])),this.one=new r.default(this,Int32Array.from([1]))}return e.prototype.getZero=function(){return this.zero},e.prototype.getOne=function(){return this.one},e.prototype.buildMonomial=function(e,t){if(e<0)throw new a.default;if(0===t)return this.zero;var n=new Int32Array(e+1);return n[0]=t,new r.default(this,n)},e.addOrSubtract=function(e,t){return e^t},e.prototype.exp=function(e){return this.expTable[e]},e.prototype.log=function(e){if(0===e)throw new a.default;return this.logTable[e]},e.prototype.inverse=function(e){if(0===e)throw new i.default;return this.expTable[this.size-this.logTable[e]-1]},e.prototype.multiply=function(e,t){return 0===e||0===t?0:this.expTable[(this.logTable[e]+this.logTable[t])%(this.size-1)]},e.prototype.getSize=function(){return this.size},e.prototype.getGeneratorBase=function(){return this.generatorBase},e.prototype.toString=function(){return"GF(0x"+o.default.toHexString(this.primitive)+","+this.size+")"},e.prototype.equals=function(e){return e===this},e.AZTEC_DATA_12=new e(4201,4096,1),e.AZTEC_DATA_10=new e(1033,1024,1),e.AZTEC_DATA_6=new e(67,64,1),e.AZTEC_PARAM=new e(19,16,1),e.QR_CODE_FIELD_256=new e(285,256,0),e.DATA_MATRIX_FIELD_256=new e(301,256,1),e.AZTEC_DATA_8=e.DATA_MATRIX_FIELD_256,e.MAXICODE_FIELD_64=e.AZTEC_DATA_6,e}();t.default=s},function(e,t,n){"use strict";var r=this&&this.__extends||function(){var e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])};return function(t,n){function r(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}();Object.defineProperty(t,"__esModule",{value:!0});var o=function(e){function t(t){var n=e.call(this,t.getWidth(),t.getHeight())||this;return n.delegate=t,n}return r(t,e),t.prototype.getRow=function(e,t){for(var n=this.delegate.getRow(e,t),r=this.getWidth(),o=0;o<r;o++)n[o]=255-(255&n[o]);return n},t.prototype.getMatrix=function(){for(var e=this.delegate.getMatrix(),t=this.getWidth()*this.getHeight(),n=new Uint8ClampedArray(t),r=0;r<t;r++)n[r]=255-(255&e[r]);return n},t.prototype.isCropSupported=function(){return this.delegate.isCropSupported()},t.prototype.crop=function(e,n,r,o){return new t(this.delegate.crop(e,n,r,o))},t.prototype.isRotateSupported=function(){return this.delegate.isRotateSupported()},t.prototype.invert=function(){return this.delegate},t.prototype.rotateCounterClockwise=function(){return new t(this.delegate.rotateCounterClockwise())},t.prototype.rotateCounterClockwise45=function(){return new t(this.delegate.rotateCounterClockwise45())},t}(n(21).default);t.default=o},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(13),o=n(34),a=function(){function e(e,t){this.width=e,this.height=t}return e.prototype.getWidth=function(){return this.width},e.prototype.getHeight=function(){return this.height},e.prototype.isCropSupported=function(){return!1},e.prototype.crop=function(e,t,n,r){throw new o.default("This luminance source does not support cropping.")},e.prototype.isRotateSupported=function(){return!1},e.prototype.rotateCounterClockwise=function(){throw new o.default("This luminance source does not support rotation by 90 degrees.")},e.prototype.rotateCounterClockwise45=function(){throw new o.default("This luminance source does not support rotation by 45 degrees.")},e.prototype.toString=function(){for(var e=new Uint8ClampedArray(this.width),t=new r.default,n=0;n<this.height;n++){for(var o=this.getRow(n,e),a=0;a<this.width;a++){var i=255&o[a],s=void 0;s=i<64?"#":i<128?"+":i<192?".":" ",t.append(s)}t.append("\n")}return t.toString()},e}();t.default=a},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(){}return e.prototype.MathUtils=function(){},e.round=function(e){return NaN===e?0:e<=Number.MIN_SAFE_INTEGER?Number.MIN_SAFE_INTEGER:e>=Number.MAX_SAFE_INTEGER?Number.MAX_SAFE_INTEGER:e+(e<0?-.5:.5)|0},e.distance=function(e,t,n,r){var o=e-n,a=t-r;return Math.sqrt(o*o+a*a)},e.sum=function(e){for(var t=0,n=0,r=e.length;n!==r;n++){t+=e[n]}return t},e}();t.default=r},function(e,t,n){"use strict";var r=this&&this.__extends||function(){var e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])};return function(t,n){function r(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}();Object.defineProperty(t,"__esModule",{value:!0});var o=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return r(t,e),t}(n(9).default);t.default=o},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(7);!function(e){e[e.Cp437=0]="Cp437",e[e.ISO8859_1=1]="ISO8859_1",e[e.ISO8859_2=2]="ISO8859_2",e[e.ISO8859_3=3]="ISO8859_3",e[e.ISO8859_4=4]="ISO8859_4",e[e.ISO8859_5=5]="ISO8859_5",e[e.ISO8859_6=6]="ISO8859_6",e[e.ISO8859_7=7]="ISO8859_7",e[e.ISO8859_8=8]="ISO8859_8",e[e.ISO8859_9=9]="ISO8859_9",e[e.ISO8859_10=10]="ISO8859_10",e[e.ISO8859_11=11]="ISO8859_11",e[e.ISO8859_13=12]="ISO8859_13",e[e.ISO8859_14=13]="ISO8859_14",e[e.ISO8859_15=14]="ISO8859_15",e[e.ISO8859_16=15]="ISO8859_16",e[e.SJIS=16]="SJIS",e[e.Cp1250=17]="Cp1250",e[e.Cp1251=18]="Cp1251",e[e.Cp1252=19]="Cp1252",e[e.Cp1256=20]="Cp1256",e[e.UnicodeBigUnmarked=21]="UnicodeBigUnmarked",e[e.UTF8=22]="UTF8",e[e.ASCII=23]="ASCII",e[e.Big5=24]="Big5",e[e.GB18030=25]="GB18030",e[e.EUC_KR=26]="EUC_KR"}(t.CharacterSetValueIdentifiers||(t.CharacterSetValueIdentifiers={}));var o=function(){function e(t,n,r){for(var o=[],a=3;a<arguments.length;a++)o[a-3]=arguments[a];this.valueIdentifier=t,this.name=r,this.values="number"==typeof n?Int32Array.from([n]):n,this.otherEncodingNames=o,e.VALUE_IDENTIFIER_TO_ECI.set(t,this),e.NAME_TO_ECI.set(r,this);for(var i=this.values,s=0,u=i.length;s!==u;s++){var l=i[s];e.VALUES_TO_ECI.set(l,this)}for(var c=0,f=o;c<f.length;c++){var d=f[c];e.NAME_TO_ECI.set(d,this)}}return e.prototype.getValueIdentifier=function(){return this.valueIdentifier},e.prototype.getName=function(){return this.name},e.prototype.getValue=function(){return this.values[0]},e.getCharacterSetECIByValue=function(t){if(t<0||t>=900)throw new r.default("incorect value");var n=e.VALUES_TO_ECI.get(t);if(void 0===n)throw new r.default("incorect value");return n},e.getCharacterSetECIByName=function(t){var n=e.NAME_TO_ECI.get(t);if(void 0===n)throw new r.default("incorect value");return n},e.prototype.equals=function(t){if(!(t instanceof e))return!1;var n=t;return this.getName()===n.getName()},e.VALUE_IDENTIFIER_TO_ECI=new Map,e.VALUES_TO_ECI=new Map,e.NAME_TO_ECI=new Map,e.Cp437=new e(0,Int32Array.from([0,2]),"Cp437"),e.ISO8859_1=new e(1,Int32Array.from([1,3]),"ISO-8859-1","ISO88591","ISO8859_1"),e.ISO8859_2=new e(2,4,"ISO-8859-2","ISO88592","ISO8859_2"),e.ISO8859_3=new e(3,5,"ISO-8859-3","ISO88593","ISO8859_3"),e.ISO8859_4=new e(4,6,"ISO-8859-4","ISO88594","ISO8859_4"),e.ISO8859_5=new e(5,7,"ISO-8859-5","ISO88595","ISO8859_5"),e.ISO8859_6=new e(6,8,"ISO-8859-6","ISO88596","ISO8859_6"),e.ISO8859_7=new e(7,9,"ISO-8859-7","ISO88597","ISO8859_7"),e.ISO8859_8=new e(8,10,"ISO-8859-8","ISO88598","ISO8859_8"),e.ISO8859_9=new e(9,11,"ISO-8859-9","ISO88599","ISO8859_9"),e.ISO8859_10=new e(10,12,"ISO-8859-10","ISO885910","ISO8859_10"),e.ISO8859_11=new e(11,13,"ISO-8859-11","ISO885911","ISO8859_11"),e.ISO8859_13=new e(12,15,"ISO-8859-13","ISO885913","ISO8859_13"),e.ISO8859_14=new e(13,16,"ISO-8859-14","ISO885914","ISO8859_14"),e.ISO8859_15=new e(14,17,"ISO-8859-15","ISO885915","ISO8859_15"),e.ISO8859_16=new e(15,18,"ISO-8859-16","ISO885916","ISO8859_16"),e.SJIS=new e(16,20,"SJIS","Shift_JIS"),e.Cp1250=new e(17,21,"Cp1250","windows-1250"),e.Cp1251=new e(18,22,"Cp1251","windows-1251"),e.Cp1252=new e(19,23,"Cp1252","windows-1252"),e.Cp1256=new e(20,24,"Cp1256","windows-1256"),e.UnicodeBigUnmarked=new e(21,25,"UnicodeBigUnmarked","UTF-16BE","UnicodeBig"),e.UTF8=new e(22,26,"UTF8","UTF-8"),e.ASCII=new e(23,Int32Array.from([27,170]),"ASCII","US-ASCII"),e.Big5=new e(24,28,"Big5"),e.GB18030=new e(25,29,"GB18030","GB2312","EUC_CN","GBK"),e.EUC_KR=new e(26,30,"EUC_KR","EUC-KR"),e}();t.default=o},function(e,t,n){"use strict";e.exports=function(e,t,n,r,o,a,i,s){if(!e){var u;if(void 0===t)u=new Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else{var l=[n,r,o,a,i,s],c=0;(u=new Error(t.replace(/%s/g,function(){return l[c++]}))).name="Invariant Violation"}throw u.framesToPop=1,u}}},function(e,t){var n;n=function(){return this}();try{n=n||Function("return this")()||(0,eval)("this")}catch(e){"object"==typeof window&&(n=window)}e.exports=n},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(67),o=n(68),a=n(69),i=n(70),s=n(3),u=n(36),l=n(14),c=n(7),f=function(){function e(e,t,n){void 0===t&&(t=500),this.reader=e,this.timeBetweenScansMillis=t,this.hints=n}return e.prototype.getVideoInputDevices=function(){return new Promise(function(e,t){navigator.mediaDevices.enumerateDevices().then(function(t){for(var n=new Array,r=0,a=0,i=t.length;a!==i;a++){var s=t[a];"videoinput"===s.kind&&(n.push(new o.VideoInputDevice(s.deviceId,s.label||"Video source "+r)),r++)}e(n)}).catch(function(e){t(e)})})},e.prototype.decodeFromInputVideoDevice=function(e,t){var n;this.reset(),this.prepareVideoElement(t),n=void 0===e?{video:{facingMode:"environment"}}:{video:{deviceId:{exact:e}}};var r=this;return new Promise(function(e,t){navigator.mediaDevices.getUserMedia(n).then(function(n){r.stream=n,r.videoElement.srcObject=n,r.videoPlayingEventListener=function(){r.decodeOnceWithDelay(e,t)},r.videoElement.addEventListener("playing",r.videoPlayingEventListener),r.videoElement.play()}).catch(function(e){t(e)})})},e.prototype.decodeFromVideoSource=function(e,t){this.reset(),this.prepareVideoElement(t);var n=this;return new Promise(function(t,r){n.videoPlayEndedEventListener=function(){n.stop(),r(new s.default)},n.videoElement.addEventListener("ended",n.videoPlayEndedEventListener),n.videoPlayingEventListener=function(){n.decodeOnceWithDelay(t,r)},n.videoElement.addEventListener("playing",n.videoPlayingEventListener),n.videoElement.setAttribute("autoplay","true"),n.videoElement.setAttribute("src",e)})},e.prototype.prepareVideoElement=function(e){void 0===e?(this.videoElement=document.createElement("video"),this.videoElement.width=640,this.videoElement.height=480):this.videoElement="string"==typeof e?this.getMediaElement(e,"video"):e,this.videoElement.setAttribute("autoplay","true"),this.videoElement.setAttribute("muted","true"),this.videoElement.setAttribute("playsinline","true"),this.videoElement.setAttribute("autofocus","true")},e.prototype.getMediaElement=function(e,t){var n=document.getElementById(e);if(null===n)throw new u.default("element with id '"+e+"' not found");if(n.nodeName.toLowerCase()!==t.toLowerCase())throw new u.default("element with id '"+e+"' must be an "+t+" element");return n},e.prototype.decodeFromImage=function(e,t){var n=this;if(this.reset(),void 0===e&&void 0===t)throw new u.default("either imageElement with a src set or an url must be provided");this.prepareImageElement(e);var r=this;return new Promise(function(e,o){if(void 0!==t)r.imageLoadedEventListener=function(){r.decodeOnce(e,o,!1,!0)},r.imageElement.addEventListener("load",r.imageLoadedEventListener),r.imageElement.src=t;else{if(!n.isImageLoaded(n.imageElement))throw new u.default("either src or a loaded img should be provided");r.decodeOnce(e,o,!1,!0)}})},e.prototype.isImageLoaded=function(e){return!!e.complete&&0!==e.naturalWidth},e.prototype.prepareImageElement=function(e){void 0===e?(this.imageElement=document.createElement("img"),this.imageElement.width=200,this.imageElement.height=200):this.imageElement="string"==typeof e?this.getMediaElement(e,"img"):e},e.prototype.decodeOnceWithDelay=function(e,t){this.timeoutHandler=window.setTimeout(this.decodeOnce.bind(this,e,t),this.timeBetweenScansMillis)},e.prototype.decodeOnce=function(e,t,n,o){void 0===n&&(n=!0),void 0===o&&(o=!0),void 0===this.canvasElementContext&&this.prepareCaptureCanvas(),this.drawImageOnCanvas(this.canvasElementContext,this.videoElement||this.imageElement);var u=new r.HTMLCanvasElementLuminanceSource(this.canvasElement),f=new a.default(new i.default(u));try{e(this.readerDecode(f))}catch(r){n&&r instanceof s.default?this.decodeOnceWithDelay(e,t):o&&(r instanceof l.default||r instanceof c.default)?this.decodeOnceWithDelay(e,t):t(r)}},e.prototype.drawImageOnCanvas=function(e,t){e.drawImage(t,0,0)},e.prototype.readerDecode=function(e){return this.reader.decode(e,this.hints)},e.prototype.prepareCaptureCanvas=function(){var e,t,n=document.createElement("canvas");void 0!==this.videoElement?(e=this.videoElement.videoWidth,t=this.videoElement.videoHeight):(e=this.imageElement.naturalWidth||this.imageElement.width,t=this.imageElement.naturalHeight||this.imageElement.height),n.style.width=e+"px",n.style.height=t+"px",n.width=e,n.height=t,this.canvasElement=n,this.canvasElementContext=n.getContext("2d")},e.prototype.stop=function(){void 0!==this.timeoutHandler&&(window.clearTimeout(this.timeoutHandler),this.timeoutHandler=void 0),void 0!==this.stream&&(this.stream.getTracks()[0].stop(),this.stream=void 0)},e.prototype.reset=function(){this.stop(),void 0!==this.videoPlayEndedEventListener&&void 0!==this.videoElement&&this.videoElement.removeEventListener("ended",this.videoPlayEndedEventListener),void 0!==this.videoPlayingEventListener&&void 0!==this.videoElement&&this.videoElement.removeEventListener("playing",this.videoPlayingEventListener),void 0!==this.videoElement&&(this.videoElement.srcObject=void 0,this.videoElement.removeAttribute("src"),this.videoElement=void 0),void 0!==this.videoPlayEndedEventListener&&void 0!==this.imageElement&&this.imageElement.removeEventListener("load",this.imageLoadedEventListener),void 0!==this.imageElement&&(this.imageElement.src=void 0,this.imageElement.removeAttribute("src"),this.imageElement=void 0),this.canvasElementContext=void 0,this.canvasElement=void 0},e}();t.BrowserCodeReader=f},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(){}return e.numberOfTrailingZeros=function(e){var t;if(0===e)return 32;var n=31;return 0!==(t=e<<16)&&(n-=16,e=t),0!==(t=e<<8)&&(n-=8,e=t),0!==(t=e<<4)&&(n-=4,e=t),0!==(t=e<<2)&&(n-=2,e=t),n-(e<<1>>>31)},e.numberOfLeadingZeros=function(e){if(0===e)return 32;var t=1;return e>>>16==0&&(t+=16,e<<=16),e>>>24==0&&(t+=8,e<<=8),e>>>28==0&&(t+=4,e<<=4),e>>>30==0&&(t+=2,e<<=2),t-=e>>>31},e.toHexString=function(e){return e.toString(16)},e.bitCount=function(e){return e=(e=(858993459&(e-=e>>>1&1431655765))+(e>>>2&858993459))+(e>>>4)&252645135,e+=e>>>8,63&(e+=e>>>16)},e.MIN_VALUE_32_BITS=-2147483648,e}();t.default=r},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(19),o=n(10),a=n(4),i=function(){function e(e,t){if(0===t.length)throw new a.default;this.field=e;var n=t.length;if(n>1&&0===t[0]){for(var r=1;r<n&&0===t[r];)r++;r===n?this.coefficients=Int32Array.from([0]):(this.coefficients=new Int32Array(n-r),o.default.arraycopy(t,r,this.coefficients,0,this.coefficients.length))}else this.coefficients=t}return e.prototype.getCoefficients=function(){return this.coefficients},e.prototype.getDegree=function(){return this.coefficients.length-1},e.prototype.isZero=function(){return 0===this.coefficients[0]},e.prototype.getCoefficient=function(e){return this.coefficients[this.coefficients.length-1-e]},e.prototype.evaluateAt=function(e){if(0===e)return this.getCoefficient(0);var t,n=this.coefficients;if(1===e){t=0;for(var o=0,a=n.length;o!==a;o++){var i=n[o];t=r.default.addOrSubtract(t,i)}return t}t=n[0];var s=n.length,u=this.field;for(o=1;o<s;o++)t=r.default.addOrSubtract(u.multiply(e,t),n[o]);return t},e.prototype.addOrSubtract=function(t){if(!this.field.equals(t.field))throw new a.default("GenericGFPolys do not have same GenericGF field");if(this.isZero())return t;if(t.isZero())return this;var n=this.coefficients,i=t.coefficients;if(n.length>i.length){var s=n;n=i,i=s}var u=new Int32Array(i.length),l=i.length-n.length;o.default.arraycopy(i,0,u,0,l);for(var c=l;c<i.length;c++)u[c]=r.default.addOrSubtract(n[c-l],i[c]);return new e(this.field,u)},e.prototype.multiply=function(t){if(!this.field.equals(t.field))throw new a.default("GenericGFPolys do not have same GenericGF field");if(this.isZero()||t.isZero())return this.field.getZero();for(var n=this.coefficients,o=n.length,i=t.coefficients,s=i.length,u=new Int32Array(o+s-1),l=this.field,c=0;c<o;c++)for(var f=n[c],d=0;d<s;d++)u[c+d]=r.default.addOrSubtract(u[c+d],l.multiply(f,i[d]));return new e(l,u)},e.prototype.multiplyScalar=function(t){if(0===t)return this.field.getZero();if(1===t)return this;for(var n=this.coefficients.length,r=this.field,o=new Int32Array(n),a=this.coefficients,i=0;i<n;i++)o[i]=r.multiply(a[i],t);return new e(r,o)},e.prototype.multiplyByMonomial=function(t,n){if(t<0)throw new a.default;if(0===n)return this.field.getZero();for(var r=this.coefficients,o=r.length,i=new Int32Array(o+t),s=this.field,u=0;u<o;u++)i[u]=s.multiply(r[u],n);return new e(s,i)},e.prototype.divide=function(e){if(!this.field.equals(e.field))throw new a.default("GenericGFPolys do not have same GenericGF field");if(e.isZero())throw new a.default("Divide by 0");for(var t=this.field,n=t.getZero(),r=this,o=e.getCoefficient(e.getDegree()),i=t.inverse(o);r.getDegree()>=e.getDegree()&&!r.isZero();){var s=r.getDegree()-e.getDegree(),u=t.multiply(r.getCoefficient(r.getDegree()),i),l=e.multiplyByMonomial(s,u),c=t.buildMonomial(s,u);n=n.addOrSubtract(c),r=r.addOrSubtract(l)}return[n,r]},e.prototype.toString=function(){for(var e="",t=this.getDegree();t>=0;t--){var n=this.getCoefficient(t);if(0!==n){if(n<0?(e+=" - ",n=-n):e.length>0&&(e+=" + "),0===t||1!==n){var r=this.field.log(n);0===r?e+="1":1===r?e+="a":(e+="a^",e+=r)}0!==t&&(1===t?e+="x":(e+="x^",e+=t))}}return e},e}();t.default=i},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(36),o=n(4);!function(e){e[e.L=0]="L",e[e.M=1]="M",e[e.Q=2]="Q",e[e.H=3]="H"}(t.ErrorCorrectionLevelValues||(t.ErrorCorrectionLevelValues={}));var a=function(){function e(t,n,r){this.value=t,this.stringValue=n,this.bits=r,e.FOR_BITS.set(r,this),e.FOR_VALUE.set(t,this)}return e.prototype.getValue=function(){return this.value},e.prototype.getBits=function(){return this.bits},e.fromString=function(t){switch(t){case"L":return e.L;case"M":return e.M;case"Q":return e.Q;case"H":return e.H;default:throw new r.default(t+"not available")}},e.prototype.toString=function(){return this.stringValue},e.prototype.equals=function(t){if(!(t instanceof e))return!1;var n=t;return this.value===n.value},e.forBits=function(t){if(t<0||t>=e.FOR_BITS.size)throw new o.default;return e.FOR_BITS.get(t)},e.FOR_BITS=new Map,e.FOR_VALUE=new Map,e.L=new e(0,"L",1),e.M=new e(1,"M",0),e.Q=new e(2,"Q",3),e.H=new e(3,"H",2),e}();t.default=a},function(e,t,n){"use strict";var r;Object.defineProperty(t,"__esModule",{value:!0}),function(e){e[e.ERROR_CORRECTION=0]="ERROR_CORRECTION",e[e.CHARACTER_SET=1]="CHARACTER_SET",e[e.DATA_MATRIX_SHAPE=2]="DATA_MATRIX_SHAPE",e[e.MIN_SIZE=3]="MIN_SIZE",e[e.MAX_SIZE=4]="MAX_SIZE",e[e.MARGIN=5]="MARGIN",e[e.PDF417_COMPACT=6]="PDF417_COMPACT",e[e.PDF417_COMPACTION=7]="PDF417_COMPACTION",e[e.PDF417_DIMENSIONS=8]="PDF417_DIMENSIONS",e[e.AZTEC_LAYERS=9]="AZTEC_LAYERS",e[e.QR_VERSION=10]="QR_VERSION"}(r||(r={})),t.default=r},function(e,t,n){"use strict";var r=this&&this.__extends||function(){var e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])};return function(t,n){function r(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}();Object.defineProperty(t,"__esModule",{value:!0});var o=n(5),a=n(12),i=n(15),s=n(6),u=n(16),l=n(166),c=n(3),f=n(7),d=n(14),p=function(e){function t(){var n=e.call(this)||this;n.decodeRowStringBuffer="",n.decodeRowStringBuffer="",t.L_AND_G_PATTERNS=t.L_PATTERNS.map(function(e){return e.slice()});for(var r=10;r<20;r++){for(var o=t.L_PATTERNS[r-10],a=new Array(o.length),i=0;i<o.length;i++)a[i]=o[o.length-i-1];t.L_AND_G_PATTERNS[r]=a}return n}return r(t,e),t.findStartGuardPattern=function(e){for(var n=!1,r=null,o=0,a=[0,0,0];!n;){a=[0,0,0];var i=(r=t.findGuardPattern(e,o,!1,this.START_END_PATTERN,a))[0],s=i-((o=r[1])-i);s>=0&&(n=e.isRange(s,i,!1))}return r},t.prototype.decodeRow=function(e,n,r){var u=t.findStartGuardPattern(n),p=null==r?null:r.get(9);if(null!=p){var h=new s.default((u[0]+u[1])/2,e);p.foundPossibleResultPoint(h)}var g=this.decodeMiddle(n,u,this.decodeRowStringBuffer),v=g.rowOffset,m=g.resultString;if(null!=p){var y=new s.default(v,e);p.foundPossibleResultPoint(y)}var w=t.decodeEnd(n,v);if(null!=p){var b=new s.default((w[0]+w[1])/2,e);p.foundPossibleResultPoint(b)}var E=w[1],_=E+(E-w[0]);if(_>=n.getSize()||!n.isRange(E,_,!1))throw new c.default;var C=m.toString();if(C.length<8)throw new f.default;if(!t.checkChecksum(C))throw new d.default;var T=(u[1]+u[0])/2,O=(w[1]+w[0])/2,S=this.getBarcodeFormat(),N=[new s.default(T,e),new s.default(O,e)],A=new a.default(C,null,0,N,S,(new Date).getTime()),P=0;try{var I=l.default.decodeRow(e,n,w[1]);A.putMetadata(i.default.UPC_EAN_EXTENSION,I.getText()),A.putAllMetadata(I.getResultMetadata()),A.addResultPoints(I.getResultPoints()),P=I.getText().length}catch(e){}var M=null==r?null:r.get(10);if(null!=M){var k=!1;for(var x in M)if(P.toString()===x){k=!0;break}if(!k)throw new c.default}return S===o.default.EAN_13||o.default.UPC_A,A},t.checkChecksum=function(e){return t.checkStandardUPCEANChecksum(e)},t.checkStandardUPCEANChecksum=function(e){var n=e.length;if(0===n)return!1;var r=parseInt(e.charAt(n-1),10);return t.getStandardUPCEANChecksum(e.substring(0,n-1))===r},t.getStandardUPCEANChecksum=function(e){for(var t=e.length,n=0,r=t-1;r>=0;r-=2){if((o=e.charAt(r).charCodeAt(0)-"0".charCodeAt(0))<0||o>9)throw new f.default;n+=o}n*=3;for(r=t-2;r>=0;r-=2){var o;if((o=e.charAt(r).charCodeAt(0)-"0".charCodeAt(0))<0||o>9)throw new f.default;n+=o}return(1e3-n)%10},t.decodeEnd=function(e,n){return t.findGuardPattern(e,n,!1,t.START_END_PATTERN,new Array(t.START_END_PATTERN.length).fill(0))},t.findGuardPattern=function(e,n,r,o,a){for(var i=e.getSize(),s=0,l=n=r?e.getNextUnset(n):e.getNextSet(n),f=o.length,d=r,p=n;p<i;p++)if(e.get(p)!==d)a[s]++;else{if(s===f-1){if(u.default.patternMatchVariance(a,o,t.MAX_INDIVIDUAL_VARIANCE)<t.MAX_AVG_VARIANCE)return[l,p];l+=a[0]+a[1];for(var h=a.slice(2,a.length),g=0;g<s-1;g++)a[g]=h[g];a[s-1]=0,a[s]=0,s--}else s++;a[s]=1,d=!d}throw new c.default},t.decodeDigit=function(e,n,r,o){this.recordPattern(e,r,n);for(var a=this.MAX_AVG_VARIANCE,i=-1,s=o.length,l=0;l<s;l++){var f=o[l],d=u.default.patternMatchVariance(n,f,t.MAX_INDIVIDUAL_VARIANCE);d<a&&(a=d,i=l)}if(i>=0)return i;throw new c.default},t.MAX_AVG_VARIANCE=.48,t.MAX_INDIVIDUAL_VARIANCE=.7,t.START_END_PATTERN=[1,1,1],t.MIDDLE_PATTERN=[1,1,1,1,1],t.END_PATTERN=[1,1,1,1,1,1],t.L_PATTERNS=[[3,2,1,1],[2,2,2,1],[2,1,2,2],[1,4,1,1],[1,1,3,2],[1,2,3,1],[1,1,1,4],[1,3,1,2],[1,2,1,3],[3,1,1,2]],t}(u.default);t.default=p},function(e,t,n){"use strict";(function(t){var r=n(8),o=n(122),a={"Content-Type":"application/x-www-form-urlencoded"};function i(e,t){!r.isUndefined(e)&&r.isUndefined(e["Content-Type"])&&(e["Content-Type"]=t)}var s={adapter:function(){var e;return"undefined"!=typeof XMLHttpRequest?e=n(62):void 0!==t&&(e=n(62)),e}(),transformRequest:[function(e,t){return o(t,"Content-Type"),r.isFormData(e)||r.isArrayBuffer(e)||r.isBuffer(e)||r.isStream(e)||r.isFile(e)||r.isBlob(e)?e:r.isArrayBufferView(e)?e.buffer:r.isURLSearchParams(e)?(i(t,"application/x-www-form-urlencoded;charset=utf-8"),e.toString()):r.isObject(e)?(i(t,"application/json;charset=utf-8"),JSON.stringify(e)):e}],transformResponse:[function(e){if("string"==typeof e)try{e=JSON.parse(e)}catch(e){}return e}],timeout:0,xsrfCookieName:"XSRF-TOKEN",xsrfHeaderName:"X-XSRF-TOKEN",maxContentLength:-1,validateStatus:function(e){return e>=200&&e<300},headers:{common:{Accept:"application/json, text/plain, */*"}}};r.forEach(["delete","get","head"],function(e){s.headers[e]={}}),r.forEach(["post","put","patch"],function(e){s.headers[e]=r.merge(a)}),e.exports=s}).call(this,n(121))},function(e,t,n){"use strict";var r=this&&this.__extends||function(){var e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])};return function(t,n){function r(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}();Object.defineProperty(t,"__esModule",{value:!0});var o=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return r(t,e),t}(n(9).default);t.default=o},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(10),o=function(){function e(){}return e.equals=function(e,t){if(!e)return!1;if(!t)return!1;if(!e.length)return!1;if(!t.length)return!1;if(e.length!==t.length)return!1;for(var n=0,r=e.length;n<r;n++)if(e[n]!==t[n])return!1;return!0},e.hashCode=function(e){if(null===e)return 0;for(var t=1,n=0,r=e;n<r.length;n++){t=31*t+r[n]}return t},e.fillUint8Array=function(e,t){for(var n=0;n!==e.length;n++)e[n]=t},e.copyOf=function(e,t){var n=new Int32Array(t);return r.default.arraycopy(e,0,n,0,Math.min(e.length,t)),n},e.binarySearch=function(t,n,r){void 0===r&&(r=e.numberComparator);for(var o=0,a=t.length-1;o<=a;){var i=a+o>>1,s=r(n,t[i]);if(s>0)o=i+1;else{if(!(s<0))return i;a=i-1}}return-o-1},e.numberComparator=function(e,t){return e-t},e}();t.default=o},function(e,t,n){"use strict";var r=this&&this.__extends||function(){var e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])};return function(t,n){function r(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}();Object.defineProperty(t,"__esModule",{value:!0});var o=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return r(t,e),t}(n(9).default);t.default=o},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(5),o=n(12),a=n(15),i=n(11),s=n(140),u=n(76),l=n(147),c=n(3),f=function(){function e(){this.decoder=new s.default}return e.prototype.getDecoder=function(){return this.decoder},e.prototype.decode=function(t,n){var i,s;if(void 0!==n&&null!==n&&void 0!==n.get(1)){var c=e.extractPureBits(t.getBlackMatrix());i=this.decoder.decodeBitMatrix(c,n),s=e.NO_POINTS}else{var f=new l.default(t.getBlackMatrix()).detect(n);i=this.decoder.decodeBitMatrix(f.getBits(),n),s=f.getPoints()}i.getOther()instanceof u.default&&i.getOther().applyMirroredCorrection(s);var d=new o.default(i.getText(),i.getRawBytes(),void 0,s,r.default.QR_CODE,void 0),p=i.getByteSegments();null!==p&&d.putMetadata(a.default.BYTE_SEGMENTS,p);var h=i.getECLevel();return null!==h&&d.putMetadata(a.default.ERROR_CORRECTION_LEVEL,h),i.hasStructuredAppend()&&(d.putMetadata(a.default.STRUCTURED_APPEND_SEQUENCE,i.getStructuredAppendSequenceNumber()),d.putMetadata(a.default.STRUCTURED_APPEND_PARITY,i.getStructuredAppendParity())),d},e.prototype.reset=function(){},e.extractPureBits=function(e){var t=e.getTopLeftOnBit(),n=e.getBottomRightOnBit();if(null===t||null===n)throw new c.default;var r=this.moduleSize(t,e),o=t[1],a=n[1],s=t[0],u=n[0];if(s>=u||o>=a)throw new c.default;if(a-o!=u-s&&(u=s+(a-o))>=e.getWidth())throw new c.default;var l=Math.round((u-s+1)/r),f=Math.round((a-o+1)/r);if(l<=0||f<=0)throw new c.default;if(f!==l)throw new c.default;var d=Math.floor(r/2);o+=d;var p=(s+=d)+Math.floor((l-1)*r)-u;if(p>0){if(p>d)throw new c.default;s-=p}var h=o+Math.floor((f-1)*r)-a;if(h>0){if(h>d)throw new c.default;o-=h}for(var g=new i.default(l,f),v=0;v<f;v++)for(var m=o+Math.floor(v*r),y=0;y<l;y++)e.get(s+Math.floor(y*r),m)&&g.set(y,v);return g},e.moduleSize=function(e,t){for(var n=t.getHeight(),r=t.getWidth(),o=e[0],a=e[1],i=!0,s=0;o<r&&a<n;){if(i!==t.get(o,a)){if(5==++s)break;i=!i}o++,a++}if(o===r||a===n)throw new c.default;return(o-e[0])/7},e.NO_POINTS=new Array,e}();t.default=f},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(19),o=n(29),a=n(74),i=n(23),s=function(){function e(e){this.field=e}return e.prototype.decode=function(e,t){for(var n=this.field,i=new o.default(n,e),s=new Int32Array(t),u=!0,l=0;l<t;l++){var c=i.evaluateAt(n.exp(l+n.getGeneratorBase()));s[s.length-1-l]=c,0!==c&&(u=!1)}if(!u){var f=new o.default(n,s),d=this.runEuclideanAlgorithm(n.buildMonomial(t,1),f,t),p=d[0],h=d[1],g=this.findErrorLocations(p),v=this.findErrorMagnitudes(h,g);for(l=0;l<g.length;l++){var m=e.length-1-n.log(g[l]);if(m<0)throw new a.default("Bad error location");e[m]=r.default.addOrSubtract(e[m],v[l])}}},e.prototype.runEuclideanAlgorithm=function(e,t,n){if(e.getDegree()<t.getDegree()){var r=e;e=t,t=r}for(var o=this.field,s=e,u=t,l=o.getZero(),c=o.getOne();u.getDegree()>=(n/2|0);){var f=s,d=l;if(l=c,(s=u).isZero())throw new a.default("r_{i-1} was zero");u=f;for(var p=o.getZero(),h=s.getCoefficient(s.getDegree()),g=o.inverse(h);u.getDegree()>=s.getDegree()&&!u.isZero();){var v=u.getDegree()-s.getDegree(),m=o.multiply(u.getCoefficient(u.getDegree()),g);p=p.addOrSubtract(o.buildMonomial(v,m)),u=u.addOrSubtract(s.multiplyByMonomial(v,m))}if(c=p.multiply(l).addOrSubtract(d),u.getDegree()>=s.getDegree())throw new i.default("Division algorithm failed to reduce polynomial?")}var y=c.getCoefficient(0);if(0===y)throw new a.default("sigmaTilde(0) was zero");var w=o.inverse(y);return[c.multiplyScalar(w),u.multiplyScalar(w)]},e.prototype.findErrorLocations=function(e){var t=e.getDegree();if(1===t)return Int32Array.from([e.getCoefficient(1)]);for(var n=new Int32Array(t),r=0,o=this.field,i=1;i<o.getSize()&&r<t;i++)0===e.evaluateAt(i)&&(n[r]=o.inverse(i),r++);if(r!==t)throw new a.default("Error locator degree does not match number of roots");return n},e.prototype.findErrorMagnitudes=function(e,t){for(var n=t.length,r=new Int32Array(n),o=this.field,a=0;a<n;a++){for(var i=o.inverse(t[a]),s=1,u=0;u<n;u++)if(a!==u){var l=o.multiply(t[u],i),c=0==(1&l)?1|l:-2&l;s=o.multiply(s,c)}r[a]=o.multiply(e.evaluateAt(i),o.inverse(s)),0!==o.getGeneratorBase()&&(r[a]=o.multiply(r[a],i))}return r},e}();t.default=s},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(11),o=n(75),a=n(142),i=n(143),s=n(7),u=n(4),l=function(){function e(e,t){for(var n=[],r=2;r<arguments.length;r++)n[r-2]=arguments[r];this.versionNumber=e,this.alignmentPatternCenters=t,this.ecBlocks=n;for(var o=0,a=n[0].getECCodewordsPerBlock(),i=0,s=n[0].getECBlocks();i<s.length;i++){var u=s[i];o+=u.getCount()*(u.getDataCodewords()+a)}this.totalCodewords=o}return e.prototype.getVersionNumber=function(){return this.versionNumber},e.prototype.getAlignmentPatternCenters=function(){return this.alignmentPatternCenters},e.prototype.getTotalCodewords=function(){return this.totalCodewords},e.prototype.getDimensionForVersion=function(){return 17+4*this.versionNumber},e.prototype.getECBlocksForLevel=function(e){return this.ecBlocks[e.getValue()]},e.getProvisionalVersionForDimension=function(e){if(e%4!=1)throw new s.default;try{return this.getVersionForNumber((e-17)/4)}catch(e){throw new s.default}},e.getVersionForNumber=function(t){if(t<1||t>40)throw new u.default;return e.VERSIONS[t-1]},e.decodeVersionInformation=function(t){for(var n=Number.MAX_SAFE_INTEGER,r=0,a=0;a<e.VERSION_DECODE_INFO.length;a++){var i=e.VERSION_DECODE_INFO[a];if(i===t)return e.getVersionForNumber(a+7);var s=o.default.numBitsDiffering(t,i);s<n&&(r=a+7,n=s)}return n<=3?e.getVersionForNumber(r):null},e.prototype.buildFunctionPattern=function(){var e=this.getDimensionForVersion(),t=new r.default(e);t.setRegion(0,0,9,9),t.setRegion(e-8,0,8,9),t.setRegion(0,e-8,9,8);for(var n=this.alignmentPatternCenters.length,o=0;o<n;o++)for(var a=this.alignmentPatternCenters[o]-2,i=0;i<n;i++)0===o&&(0===i||i===n-1)||o===n-1&&0===i||t.setRegion(this.alignmentPatternCenters[i]-2,a,5,5);return t.setRegion(6,9,1,e-17),t.setRegion(9,6,e-17,1),this.versionNumber>6&&(t.setRegion(e-11,0,3,6),t.setRegion(0,e-11,6,3)),t},e.prototype.toString=function(){return""+this.versionNumber},e.VERSION_DECODE_INFO=Int32Array.from([31892,34236,39577,42195,48118,51042,55367,58893,63784,68472,70749,76311,79154,84390,87683,92361,96236,102084,102881,110507,110734,117786,119615,126325,127568,133589,136944,141498,145311,150283,152622,158308,161089,167017]),e.VERSIONS=[new e(1,new Int32Array(0),new a.default(7,new i.default(1,19)),new a.default(10,new i.default(1,16)),new a.default(13,new i.default(1,13)),new a.default(17,new i.default(1,9))),new e(2,Int32Array.from([6,18]),new a.default(10,new i.default(1,34)),new a.default(16,new i.default(1,28)),new a.default(22,new i.default(1,22)),new a.default(28,new i.default(1,16))),new e(3,Int32Array.from([6,22]),new a.default(15,new i.default(1,55)),new a.default(26,new i.default(1,44)),new a.default(18,new i.default(2,17)),new a.default(22,new i.default(2,13))),new e(4,Int32Array.from([6,26]),new a.default(20,new i.default(1,80)),new a.default(18,new i.default(2,32)),new a.default(26,new i.default(2,24)),new a.default(16,new i.default(4,9))),new e(5,Int32Array.from([6,30]),new a.default(26,new i.default(1,108)),new a.default(24,new i.default(2,43)),new a.default(18,new i.default(2,15),new i.default(2,16)),new a.default(22,new i.default(2,11),new i.default(2,12))),new e(6,Int32Array.from([6,34]),new a.default(18,new i.default(2,68)),new a.default(16,new i.default(4,27)),new a.default(24,new i.default(4,19)),new a.default(28,new i.default(4,15))),new e(7,Int32Array.from([6,22,38]),new a.default(20,new i.default(2,78)),new a.default(18,new i.default(4,31)),new a.default(18,new i.default(2,14),new i.default(4,15)),new a.default(26,new i.default(4,13),new i.default(1,14))),new e(8,Int32Array.from([6,24,42]),new a.default(24,new i.default(2,97)),new a.default(22,new i.default(2,38),new i.default(2,39)),new a.default(22,new i.default(4,18),new i.default(2,19)),new a.default(26,new i.default(4,14),new i.default(2,15))),new e(9,Int32Array.from([6,26,46]),new a.default(30,new i.default(2,116)),new a.default(22,new i.default(3,36),new i.default(2,37)),new a.default(20,new i.default(4,16),new i.default(4,17)),new a.default(24,new i.default(4,12),new i.default(4,13))),new e(10,Int32Array.from([6,28,50]),new a.default(18,new i.default(2,68),new i.default(2,69)),new a.default(26,new i.default(4,43),new i.default(1,44)),new a.default(24,new i.default(6,19),new i.default(2,20)),new a.default(28,new i.default(6,15),new i.default(2,16))),new e(11,Int32Array.from([6,30,54]),new a.default(20,new i.default(4,81)),new a.default(30,new i.default(1,50),new i.default(4,51)),new a.default(28,new i.default(4,22),new i.default(4,23)),new a.default(24,new i.default(3,12),new i.default(8,13))),new e(12,Int32Array.from([6,32,58]),new a.default(24,new i.default(2,92),new i.default(2,93)),new a.default(22,new i.default(6,36),new i.default(2,37)),new a.default(26,new i.default(4,20),new i.default(6,21)),new a.default(28,new i.default(7,14),new i.default(4,15))),new e(13,Int32Array.from([6,34,62]),new a.default(26,new i.default(4,107)),new a.default(22,new i.default(8,37),new i.default(1,38)),new a.default(24,new i.default(8,20),new i.default(4,21)),new a.default(22,new i.default(12,11),new i.default(4,12))),new e(14,Int32Array.from([6,26,46,66]),new a.default(30,new i.default(3,115),new i.default(1,116)),new a.default(24,new i.default(4,40),new i.default(5,41)),new a.default(20,new i.default(11,16),new i.default(5,17)),new a.default(24,new i.default(11,12),new i.default(5,13))),new e(15,Int32Array.from([6,26,48,70]),new a.default(22,new i.default(5,87),new i.default(1,88)),new a.default(24,new i.default(5,41),new i.default(5,42)),new a.default(30,new i.default(5,24),new i.default(7,25)),new a.default(24,new i.default(11,12),new i.default(7,13))),new e(16,Int32Array.from([6,26,50,74]),new a.default(24,new i.default(5,98),new i.default(1,99)),new a.default(28,new i.default(7,45),new i.default(3,46)),new a.default(24,new i.default(15,19),new i.default(2,20)),new a.default(30,new i.default(3,15),new i.default(13,16))),new e(17,Int32Array.from([6,30,54,78]),new a.default(28,new i.default(1,107),new i.default(5,108)),new a.default(28,new i.default(10,46),new i.default(1,47)),new a.default(28,new i.default(1,22),new i.default(15,23)),new a.default(28,new i.default(2,14),new i.default(17,15))),new e(18,Int32Array.from([6,30,56,82]),new a.default(30,new i.default(5,120),new i.default(1,121)),new a.default(26,new i.default(9,43),new i.default(4,44)),new a.default(28,new i.default(17,22),new i.default(1,23)),new a.default(28,new i.default(2,14),new i.default(19,15))),new e(19,Int32Array.from([6,30,58,86]),new a.default(28,new i.default(3,113),new i.default(4,114)),new a.default(26,new i.default(3,44),new i.default(11,45)),new a.default(26,new i.default(17,21),new i.default(4,22)),new a.default(26,new i.default(9,13),new i.default(16,14))),new e(20,Int32Array.from([6,34,62,90]),new a.default(28,new i.default(3,107),new i.default(5,108)),new a.default(26,new i.default(3,41),new i.default(13,42)),new a.default(30,new i.default(15,24),new i.default(5,25)),new a.default(28,new i.default(15,15),new i.default(10,16))),new e(21,Int32Array.from([6,28,50,72,94]),new a.default(28,new i.default(4,116),new i.default(4,117)),new a.default(26,new i.default(17,42)),new a.default(28,new i.default(17,22),new i.default(6,23)),new a.default(30,new i.default(19,16),new i.default(6,17))),new e(22,Int32Array.from([6,26,50,74,98]),new a.default(28,new i.default(2,111),new i.default(7,112)),new a.default(28,new i.default(17,46)),new a.default(30,new i.default(7,24),new i.default(16,25)),new a.default(24,new i.default(34,13))),new e(23,Int32Array.from([6,30,54,78,102]),new a.default(30,new i.default(4,121),new i.default(5,122)),new a.default(28,new i.default(4,47),new i.default(14,48)),new a.default(30,new i.default(11,24),new i.default(14,25)),new a.default(30,new i.default(16,15),new i.default(14,16))),new e(24,Int32Array.from([6,28,54,80,106]),new a.default(30,new i.default(6,117),new i.default(4,118)),new a.default(28,new i.default(6,45),new i.default(14,46)),new a.default(30,new i.default(11,24),new i.default(16,25)),new a.default(30,new i.default(30,16),new i.default(2,17))),new e(25,Int32Array.from([6,32,58,84,110]),new a.default(26,new i.default(8,106),new i.default(4,107)),new a.default(28,new i.default(8,47),new i.default(13,48)),new a.default(30,new i.default(7,24),new i.default(22,25)),new a.default(30,new i.default(22,15),new i.default(13,16))),new e(26,Int32Array.from([6,30,58,86,114]),new a.default(28,new i.default(10,114),new i.default(2,115)),new a.default(28,new i.default(19,46),new i.default(4,47)),new a.default(28,new i.default(28,22),new i.default(6,23)),new a.default(30,new i.default(33,16),new i.default(4,17))),new e(27,Int32Array.from([6,34,62,90,118]),new a.default(30,new i.default(8,122),new i.default(4,123)),new a.default(28,new i.default(22,45),new i.default(3,46)),new a.default(30,new i.default(8,23),new i.default(26,24)),new a.default(30,new i.default(12,15),new i.default(28,16))),new e(28,Int32Array.from([6,26,50,74,98,122]),new a.default(30,new i.default(3,117),new i.default(10,118)),new a.default(28,new i.default(3,45),new i.default(23,46)),new a.default(30,new i.default(4,24),new i.default(31,25)),new a.default(30,new i.default(11,15),new i.default(31,16))),new e(29,Int32Array.from([6,30,54,78,102,126]),new a.default(30,new i.default(7,116),new i.default(7,117)),new a.default(28,new i.default(21,45),new i.default(7,46)),new a.default(30,new i.default(1,23),new i.default(37,24)),new a.default(30,new i.default(19,15),new i.default(26,16))),new e(30,Int32Array.from([6,26,52,78,104,130]),new a.default(30,new i.default(5,115),new i.default(10,116)),new a.default(28,new i.default(19,47),new i.default(10,48)),new a.default(30,new i.default(15,24),new i.default(25,25)),new a.default(30,new i.default(23,15),new i.default(25,16))),new e(31,Int32Array.from([6,30,56,82,108,134]),new a.default(30,new i.default(13,115),new i.default(3,116)),new a.default(28,new i.default(2,46),new i.default(29,47)),new a.default(30,new i.default(42,24),new i.default(1,25)),new a.default(30,new i.default(23,15),new i.default(28,16))),new e(32,Int32Array.from([6,34,60,86,112,138]),new a.default(30,new i.default(17,115)),new a.default(28,new i.default(10,46),new i.default(23,47)),new a.default(30,new i.default(10,24),new i.default(35,25)),new a.default(30,new i.default(19,15),new i.default(35,16))),new e(33,Int32Array.from([6,30,58,86,114,142]),new a.default(30,new i.default(17,115),new i.default(1,116)),new a.default(28,new i.default(14,46),new i.default(21,47)),new a.default(30,new i.default(29,24),new i.default(19,25)),new a.default(30,new i.default(11,15),new i.default(46,16))),new e(34,Int32Array.from([6,34,62,90,118,146]),new a.default(30,new i.default(13,115),new i.default(6,116)),new a.default(28,new i.default(14,46),new i.default(23,47)),new a.default(30,new i.default(44,24),new i.default(7,25)),new a.default(30,new i.default(59,16),new i.default(1,17))),new e(35,Int32Array.from([6,30,54,78,102,126,150]),new a.default(30,new i.default(12,121),new i.default(7,122)),new a.default(28,new i.default(12,47),new i.default(26,48)),new a.default(30,new i.default(39,24),new i.default(14,25)),new a.default(30,new i.default(22,15),new i.default(41,16))),new e(36,Int32Array.from([6,24,50,76,102,128,154]),new a.default(30,new i.default(6,121),new i.default(14,122)),new a.default(28,new i.default(6,47),new i.default(34,48)),new a.default(30,new i.default(46,24),new i.default(10,25)),new a.default(30,new i.default(2,15),new i.default(64,16))),new e(37,Int32Array.from([6,28,54,80,106,132,158]),new a.default(30,new i.default(17,122),new i.default(4,123)),new a.default(28,new i.default(29,46),new i.default(14,47)),new a.default(30,new i.default(49,24),new i.default(10,25)),new a.default(30,new i.default(24,15),new i.default(46,16))),new e(38,Int32Array.from([6,32,58,84,110,136,162]),new a.default(30,new i.default(4,122),new i.default(18,123)),new a.default(28,new i.default(13,46),new i.default(32,47)),new a.default(30,new i.default(48,24),new i.default(14,25)),new a.default(30,new i.default(42,15),new i.default(32,16))),new e(39,Int32Array.from([6,26,54,82,110,138,166]),new a.default(30,new i.default(20,117),new i.default(4,118)),new a.default(28,new i.default(40,47),new i.default(7,48)),new a.default(30,new i.default(43,24),new i.default(22,25)),new a.default(30,new i.default(10,15),new i.default(67,16))),new e(40,Int32Array.from([6,30,58,86,114,142,170]),new a.default(30,new i.default(19,118),new i.default(6,119)),new a.default(28,new i.default(18,47),new i.default(31,48)),new a.default(30,new i.default(34,24),new i.default(34,25)),new a.default(30,new i.default(20,15),new i.default(61,16)))],e}();t.default=l},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(4),o=function(){function e(e){this.bytes=e,this.byteOffset=0,this.bitOffset=0}return e.prototype.getBitOffset=function(){return this.bitOffset},e.prototype.getByteOffset=function(){return this.byteOffset},e.prototype.readBits=function(e){if(e<1||e>32||e>this.available())throw new r.default(""+e);var t=0,n=this.bitOffset,o=this.byteOffset,a=this.bytes;if(n>0){var i=8-n,s=e<i?e:i,u=255>>8-s<<(l=i-s);t=(a[o]&u)>>l,e-=s,8===(n+=s)&&(n=0,o++)}if(e>0){for(;e>=8;)t=t<<8|255&a[o],o++,e-=8;if(e>0){var l;u=255>>(l=8-e)<<l;t=t<<e|(a[o]&u)>>l,n+=e}}return this.bitOffset=n,this.byteOffset=o,t},e.prototype.available=function(){return 8*(this.bytes.length-this.byteOffset)-this.bitOffset},e}();t.default=o},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t,n,r,o,a){void 0===o&&(o=-1),void 0===a&&(a=-1),this.rawBytes=e,this.text=t,this.byteSegments=n,this.ecLevel=r,this.structuredAppendSequenceNumber=o,this.structuredAppendParity=a,this.numBits=void 0===e||null===e?0:8*e.length}return e.prototype.getRawBytes=function(){return this.rawBytes},e.prototype.getNumBits=function(){return this.numBits},e.prototype.setNumBits=function(e){this.numBits=e},e.prototype.getText=function(){return this.text},e.prototype.getByteSegments=function(){return this.byteSegments},e.prototype.getECLevel=function(){return this.ecLevel},e.prototype.getErrorsCorrected=function(){return this.errorsCorrected},e.prototype.setErrorsCorrected=function(e){this.errorsCorrected=e},e.prototype.getErasures=function(){return this.erasures},e.prototype.setErasures=function(e){this.erasures=e},e.prototype.getOther=function(){return this.other},e.prototype.setOther=function(e){this.other=e},e.prototype.hasStructuredAppend=function(){return this.structuredAppendParity>=0&&this.structuredAppendSequenceNumber>=0},e.prototype.getStructuredAppendParity=function(){return this.structuredAppendParity},e.prototype.getStructuredAppendSequenceNumber=function(){return this.structuredAppendSequenceNumber},e}();t.default=r},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(34),o=n(24),a=function(){function e(){}return e.decode=function(e,t){var n=this.encodingName(t);return"undefined"==typeof TextDecoder?this.decodeFallback(e,n):new TextDecoder(n).decode(e)},e.encode=function(t,n){return e.isBrowser()?"undefined"==typeof TextEncoder?this.encodeFallback(t):(new TextEncoder).encode(t):new TextEncoder(this.encodingName(n),{NONSTANDARD_allowLegacyEncoding:!0}).encode(t)},e.isBrowser=function(){return"undefined"!=typeof window&&"[object Window]"==={}.toString.call(window)},e.encodingName=function(e){return"string"==typeof e?e:e.getName()},e.encodingCharacterSet=function(e){return o.default.getCharacterSetECIByName(this.encodingName(e))},e.decodeFallback=function(e,t){var n=this.encodingCharacterSet(t);if(n.equals(o.default.UTF8)||n.equals(o.default.ISO8859_1)||n.equals(o.default.ASCII)){for(var a="",i=0,s=e.length;i<s;i++){var u=e[i].toString(16);u.length<2&&(u="0"+u),a+="%"+u}return decodeURIComponent(a)}if(n.equals(o.default.UnicodeBigUnmarked))return String.fromCharCode.apply(null,new Uint16Array(e.buffer));throw new r.default("Encoding "+this.encodingName(t)+" not supported by fallback.")},e.encodeFallback=function(e){for(var t=btoa(unescape(encodeURIComponent(e))).split(""),n=[],r=0;r<t.length;r++)n.push(t[r].charCodeAt(0));return new Uint8Array(n)},e}();t.default=a},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){this.bits=e,this.points=t}return e.prototype.getBits=function(){return this.bits},e.prototype.getPoints=function(){return this.points},e}();t.default=r},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(79),o=function(){function e(){}return e.setGridSampler=function(t){e.gridSampler=t},e.getInstance=function(){return e.gridSampler},e.gridSampler=new r.default,e}();t.default=o},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t,n,r,o,a,i,s,u){this.a11=e,this.a21=t,this.a31=n,this.a12=r,this.a22=o,this.a32=a,this.a13=i,this.a23=s,this.a33=u}return e.quadrilateralToQuadrilateral=function(t,n,r,o,a,i,s,u,l,c,f,d,p,h,g,v){var m=e.quadrilateralToSquare(t,n,r,o,a,i,s,u);return e.squareToQuadrilateral(l,c,f,d,p,h,g,v).times(m)},e.prototype.transformPoints=function(e){for(var t=e.length,n=this.a11,r=this.a12,o=this.a13,a=this.a21,i=this.a22,s=this.a23,u=this.a31,l=this.a32,c=this.a33,f=0;f<t;f+=2){var d=e[f],p=e[f+1],h=o*d+s*p+c;e[f]=(n*d+a*p+u)/h,e[f+1]=(r*d+i*p+l)/h}},e.prototype.transformPointsWithValues=function(e,t){for(var n=this.a11,r=this.a12,o=this.a13,a=this.a21,i=this.a22,s=this.a23,u=this.a31,l=this.a32,c=this.a33,f=e.length,d=0;d<f;d++){var p=e[d],h=t[d],g=o*p+s*h+c;e[d]=(n*p+a*h+u)/g,t[d]=(r*p+i*h+l)/g}},e.squareToQuadrilateral=function(t,n,r,o,a,i,s,u){var l=t-r+a-s,c=n-o+i-u;if(0===l&&0===c)return new e(r-t,a-r,t,o-n,i-o,n,0,0,1);var f=r-a,d=s-a,p=o-i,h=u-i,g=f*h-d*p,v=(l*h-d*c)/g,m=(f*c-l*p)/g;return new e(r-t+v*r,s-t+m*s,t,o-n+v*o,u-n+m*u,n,v,m,1)},e.quadrilateralToSquare=function(t,n,r,o,a,i,s,u){return e.squareToQuadrilateral(t,n,r,o,a,i,s,u).buildAdjoint()},e.prototype.buildAdjoint=function(){return new e(this.a22*this.a33-this.a23*this.a32,this.a23*this.a31-this.a21*this.a33,this.a21*this.a32-this.a22*this.a31,this.a13*this.a32-this.a12*this.a33,this.a11*this.a33-this.a13*this.a31,this.a12*this.a31-this.a11*this.a32,this.a12*this.a23-this.a13*this.a22,this.a13*this.a21-this.a11*this.a23,this.a11*this.a22-this.a12*this.a21)},e.prototype.times=function(t){return new e(this.a11*t.a11+this.a21*t.a12+this.a31*t.a13,this.a11*t.a21+this.a21*t.a22+this.a31*t.a23,this.a11*t.a31+this.a21*t.a32+this.a31*t.a33,this.a12*t.a11+this.a22*t.a12+this.a32*t.a13,this.a12*t.a21+this.a22*t.a22+this.a32*t.a23,this.a12*t.a31+this.a22*t.a32+this.a32*t.a33,this.a13*t.a11+this.a23*t.a12+this.a33*t.a13,this.a13*t.a21+this.a23*t.a22+this.a33*t.a23,this.a13*t.a31+this.a23*t.a32+this.a33*t.a33)},e}();t.default=r},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(154),o=n(12),a=n(5),i=n(15),s=n(11),u=n(159),l=n(10),c=n(3),f=function(){function e(){this.decoder=new r.default}return e.prototype.decode=function(t,n){var r,s;if(void 0===n&&(n=null),null!=n&&n.has(1)){var c=e.extractPureBits(t.getBlackMatrix());r=this.decoder.decode(c),s=e.NO_POINTS}else{var f=new u.default(t.getBlackMatrix()).detect();r=this.decoder.decode(f.getBits()),s=f.getPoints()}var d=r.getRawBytes(),p=new o.default(r.getText(),d,8*d.length,s,a.default.DATA_MATRIX,l.default.currentTimeMillis()),h=r.getByteSegments();null!=h&&p.putMetadata(i.default.BYTE_SEGMENTS,h);var g=r.getECLevel();return null!=g&&p.putMetadata(i.default.ERROR_CORRECTION_LEVEL,g),p},e.prototype.reset=function(){},e.extractPureBits=function(e){var t=e.getTopLeftOnBit(),n=e.getBottomRightOnBit();if(null==t||null==n)throw new c.default;var r=this.moduleSize(t,e),o=t[1],a=n[1],i=t[0],u=(n[0]-i+1)/r,l=(a-o+1)/r;if(u<=0||l<=0)throw new c.default;var f=r/2;o+=f,i+=f;for(var d=new s.default(u,l),p=0;p<l;p++)for(var h=o+p*r,g=0;g<u;g++)e.get(i+g*r,h)&&d.set(g,p);return d},e.moduleSize=function(e,t){for(var n=t.getWidth(),r=e[0],o=e[1];r<n&&t.get(r,o);)r++;if(r===n)throw new c.default;var a=r-e[0];if(0===a)throw new c.default;return a},e.NO_POINTS=[],e}();t.default=f},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(31),o=n(18),a=n(24),i=n(19),s=n(82),u=n(78),l=n(39),c=n(83),f=n(161),d=n(48),p=n(162),h=n(42),g=n(163),v=n(49),m=function(){function e(){}return e.calculateMaskPenalty=function(e){return c.default.applyMaskPenaltyRule1(e)+c.default.applyMaskPenaltyRule2(e)+c.default.applyMaskPenaltyRule3(e)+c.default.applyMaskPenaltyRule4(e)},e.encode=function(t,n,i){void 0===i&&(i=null);var s=e.DEFAULT_BYTE_MODE_ENCODING,c=null!==i&&void 0!==i.get(r.default.CHARACTER_SET);c&&(s=i.get(r.default.CHARACTER_SET).toString());var h=this.chooseMode(t,s),g=new o.default;if(h===u.default.BYTE&&(c||e.DEFAULT_BYTE_MODE_ENCODING!==s)){var m=a.default.getCharacterSetECIByName(s);void 0!==m&&this.appendECI(m,g)}this.appendModeInfo(h,g);var y,w=new o.default;if(this.appendBytes(t,h,w,s),null!==i&&void 0!==i.get(r.default.QR_VERSION)){var b=Number.parseInt(i.get(r.default.QR_VERSION).toString(),10);y=l.default.getVersionForNumber(b);var E=this.calculateBitsNeeded(h,g,w,y);if(!this.willFit(E,y,n))throw new v.default("Data too big for requested version")}else y=this.recommendVersion(n,h,g,w);var _=new o.default;_.appendBitArray(g);var C=h===u.default.BYTE?w.getSizeInBytes():t.length;this.appendLengthInfo(C,y,h,_),_.appendBitArray(w);var T=y.getECBlocksForLevel(n),O=y.getTotalCodewords()-T.getTotalECCodewords();this.terminateBits(O,_);var S=this.interleaveWithECBytes(_,y.getTotalCodewords(),O,T.getNumBlocks()),N=new d.default;N.setECLevel(n),N.setMode(h),N.setVersion(y);var A=y.getDimensionForVersion(),P=new f.default(A,A),I=this.chooseMaskPattern(S,n,y,P);return N.setMaskPattern(I),p.default.buildMatrix(S,n,y,I,P),N.setMatrix(P),N},e.recommendVersion=function(e,t,n,r){var o=this.calculateBitsNeeded(t,n,r,l.default.getVersionForNumber(1)),a=this.chooseVersion(o,e),i=this.calculateBitsNeeded(t,n,r,a);return this.chooseVersion(i,e)},e.calculateBitsNeeded=function(e,t,n,r){return t.getSize()+e.getCharacterCountBits(r)+n.getSize()},e.getAlphanumericCode=function(t){return t<e.ALPHANUMERIC_TABLE.length?e.ALPHANUMERIC_TABLE[t]:-1},e.chooseMode=function(t,n){if(void 0===n&&(n=null),a.default.SJIS.getName()===n&&this.isOnlyDoubleByteKanji(t))return u.default.KANJI;for(var r=!1,o=!1,i=0,s=t.length;i<s;++i){var l=t.charAt(i);if(e.isDigit(l))r=!0;else{if(-1===this.getAlphanumericCode(l.charCodeAt(0)))return u.default.BYTE;o=!0}}return o?u.default.ALPHANUMERIC:r?u.default.NUMERIC:u.default.BYTE},e.isOnlyDoubleByteKanji=function(e){var t;try{t=h.default.encode(e,a.default.SJIS)}catch(e){return!1}var n=t.length;if(n%2!=0)return!1;for(var r=0;r<n;r+=2){var o=255&t[r];if((o<129||o>159)&&(o<224||o>235))return!1}return!0},e.chooseMaskPattern=function(e,t,n,r){for(var o=Number.MAX_SAFE_INTEGER,a=-1,i=0;i<d.default.NUM_MASK_PATTERNS;i++){p.default.buildMatrix(e,t,n,i,r);var s=this.calculateMaskPenalty(r);s<o&&(o=s,a=i)}return a},e.chooseVersion=function(t,n){for(var r=1;r<=40;r++){var o=l.default.getVersionForNumber(r);if(e.willFit(t,o,n))return o}throw new v.default("Data too big")},e.willFit=function(e,t,n){return t.getTotalCodewords()-t.getECBlocksForLevel(n).getTotalECCodewords()>=(e+7)/8},e.terminateBits=function(e,t){var n=8*e;if(t.getSize()>n)throw new v.default("data bits cannot fit in the QR Code"+t.getSize()+" > "+n);for(var r=0;r<4&&t.getSize()<n;++r)t.appendBit(!1);var o=7&t.getSize();if(o>0)for(r=o;r<8;r++)t.appendBit(!1);var a=e-t.getSizeInBytes();for(r=0;r<a;++r)t.appendBits(0==(1&r)?236:17,8);if(t.getSize()!==n)throw new v.default("Bits size does not equal capacity")},e.getNumDataBytesAndNumECBytesForBlockID=function(e,t,n,r,o,a){if(r>=n)throw new v.default("Block ID too large");var i=e%n,s=n-i,u=Math.floor(e/n),l=u+1,c=Math.floor(t/n),f=c+1,d=u-c,p=l-f;if(d!==p)throw new v.default("EC bytes mismatch");if(n!==s+i)throw new v.default("RS blocks mismatch");if(e!==(c+d)*s+(f+p)*i)throw new v.default("Total bytes mismatch");r<s?(o[0]=c,a[0]=d):(o[0]=f,a[0]=p)},e.interleaveWithECBytes=function(t,n,r,a){if(t.getSizeInBytes()!==r)throw new v.default("Number of bits and data bytes does not match");for(var i=0,s=0,u=0,l=new Array,c=0;c<a;++c){var f=new Int32Array(1),d=new Int32Array(1);e.getNumDataBytesAndNumECBytesForBlockID(n,r,a,c,f,d);var p=f[0],h=new Uint8Array(p);t.toBytes(8*i,h,0,p);var m=e.generateECBytes(h,d[0]);l.push(new g.default(h,m)),s=Math.max(s,p),u=Math.max(u,m.length),i+=f[0]}if(r!==i)throw new v.default("Data bytes does not match offset");var y=new o.default;for(c=0;c<s;++c)for(var w=0,b=l;w<b.length;w++){c<(h=b[w].getDataBytes()).length&&y.appendBits(h[c],8)}for(c=0;c<u;++c)for(var E=0,_=l;E<_.length;E++){c<(m=_[E].getErrorCorrectionBytes()).length&&y.appendBits(m[c],8)}if(n!==y.getSizeInBytes())throw new v.default("Interleaving error: "+n+" and "+y.getSizeInBytes()+" differ.");return y},e.generateECBytes=function(e,t){for(var n=e.length,r=new Int32Array(n+t),o=0;o<n;o++)r[o]=255&e[o];new s.default(i.default.QR_CODE_FIELD_256).encode(r,t);var a=new Uint8Array(t);for(o=0;o<t;o++)a[o]=r[n+o];return a},e.appendModeInfo=function(e,t){t.appendBits(e.getBits(),4)},e.appendLengthInfo=function(e,t,n,r){var o=n.getCharacterCountBits(t);if(e>=1<<o)throw new v.default(e+" is bigger than "+((1<<o)-1));r.appendBits(e,o)},e.appendBytes=function(t,n,r,o){switch(n){case u.default.NUMERIC:e.appendNumericBytes(t,r);break;case u.default.ALPHANUMERIC:e.appendAlphanumericBytes(t,r);break;case u.default.BYTE:e.append8BitBytes(t,r,o);break;case u.default.KANJI:e.appendKanjiBytes(t,r);break;default:throw new v.default("Invalid mode: "+n)}},e.getDigit=function(e){return e.charCodeAt(0)-48},e.isDigit=function(t){var n=e.getDigit(t);return n>=0&&n<=9},e.appendNumericBytes=function(t,n){for(var r=t.length,o=0;o<r;){var a=e.getDigit(t.charAt(o));if(o+2<r){var i=e.getDigit(t.charAt(o+1)),s=e.getDigit(t.charAt(o+2));n.appendBits(100*a+10*i+s,10),o+=3}else if(o+1<r){i=e.getDigit(t.charAt(o+1));n.appendBits(10*a+i,7),o+=2}else n.appendBits(a,4),o++}},e.appendAlphanumericBytes=function(t,n){for(var r=t.length,o=0;o<r;){var a=e.getAlphanumericCode(t.charCodeAt(o));if(-1===a)throw new v.default;if(o+1<r){var i=e.getAlphanumericCode(t.charCodeAt(o+1));if(-1===i)throw new v.default;n.appendBits(45*a+i,11),o+=2}else n.appendBits(a,6),o++}},e.append8BitBytes=function(e,t,n){var r;try{r=h.default.encode(e,n)}catch(e){throw new v.default(e)}for(var o=0,a=r.length;o!==a;o++){var i=r[o];t.appendBits(i,8)}},e.appendKanjiBytes=function(e,t){var n;try{n=h.default.encode(e,a.default.SJIS)}catch(e){throw new v.default(e)}for(var r=n.length,o=0;o<r;o+=2){var i=(255&n[o])<<8&4294967295|255&n[o+1],s=-1;if(i>=33088&&i<=40956?s=i-33088:i>=57408&&i<=60351&&(s=i-49472),-1===s)throw new v.default("Invalid byte sequence");var u=192*(s>>8)+(255&s);t.appendBits(u,13)}},e.appendECI=function(e,t){t.appendBits(u.default.ECI.getBits(),4),t.appendBits(e.getValue(),8)},e.ALPHANUMERIC_TABLE=Int32Array.from([-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,36,-1,-1,-1,37,38,-1,-1,-1,-1,39,40,-1,41,42,43,0,1,2,3,4,5,6,7,8,9,44,-1,-1,-1,-1,-1,-1,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,-1,-1,-1,-1,-1]),e.DEFAULT_BYTE_MODE_ENCODING=a.default.UTF8.getName(),e}();t.default=m},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(13),o=function(){function e(){this.maskPattern=-1}return e.prototype.getMode=function(){return this.mode},e.prototype.getECLevel=function(){return this.ecLevel},e.prototype.getVersion=function(){return this.version},e.prototype.getMaskPattern=function(){return this.maskPattern},e.prototype.getMatrix=function(){return this.matrix},e.prototype.toString=function(){var e=new r.default;return e.append("<<\n"),e.append(" mode: "),e.append(this.mode?this.mode.toString():"null"),e.append("\n ecLevel: "),e.append(this.ecLevel?this.ecLevel.toString():"null"),e.append("\n version: "),e.append(this.version?this.version.toString():"null"),e.append("\n maskPattern: "),e.append(this.maskPattern.toString()),this.matrix?(e.append("\n matrix:\n"),e.append(this.matrix.toString())):e.append("\n matrix: null\n"),e.append(">>\n"),e.toString()},e.prototype.setMode=function(e){this.mode=e},e.prototype.setECLevel=function(e){this.ecLevel=e},e.prototype.setVersion=function(e){this.version=e},e.prototype.setMaskPattern=function(e){this.maskPattern=e},e.prototype.setMatrix=function(e){this.matrix=e},e.isValidMaskPattern=function(t){return t>=0&&t<e.NUM_MASK_PATTERNS},e.NUM_MASK_PATTERNS=8,e}();t.default=o},function(e,t,n){"use strict";var r=this&&this.__extends||function(){var e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])};return function(t,n){function r(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}();Object.defineProperty(t,"__esModule",{value:!0});var o=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return r(t,e),t}(n(9).default);t.default=o},function(e,t,n){"use strict";var r=this&&this.__extends||function(){var e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])};return function(t,n){function r(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}();Object.defineProperty(t,"__esModule",{value:!0});var o=n(5),a=n(84),i=n(85),s=n(86),u=n(165),l=n(3),c=function(e){function t(t){var n=e.call(this)||this;n.readers=[];var r=t?t.get(2):null,l=t&&void 0!==t.get(6);return r&&(r.includes(o.default.EAN_13)&&n.readers.push(new u.default(t)),r.includes(o.default.CODE_39)&&n.readers.push(new a.default(l)),r.includes(o.default.CODE_128)&&n.readers.push(new i.default),r.includes(o.default.ITF)&&n.readers.push(new s.default)),0===n.readers.length&&(n.readers.push(new a.default),n.readers.push(new u.default(t)),n.readers.push(new i.default),n.readers.push(new s.default)),n}return r(t,e),t.prototype.decodeRow=function(e,t,n){for(var r=0;r<this.readers.length;r++)try{return this.readers[r].decodeRow(e,t,n)}catch(e){}throw new l.default},t.prototype.reset=function(){this.readers.forEach(function(e){return e.reset()})},t}(n(16).default);t.default=c},function(e,t,n){(function(t){var n="[object AsyncFunction]",r="[object Function]",o="[object GeneratorFunction]",a="[object Null]",i="[object Proxy]",s="[object Undefined]",u="object"==typeof t&&t&&t.Object===Object&&t,l="object"==typeof self&&self&&self.Object===Object&&self,c=u||l||Function("return this")(),f=Object.prototype,d=f.hasOwnProperty,p=f.toString,h=c.Symbol,g=h?h.toStringTag:void 0;function v(e){return null==e?void 0===e?s:a:g&&g in Object(e)?function(e){var t=d.call(e,g),n=e[g];try{e[g]=void 0;var r=!0}catch(e){}var o=p.call(e);r&&(t?e[g]=n:delete e[g]);return o}(e):function(e){return p.call(e)}(e)}e.exports=function(e){if(!function(e){var t=typeof e;return null!=e&&("object"==t||"function"==t)}(e))return!1;var t=v(e);return t==r||t==o||t==n||t==i}}).call(this,n(26))},function(e,t,n){"use strict";n.r(t),n.d(t,"createStore",function(){return u}),n.d(t,"combineReducers",function(){return c}),n.d(t,"bindActionCreators",function(){return d}),n.d(t,"applyMiddleware",function(){return h}),n.d(t,"compose",function(){return p}),n.d(t,"__DO_NOT_USE__ActionTypes",function(){return o});var r=n(56),o={INIT:"@@redux/INIT"+Math.random().toString(36).substring(7).split("").join("."),REPLACE:"@@redux/REPLACE"+Math.random().toString(36).substring(7).split("").join(".")},a="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},i=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e};function s(e){if("object"!==(void 0===e?"undefined":a(e))||null===e)return!1;for(var t=e;null!==Object.getPrototypeOf(t);)t=Object.getPrototypeOf(t);return Object.getPrototypeOf(e)===t}function u(e,t,n){var i;if("function"==typeof t&&void 0===n&&(n=t,t=void 0),void 0!==n){if("function"!=typeof n)throw new Error("Expected the enhancer to be a function.");return n(u)(e,t)}if("function"!=typeof e)throw new Error("Expected the reducer to be a function.");var l=e,c=t,f=[],d=f,p=!1;function h(){d===f&&(d=f.slice())}function g(){if(p)throw new Error("You may not call store.getState() while the reducer is executing. The reducer has already received the state as an argument. Pass it down from the top reducer instead of reading it from the store.");return c}function v(e){if("function"!=typeof e)throw new Error("Expected the listener to be a function.");if(p)throw new Error("You may not call store.subscribe() while the reducer is executing. If you would like to be notified after the store has been updated, subscribe from a component and invoke store.getState() in the callback to access the latest state. See https://redux.js.org/api-reference/store#subscribe(listener) for more details.");var t=!0;return h(),d.push(e),function(){if(t){if(p)throw new Error("You may not unsubscribe from a store listener while the reducer is executing. See https://redux.js.org/api-reference/store#subscribe(listener) for more details.");t=!1,h();var n=d.indexOf(e);d.splice(n,1)}}}function m(e){if(!s(e))throw new Error("Actions must be plain objects. Use custom middleware for async actions.");if(void 0===e.type)throw new Error('Actions may not have an undefined "type" property. Have you misspelled a constant?');if(p)throw new Error("Reducers may not dispatch actions.");try{p=!0,c=l(c,e)}finally{p=!1}for(var t=f=d,n=0;n<t.length;n++){(0,t[n])()}return e}return m({type:o.INIT}),(i={dispatch:m,subscribe:v,getState:g,replaceReducer:function(e){if("function"!=typeof e)throw new Error("Expected the nextReducer to be a function.");l=e,m({type:o.REPLACE})}})[r.a]=function(){var e,t=v;return(e={subscribe:function(e){if("object"!==(void 0===e?"undefined":a(e))||null===e)throw new TypeError("Expected the observer to be an object.");function n(){e.next&&e.next(g())}return n(),{unsubscribe:t(n)}}})[r.a]=function(){return this},e},i}function l(e,t){var n=t&&t.type;return"Given "+(n&&'action "'+String(n)+'"'||"an action")+', reducer "'+e+'" returned undefined. To ignore an action, you must explicitly return the previous state. If you want this reducer to hold no value, you can return null instead of undefined.'}function c(e){for(var t=Object.keys(e),n={},r=0;r<t.length;r++){var a=t[r];0,"function"==typeof e[a]&&(n[a]=e[a])}var i=Object.keys(n);var s=void 0;try{!function(e){Object.keys(e).forEach(function(t){var n=e[t];if(void 0===n(void 0,{type:o.INIT}))throw new Error('Reducer "'+t+"\" returned undefined during initialization. If the state passed to the reducer is undefined, you must explicitly return the initial state. The initial state may not be undefined. If you don't want to set a value for this reducer, you can use null instead of undefined.");if(void 0===n(void 0,{type:"@@redux/PROBE_UNKNOWN_ACTION_"+Math.random().toString(36).substring(7).split("").join(".")}))throw new Error('Reducer "'+t+"\" returned undefined when probed with a random type. Don't try to handle "+o.INIT+' or other actions in "redux/*" namespace. They are considered private. Instead, you must return the current state for any unknown actions, unless it is undefined, in which case you must return the initial state, regardless of the action type. The initial state may not be undefined, but can be null.')})}(n)}catch(e){s=e}return function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=arguments[1];if(s)throw s;for(var r=!1,o={},a=0;a<i.length;a++){var u=i[a],c=n[u],f=e[u],d=c(f,t);if(void 0===d){var p=l(u,t);throw new Error(p)}o[u]=d,r=r||d!==f}return r?o:e}}function f(e,t){return function(){return t(e.apply(this,arguments))}}function d(e,t){if("function"==typeof e)return f(e,t);if("object"!==(void 0===e?"undefined":a(e))||null===e)throw new Error("bindActionCreators expected an object or a function, instead received "+(null===e?"null":void 0===e?"undefined":a(e))+'. Did you write "import ActionCreators from" instead of "import * as ActionCreators from"?');for(var n=Object.keys(e),r={},o=0;o<n.length;o++){var i=n[o],s=e[i];"function"==typeof s&&(r[i]=f(s,t))}return r}function p(){for(var e=arguments.length,t=Array(e),n=0;n<e;n++)t[n]=arguments[n];return 0===t.length?function(e){return e}:1===t.length?t[0]:t.reduce(function(e,t){return function(){return e(t.apply(void 0,arguments))}})}function h(){for(var e=arguments.length,t=Array(e),n=0;n<e;n++)t[n]=arguments[n];return function(e){return function(){for(var n=arguments.length,r=Array(n),o=0;o<n;o++)r[o]=arguments[o];var a=e.apply(void 0,r),s=function(){throw new Error("Dispatching while constructing your middleware is not allowed. Other middleware would not be applied to this dispatch.")},u={getState:a.getState,dispatch:function(){return s.apply(void 0,arguments)}},l=t.map(function(e){return e(u)});return s=p.apply(void 0,l)(a.dispatch),i({},a,{dispatch:s})}}}},function(e,t){e.exports=function(e){var t=typeof e;return!!e&&("object"==t||"function"==t)}},function(e,t,n){"use strict";(function(e){for(
/**!
 * @fileOverview Kickass library to create and place poppers near their reference elements.
 * @version 1.14.4
 * @license
 * Copyright (c) 2016 Federico Zivolo and contributors
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
var n="undefined"!=typeof window&&"undefined"!=typeof document,r=["Edge","Trident","Firefox"],o=0,a=0;a<r.length;a+=1)if(n&&navigator.userAgent.indexOf(r[a])>=0){o=1;break}var i=n&&window.Promise?function(e){var t=!1;return function(){t||(t=!0,window.Promise.resolve().then(function(){t=!1,e()}))}}:function(e){var t=!1;return function(){t||(t=!0,setTimeout(function(){t=!1,e()},o))}};function s(e){return e&&"[object Function]"==={}.toString.call(e)}function u(e,t){if(1!==e.nodeType)return[];var n=getComputedStyle(e,null);return t?n[t]:n}function l(e){return"HTML"===e.nodeName?e:e.parentNode||e.host}function c(e){if(!e)return document.body;switch(e.nodeName){case"HTML":case"BODY":return e.ownerDocument.body;case"#document":return e.body}var t=u(e),n=t.overflow,r=t.overflowX,o=t.overflowY;return/(auto|scroll|overlay)/.test(n+o+r)?e:c(l(e))}var f=n&&!(!window.MSInputMethodContext||!document.documentMode),d=n&&/MSIE 10/.test(navigator.userAgent);function p(e){return 11===e?f:10===e?d:f||d}function h(e){if(!e)return document.documentElement;for(var t=p(10)?document.body:null,n=e.offsetParent;n===t&&e.nextElementSibling;)n=(e=e.nextElementSibling).offsetParent;var r=n&&n.nodeName;return r&&"BODY"!==r&&"HTML"!==r?-1!==["TD","TABLE"].indexOf(n.nodeName)&&"static"===u(n,"position")?h(n):n:e?e.ownerDocument.documentElement:document.documentElement}function g(e){return null!==e.parentNode?g(e.parentNode):e}function v(e,t){if(!(e&&e.nodeType&&t&&t.nodeType))return document.documentElement;var n=e.compareDocumentPosition(t)&Node.DOCUMENT_POSITION_FOLLOWING,r=n?e:t,o=n?t:e,a=document.createRange();a.setStart(r,0),a.setEnd(o,0);var i=a.commonAncestorContainer;if(e!==i&&t!==i||r.contains(o))return function(e){var t=e.nodeName;return"BODY"!==t&&("HTML"===t||h(e.firstElementChild)===e)}(i)?i:h(i);var s=g(e);return s.host?v(s.host,t):v(e,g(t).host)}function m(e){var t="top"===(arguments.length>1&&void 0!==arguments[1]?arguments[1]:"top")?"scrollTop":"scrollLeft",n=e.nodeName;if("BODY"===n||"HTML"===n){var r=e.ownerDocument.documentElement;return(e.ownerDocument.scrollingElement||r)[t]}return e[t]}function y(e,t){var n="x"===t?"Left":"Top",r="Left"===n?"Right":"Bottom";return parseFloat(e["border"+n+"Width"],10)+parseFloat(e["border"+r+"Width"],10)}function w(e,t,n,r){return Math.max(t["offset"+e],t["scroll"+e],n["client"+e],n["offset"+e],n["scroll"+e],p(10)?parseInt(n["offset"+e])+parseInt(r["margin"+("Height"===e?"Top":"Left")])+parseInt(r["margin"+("Height"===e?"Bottom":"Right")]):0)}function b(e){var t=e.body,n=e.documentElement,r=p(10)&&getComputedStyle(n);return{height:w("Height",t,n,r),width:w("Width",t,n,r)}}var E=function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")},_=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),C=function(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e},T=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e};function O(e){return T({},e,{right:e.left+e.width,bottom:e.top+e.height})}function S(e){var t={};try{if(p(10)){t=e.getBoundingClientRect();var n=m(e,"top"),r=m(e,"left");t.top+=n,t.left+=r,t.bottom+=n,t.right+=r}else t=e.getBoundingClientRect()}catch(e){}var o={left:t.left,top:t.top,width:t.right-t.left,height:t.bottom-t.top},a="HTML"===e.nodeName?b(e.ownerDocument):{},i=a.width||e.clientWidth||o.right-o.left,s=a.height||e.clientHeight||o.bottom-o.top,l=e.offsetWidth-i,c=e.offsetHeight-s;if(l||c){var f=u(e);l-=y(f,"x"),c-=y(f,"y"),o.width-=l,o.height-=c}return O(o)}function N(e,t){var n=arguments.length>2&&void 0!==arguments[2]&&arguments[2],r=p(10),o="HTML"===t.nodeName,a=S(e),i=S(t),s=c(e),l=u(t),f=parseFloat(l.borderTopWidth,10),d=parseFloat(l.borderLeftWidth,10);n&&o&&(i.top=Math.max(i.top,0),i.left=Math.max(i.left,0));var h=O({top:a.top-i.top-f,left:a.left-i.left-d,width:a.width,height:a.height});if(h.marginTop=0,h.marginLeft=0,!r&&o){var g=parseFloat(l.marginTop,10),v=parseFloat(l.marginLeft,10);h.top-=f-g,h.bottom-=f-g,h.left-=d-v,h.right-=d-v,h.marginTop=g,h.marginLeft=v}return(r&&!n?t.contains(s):t===s&&"BODY"!==s.nodeName)&&(h=function(e,t){var n=arguments.length>2&&void 0!==arguments[2]&&arguments[2],r=m(t,"top"),o=m(t,"left"),a=n?-1:1;return e.top+=r*a,e.bottom+=r*a,e.left+=o*a,e.right+=o*a,e}(h,t)),h}function A(e){if(!e||!e.parentElement||p())return document.documentElement;for(var t=e.parentElement;t&&"none"===u(t,"transform");)t=t.parentElement;return t||document.documentElement}function P(e,t,n,r){var o=arguments.length>4&&void 0!==arguments[4]&&arguments[4],a={top:0,left:0},i=o?A(e):v(e,t);if("viewport"===r)a=function(e){var t=arguments.length>1&&void 0!==arguments[1]&&arguments[1],n=e.ownerDocument.documentElement,r=N(e,n),o=Math.max(n.clientWidth,window.innerWidth||0),a=Math.max(n.clientHeight,window.innerHeight||0),i=t?0:m(n),s=t?0:m(n,"left");return O({top:i-r.top+r.marginTop,left:s-r.left+r.marginLeft,width:o,height:a})}(i,o);else{var s=void 0;"scrollParent"===r?"BODY"===(s=c(l(t))).nodeName&&(s=e.ownerDocument.documentElement):s="window"===r?e.ownerDocument.documentElement:r;var f=N(s,i,o);if("HTML"!==s.nodeName||function e(t){var n=t.nodeName;return"BODY"!==n&&"HTML"!==n&&("fixed"===u(t,"position")||e(l(t)))}(i))a=f;else{var d=b(e.ownerDocument),p=d.height,h=d.width;a.top+=f.top-f.marginTop,a.bottom=p+f.top,a.left+=f.left-f.marginLeft,a.right=h+f.left}}var g="number"==typeof(n=n||0);return a.left+=g?n:n.left||0,a.top+=g?n:n.top||0,a.right-=g?n:n.right||0,a.bottom-=g?n:n.bottom||0,a}function I(e,t,n,r,o){var a=arguments.length>5&&void 0!==arguments[5]?arguments[5]:0;if(-1===e.indexOf("auto"))return e;var i=P(n,r,a,o),s={top:{width:i.width,height:t.top-i.top},right:{width:i.right-t.right,height:i.height},bottom:{width:i.width,height:i.bottom-t.bottom},left:{width:t.left-i.left,height:i.height}},u=Object.keys(s).map(function(e){return T({key:e},s[e],{area:function(e){return e.width*e.height}(s[e])})}).sort(function(e,t){return t.area-e.area}),l=u.filter(function(e){var t=e.width,r=e.height;return t>=n.clientWidth&&r>=n.clientHeight}),c=l.length>0?l[0].key:u[0].key,f=e.split("-")[1];return c+(f?"-"+f:"")}function M(e,t,n){var r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:null;return N(n,r?A(t):v(t,n),r)}function k(e){var t=getComputedStyle(e),n=parseFloat(t.marginTop)+parseFloat(t.marginBottom),r=parseFloat(t.marginLeft)+parseFloat(t.marginRight);return{width:e.offsetWidth+r,height:e.offsetHeight+n}}function x(e){var t={left:"right",right:"left",bottom:"top",top:"bottom"};return e.replace(/left|right|bottom|top/g,function(e){return t[e]})}function R(e,t,n){n=n.split("-")[0];var r=k(e),o={width:r.width,height:r.height},a=-1!==["right","left"].indexOf(n),i=a?"top":"left",s=a?"left":"top",u=a?"height":"width",l=a?"width":"height";return o[i]=t[i]+t[u]/2-r[u]/2,o[s]=n===s?t[s]-r[l]:t[x(s)],o}function D(e,t){return Array.prototype.find?e.find(t):e.filter(t)[0]}function B(e,t,n){return(void 0===n?e:e.slice(0,function(e,t,n){if(Array.prototype.findIndex)return e.findIndex(function(e){return e[t]===n});var r=D(e,function(e){return e[t]===n});return e.indexOf(r)}(e,"name",n))).forEach(function(e){e.function&&console.warn("`modifier.function` is deprecated, use `modifier.fn`!");var n=e.function||e.fn;e.enabled&&s(n)&&(t.offsets.popper=O(t.offsets.popper),t.offsets.reference=O(t.offsets.reference),t=n(t,e))}),t}function j(e,t){return e.some(function(e){var n=e.name;return e.enabled&&n===t})}function L(e){for(var t=[!1,"ms","Webkit","Moz","O"],n=e.charAt(0).toUpperCase()+e.slice(1),r=0;r<t.length;r++){var o=t[r],a=o?""+o+n:e;if(void 0!==document.body.style[a])return a}return null}function U(e){var t=e.ownerDocument;return t?t.defaultView:window}function F(e,t,n,r){n.updateBound=r,U(e).addEventListener("resize",n.updateBound,{passive:!0});var o=c(e);return function e(t,n,r,o){var a="BODY"===t.nodeName,i=a?t.ownerDocument.defaultView:t;i.addEventListener(n,r,{passive:!0}),a||e(c(i.parentNode),n,r,o),o.push(i)}(o,"scroll",n.updateBound,n.scrollParents),n.scrollElement=o,n.eventsEnabled=!0,n}function z(){this.state.eventsEnabled&&(cancelAnimationFrame(this.scheduleUpdate),this.state=function(e,t){return U(e).removeEventListener("resize",t.updateBound),t.scrollParents.forEach(function(e){e.removeEventListener("scroll",t.updateBound)}),t.updateBound=null,t.scrollParents=[],t.scrollElement=null,t.eventsEnabled=!1,t}(this.reference,this.state))}function H(e){return""!==e&&!isNaN(parseFloat(e))&&isFinite(e)}function W(e,t){Object.keys(t).forEach(function(n){var r="";-1!==["width","height","top","right","bottom","left"].indexOf(n)&&H(t[n])&&(r="px"),e.style[n]=t[n]+r})}function V(e,t,n){var r=D(e,function(e){return e.name===t}),o=!!r&&e.some(function(e){return e.name===n&&e.enabled&&e.order<r.order});if(!o){var a="`"+t+"`",i="`"+n+"`";console.warn(i+" modifier is required by "+a+" modifier in order to work, be sure to include it before "+a+"!")}return o}var G=["auto-start","auto","auto-end","top-start","top","top-end","right-start","right","right-end","bottom-end","bottom","bottom-start","left-end","left","left-start"],q=G.slice(3);function X(e){var t=arguments.length>1&&void 0!==arguments[1]&&arguments[1],n=q.indexOf(e),r=q.slice(n+1).concat(q.slice(0,n));return t?r.reverse():r}var K={FLIP:"flip",CLOCKWISE:"clockwise",COUNTERCLOCKWISE:"counterclockwise"};function Y(e,t,n,r){var o=[0,0],a=-1!==["right","left"].indexOf(r),i=e.split(/(\+|\-)/).map(function(e){return e.trim()}),s=i.indexOf(D(i,function(e){return-1!==e.search(/,|\s/)}));i[s]&&-1===i[s].indexOf(",")&&console.warn("Offsets separated by white space(s) are deprecated, use a comma (,) instead.");var u=/\s*,\s*|\s+/,l=-1!==s?[i.slice(0,s).concat([i[s].split(u)[0]]),[i[s].split(u)[1]].concat(i.slice(s+1))]:[i];return(l=l.map(function(e,r){var o=(1===r?!a:a)?"height":"width",i=!1;return e.reduce(function(e,t){return""===e[e.length-1]&&-1!==["+","-"].indexOf(t)?(e[e.length-1]=t,i=!0,e):i?(e[e.length-1]+=t,i=!1,e):e.concat(t)},[]).map(function(e){return function(e,t,n,r){var o=e.match(/((?:\-|\+)?\d*\.?\d*)(.*)/),a=+o[1],i=o[2];if(!a)return e;if(0===i.indexOf("%")){var s=void 0;switch(i){case"%p":s=n;break;case"%":case"%r":default:s=r}return O(s)[t]/100*a}if("vh"===i||"vw"===i)return("vh"===i?Math.max(document.documentElement.clientHeight,window.innerHeight||0):Math.max(document.documentElement.clientWidth,window.innerWidth||0))/100*a;return a}(e,o,t,n)})})).forEach(function(e,t){e.forEach(function(n,r){H(n)&&(o[t]+=n*("-"===e[r-1]?-1:1))})}),o}var Z={placement:"bottom",positionFixed:!1,eventsEnabled:!0,removeOnDestroy:!1,onCreate:function(){},onUpdate:function(){},modifiers:{shift:{order:100,enabled:!0,fn:function(e){var t=e.placement,n=t.split("-")[0],r=t.split("-")[1];if(r){var o=e.offsets,a=o.reference,i=o.popper,s=-1!==["bottom","top"].indexOf(n),u=s?"left":"top",l=s?"width":"height",c={start:C({},u,a[u]),end:C({},u,a[u]+a[l]-i[l])};e.offsets.popper=T({},i,c[r])}return e}},offset:{order:200,enabled:!0,fn:function(e,t){var n=t.offset,r=e.placement,o=e.offsets,a=o.popper,i=o.reference,s=r.split("-")[0],u=void 0;return u=H(+n)?[+n,0]:Y(n,a,i,s),"left"===s?(a.top+=u[0],a.left-=u[1]):"right"===s?(a.top+=u[0],a.left+=u[1]):"top"===s?(a.left+=u[0],a.top-=u[1]):"bottom"===s&&(a.left+=u[0],a.top+=u[1]),e.popper=a,e},offset:0},preventOverflow:{order:300,enabled:!0,fn:function(e,t){var n=t.boundariesElement||h(e.instance.popper);e.instance.reference===n&&(n=h(n));var r=L("transform"),o=e.instance.popper.style,a=o.top,i=o.left,s=o[r];o.top="",o.left="",o[r]="";var u=P(e.instance.popper,e.instance.reference,t.padding,n,e.positionFixed);o.top=a,o.left=i,o[r]=s,t.boundaries=u;var l=t.priority,c=e.offsets.popper,f={primary:function(e){var n=c[e];return c[e]<u[e]&&!t.escapeWithReference&&(n=Math.max(c[e],u[e])),C({},e,n)},secondary:function(e){var n="right"===e?"left":"top",r=c[n];return c[e]>u[e]&&!t.escapeWithReference&&(r=Math.min(c[n],u[e]-("right"===e?c.width:c.height))),C({},n,r)}};return l.forEach(function(e){var t=-1!==["left","top"].indexOf(e)?"primary":"secondary";c=T({},c,f[t](e))}),e.offsets.popper=c,e},priority:["left","right","top","bottom"],padding:5,boundariesElement:"scrollParent"},keepTogether:{order:400,enabled:!0,fn:function(e){var t=e.offsets,n=t.popper,r=t.reference,o=e.placement.split("-")[0],a=Math.floor,i=-1!==["top","bottom"].indexOf(o),s=i?"right":"bottom",u=i?"left":"top",l=i?"width":"height";return n[s]<a(r[u])&&(e.offsets.popper[u]=a(r[u])-n[l]),n[u]>a(r[s])&&(e.offsets.popper[u]=a(r[s])),e}},arrow:{order:500,enabled:!0,fn:function(e,t){var n;if(!V(e.instance.modifiers,"arrow","keepTogether"))return e;var r=t.element;if("string"==typeof r){if(!(r=e.instance.popper.querySelector(r)))return e}else if(!e.instance.popper.contains(r))return console.warn("WARNING: `arrow.element` must be child of its popper element!"),e;var o=e.placement.split("-")[0],a=e.offsets,i=a.popper,s=a.reference,l=-1!==["left","right"].indexOf(o),c=l?"height":"width",f=l?"Top":"Left",d=f.toLowerCase(),p=l?"left":"top",h=l?"bottom":"right",g=k(r)[c];s[h]-g<i[d]&&(e.offsets.popper[d]-=i[d]-(s[h]-g)),s[d]+g>i[h]&&(e.offsets.popper[d]+=s[d]+g-i[h]),e.offsets.popper=O(e.offsets.popper);var v=s[d]+s[c]/2-g/2,m=u(e.instance.popper),y=parseFloat(m["margin"+f],10),w=parseFloat(m["border"+f+"Width"],10),b=v-e.offsets.popper[d]-y-w;return b=Math.max(Math.min(i[c]-g,b),0),e.arrowElement=r,e.offsets.arrow=(C(n={},d,Math.round(b)),C(n,p,""),n),e},element:"[x-arrow]"},flip:{order:600,enabled:!0,fn:function(e,t){if(j(e.instance.modifiers,"inner"))return e;if(e.flipped&&e.placement===e.originalPlacement)return e;var n=P(e.instance.popper,e.instance.reference,t.padding,t.boundariesElement,e.positionFixed),r=e.placement.split("-")[0],o=x(r),a=e.placement.split("-")[1]||"",i=[];switch(t.behavior){case K.FLIP:i=[r,o];break;case K.CLOCKWISE:i=X(r);break;case K.COUNTERCLOCKWISE:i=X(r,!0);break;default:i=t.behavior}return i.forEach(function(s,u){if(r!==s||i.length===u+1)return e;r=e.placement.split("-")[0],o=x(r);var l=e.offsets.popper,c=e.offsets.reference,f=Math.floor,d="left"===r&&f(l.right)>f(c.left)||"right"===r&&f(l.left)<f(c.right)||"top"===r&&f(l.bottom)>f(c.top)||"bottom"===r&&f(l.top)<f(c.bottom),p=f(l.left)<f(n.left),h=f(l.right)>f(n.right),g=f(l.top)<f(n.top),v=f(l.bottom)>f(n.bottom),m="left"===r&&p||"right"===r&&h||"top"===r&&g||"bottom"===r&&v,y=-1!==["top","bottom"].indexOf(r),w=!!t.flipVariations&&(y&&"start"===a&&p||y&&"end"===a&&h||!y&&"start"===a&&g||!y&&"end"===a&&v);(d||m||w)&&(e.flipped=!0,(d||m)&&(r=i[u+1]),w&&(a=function(e){return"end"===e?"start":"start"===e?"end":e}(a)),e.placement=r+(a?"-"+a:""),e.offsets.popper=T({},e.offsets.popper,R(e.instance.popper,e.offsets.reference,e.placement)),e=B(e.instance.modifiers,e,"flip"))}),e},behavior:"flip",padding:5,boundariesElement:"viewport"},inner:{order:700,enabled:!1,fn:function(e){var t=e.placement,n=t.split("-")[0],r=e.offsets,o=r.popper,a=r.reference,i=-1!==["left","right"].indexOf(n),s=-1===["top","left"].indexOf(n);return o[i?"left":"top"]=a[n]-(s?o[i?"width":"height"]:0),e.placement=x(t),e.offsets.popper=O(o),e}},hide:{order:800,enabled:!0,fn:function(e){if(!V(e.instance.modifiers,"hide","preventOverflow"))return e;var t=e.offsets.reference,n=D(e.instance.modifiers,function(e){return"preventOverflow"===e.name}).boundaries;if(t.bottom<n.top||t.left>n.right||t.top>n.bottom||t.right<n.left){if(!0===e.hide)return e;e.hide=!0,e.attributes["x-out-of-boundaries"]=""}else{if(!1===e.hide)return e;e.hide=!1,e.attributes["x-out-of-boundaries"]=!1}return e}},computeStyle:{order:850,enabled:!0,fn:function(e,t){var n=t.x,r=t.y,o=e.offsets.popper,a=D(e.instance.modifiers,function(e){return"applyStyle"===e.name}).gpuAcceleration;void 0!==a&&console.warn("WARNING: `gpuAcceleration` option moved to `computeStyle` modifier and will not be supported in future versions of Popper.js!");var i=void 0!==a?a:t.gpuAcceleration,s=h(e.instance.popper),u=S(s),l={position:o.position},c={left:Math.floor(o.left),top:Math.round(o.top),bottom:Math.round(o.bottom),right:Math.floor(o.right)},f="bottom"===n?"top":"bottom",d="right"===r?"left":"right",p=L("transform"),g=void 0,v=void 0;if(v="bottom"===f?"HTML"===s.nodeName?-s.clientHeight+c.bottom:-u.height+c.bottom:c.top,g="right"===d?"HTML"===s.nodeName?-s.clientWidth+c.right:-u.width+c.right:c.left,i&&p)l[p]="translate3d("+g+"px, "+v+"px, 0)",l[f]=0,l[d]=0,l.willChange="transform";else{var m="bottom"===f?-1:1,y="right"===d?-1:1;l[f]=v*m,l[d]=g*y,l.willChange=f+", "+d}var w={"x-placement":e.placement};return e.attributes=T({},w,e.attributes),e.styles=T({},l,e.styles),e.arrowStyles=T({},e.offsets.arrow,e.arrowStyles),e},gpuAcceleration:!0,x:"bottom",y:"right"},applyStyle:{order:900,enabled:!0,fn:function(e){return W(e.instance.popper,e.styles),function(e,t){Object.keys(t).forEach(function(n){!1!==t[n]?e.setAttribute(n,t[n]):e.removeAttribute(n)})}(e.instance.popper,e.attributes),e.arrowElement&&Object.keys(e.arrowStyles).length&&W(e.arrowElement,e.arrowStyles),e},onLoad:function(e,t,n,r,o){var a=M(o,t,e,n.positionFixed),i=I(n.placement,a,t,e,n.modifiers.flip.boundariesElement,n.modifiers.flip.padding);return t.setAttribute("x-placement",i),W(t,{position:n.positionFixed?"fixed":"absolute"}),n},gpuAcceleration:void 0}}},Q=function(){function e(t,n){var r=this,o=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};E(this,e),this.scheduleUpdate=function(){return requestAnimationFrame(r.update)},this.update=i(this.update.bind(this)),this.options=T({},e.Defaults,o),this.state={isDestroyed:!1,isCreated:!1,scrollParents:[]},this.reference=t&&t.jquery?t[0]:t,this.popper=n&&n.jquery?n[0]:n,this.options.modifiers={},Object.keys(T({},e.Defaults.modifiers,o.modifiers)).forEach(function(t){r.options.modifiers[t]=T({},e.Defaults.modifiers[t]||{},o.modifiers?o.modifiers[t]:{})}),this.modifiers=Object.keys(this.options.modifiers).map(function(e){return T({name:e},r.options.modifiers[e])}).sort(function(e,t){return e.order-t.order}),this.modifiers.forEach(function(e){e.enabled&&s(e.onLoad)&&e.onLoad(r.reference,r.popper,r.options,e,r.state)}),this.update();var a=this.options.eventsEnabled;a&&this.enableEventListeners(),this.state.eventsEnabled=a}return _(e,[{key:"update",value:function(){return function(){if(!this.state.isDestroyed){var e={instance:this,styles:{},arrowStyles:{},attributes:{},flipped:!1,offsets:{}};e.offsets.reference=M(this.state,this.popper,this.reference,this.options.positionFixed),e.placement=I(this.options.placement,e.offsets.reference,this.popper,this.reference,this.options.modifiers.flip.boundariesElement,this.options.modifiers.flip.padding),e.originalPlacement=e.placement,e.positionFixed=this.options.positionFixed,e.offsets.popper=R(this.popper,e.offsets.reference,e.placement),e.offsets.popper.position=this.options.positionFixed?"fixed":"absolute",e=B(this.modifiers,e),this.state.isCreated?this.options.onUpdate(e):(this.state.isCreated=!0,this.options.onCreate(e))}}.call(this)}},{key:"destroy",value:function(){return function(){return this.state.isDestroyed=!0,j(this.modifiers,"applyStyle")&&(this.popper.removeAttribute("x-placement"),this.popper.style.position="",this.popper.style.top="",this.popper.style.left="",this.popper.style.right="",this.popper.style.bottom="",this.popper.style.willChange="",this.popper.style[L("transform")]=""),this.disableEventListeners(),this.options.removeOnDestroy&&this.popper.parentNode.removeChild(this.popper),this}.call(this)}},{key:"enableEventListeners",value:function(){return function(){this.state.eventsEnabled||(this.state=F(this.reference,this.options,this.state,this.scheduleUpdate))}.call(this)}},{key:"disableEventListeners",value:function(){return z.call(this)}}]),e}();Q.Utils=("undefined"!=typeof window?window:e).PopperUtils,Q.placements=G,Q.Defaults=Z,t.a=Q}).call(this,n(26))},function(e,t){var n=NaN,r="[object Symbol]",o=/^\s+|\s+$/g,a=/^[-+]0x[0-9a-f]+$/i,i=/^0b[01]+$/i,s=/^0o[0-7]+$/i,u=parseInt,l=Object.prototype.toString;function c(e){var t=typeof e;return!!e&&("object"==t||"function"==t)}e.exports=function(e){if("number"==typeof e)return e;if(function(e){return"symbol"==typeof e||function(e){return!!e&&"object"==typeof e}(e)&&l.call(e)==r}(e))return n;if(c(e)){var t="function"==typeof e.valueOf?e.valueOf():e;e=c(t)?t+"":t}if("string"!=typeof e)return 0===e?e:+e;e=e.replace(o,"");var f=i.test(e);return f||s.test(e)?u(e.slice(2),f?2:8):a.test(e)?n:+e}},function(e,t,n){"use strict";(function(e,r){var o,a=n(92);o="undefined"!=typeof self?self:"undefined"!=typeof window?window:void 0!==e?e:r;var i=Object(a.a)(o);t.a=i}).call(this,n(26),n(106)(e))},function(e,t,n){"use strict";
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/var r=Object.getOwnPropertySymbols,o=Object.prototype.hasOwnProperty,a=Object.prototype.propertyIsEnumerable;e.exports=function(){try{if(!Object.assign)return!1;var e=new String("abc");if(e[5]="de","5"===Object.getOwnPropertyNames(e)[0])return!1;for(var t={},n=0;n<10;n++)t["_"+String.fromCharCode(n)]=n;if("0123456789"!==Object.getOwnPropertyNames(t).map(function(e){return t[e]}).join(""))return!1;var r={};return"abcdefghijklmnopqrst".split("").forEach(function(e){r[e]=e}),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},r)).join("")}catch(e){return!1}}()?Object.assign:function(e,t){for(var n,i,s=function(e){if(null===e||void 0===e)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(e)}(e),u=1;u<arguments.length;u++){for(var l in n=Object(arguments[u]))o.call(n,l)&&(s[l]=n[l]);if(r){i=r(n);for(var c=0;c<i.length;c++)a.call(n,i[c])&&(s[i[c]]=n[i[c]])}}return s}},function(e,t,n){"use strict";var r,o=this&&this.__assign||Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e};Object.defineProperty(t,"__esModule",{value:!0}),function(e){e[e.EXPAND_TOGGLE=0]="EXPAND_TOGGLE",e[e.SELECT_TOGGLE=1]="SELECT_TOGGLE",e[e.EXPAND_NODE=2]="EXPAND_NODE",e[e.COLLAPSE_NODE=3]="COLLAPSE_NODE",e[e.NAVIGATE_UP=4]="NAVIGATE_UP",e[e.NAVIGATE_DOWN=5]="NAVIGATE_DOWN",e[e.NAVIGATE_RIGHT=6]="NAVIGATE_RIGHT",e[e.NAVIGATE_LEFT=7]="NAVIGATE_LEFT",e[e.NAVIGATE_ENTER=8]="NAVIGATE_ENTER",e[e.TYPE_DATA=9]="TYPE_DATA",e[e.ADD_NODE=10]="ADD_NODE",e[e.LOAD_FORM=11]="LOAD_FORM",e[e.FETCH_FORM=12]="FETCH_FORM"}(r=t.Type||(t.Type={})),t.isValidContent=function(e,t){switch(e){case"test":return t.length<3?"error":null}};var a={form:{},selectionPath:[0],navigationPath:[0],value:[{name:"Projects",selectable:!0,expanded:!1,children:[],link:"root"}]};function i(e,t){for(var n=e,r=0,o=t.slice(0,t.length-1);r<o.length;r++){n=n[o[r]].children}return n}function s(e,t){return i(e,t)[u(t)]}function u(e){return e[e.length-1]}function l(e){return e.map(function(e){return o({},e,{children:l(e.children)})}).slice(0)}t.fromPath=s,t.default=function(e,t){var n;switch(void 0===e&&(e=a),t.type){case r[r.EXPAND_TOGGLE]:var c=s((g=o({},e,{value:l(e.value)})).value,t.path);return c.expanded=!c.expanded,g;case r[r.SELECT_TOGGLE]:return(g=o({},e,{value:l(e.value)})).selectionPath=t.path,g;case r[r.NAVIGATE_DOWN]:var f=i((g=o({},e,{value:l(e.value)})).value,g.navigationPath),d=u(g.navigationPath);if((h=s(g.value,g.navigationPath)).children.length>0&&h.expanded)return g.navigationPath=g.navigationPath.concat([0]),g;for(var p=g.navigationPath;p.length>0;){if(h=s(g.value,p),f=i(g.value,p),(d=u(p))<f.length-1)return p[p.length-1]=++d,g.navigationPath=p,g;p=p.slice(0,p.length-1)}return g;case r[r.NAVIGATE_UP]:return f=i((g=o({},e,{value:l(e.value)})).value,g.navigationPath),(d=u(g.navigationPath))>0?(g.navigationPath[g.navigationPath.length-1]=--d,g):(g.navigationPath.length>1&&(g.navigationPath=g.navigationPath.slice(0,g.navigationPath.length-1)),g);case r[r.NAVIGATE_RIGHT]:return(h=s((g=o({},e,{value:l(e.value)})).value,g.navigationPath)).children.length>0&&(h.expanded=!0),g;case r[r.NAVIGATE_LEFT]:var h;return(h=s((g=o({},e,{value:l(e.value)})).value,g.navigationPath)).children.length>0&&(h.expanded=!1),g;case r[r.NAVIGATE_ENTER]:return(g=o({},e,{value:l(e.value)})).selectionPath=g.navigationPath.slice(),g;case r[r.TYPE_DATA]:return(g=o({},e,{form:o({},e.form,(n={},n[t.component]={value:t.content},n))})).selectionPath=g.navigationPath.slice(),g;case r[r.LOAD_FORM]:console.log("this is the action",t);var g=o({},e,{form:t.form.forms});return console.log("there"),g;default:return e}}},function(e,t,n){"use strict";e.exports=function(){}},function(e,t,n){"use strict";t.__esModule=!0;t.addLeadingSlash=function(e){return"/"===e.charAt(0)?e:"/"+e},t.stripLeadingSlash=function(e){return"/"===e.charAt(0)?e.substr(1):e};var r=t.hasBasename=function(e,t){return new RegExp("^"+t+"(\\/|\\?|#|$)","i").test(e)};t.stripBasename=function(e,t){return r(e,t)?e.substr(t.length):e},t.stripTrailingSlash=function(e){return"/"===e.charAt(e.length-1)?e.slice(0,-1):e},t.parsePath=function(e){var t=e||"/",n="",r="",o=t.indexOf("#");-1!==o&&(r=t.substr(o),t=t.substr(0,o));var a=t.indexOf("?");return-1!==a&&(n=t.substr(a),t=t.substr(0,a)),{pathname:t,search:"?"===n?"":n,hash:"#"===r?"":r}},t.createPath=function(e){var t=e.pathname,n=e.search,r=e.hash,o=t||"/";return n&&"?"!==n&&(o+="?"===n.charAt(0)?n:"?"+n),r&&"#"!==r&&(o+="#"===r.charAt(0)?r:"#"+r),o}},function(e,t,n){"use strict";e.exports=function(e,t){return function(){for(var n=new Array(arguments.length),r=0;r<n.length;r++)n[r]=arguments[r];return e.apply(t,n)}}},function(e,t,n){"use strict";var r=n(8),o=n(123),a=n(125),i=n(126),s=n(127),u=n(63),l="undefined"!=typeof window&&window.btoa&&window.btoa.bind(window)||n(128);e.exports=function(e){return new Promise(function(t,c){var f=e.data,d=e.headers;r.isFormData(f)&&delete d["Content-Type"];var p=new XMLHttpRequest,h="onreadystatechange",g=!1;if("undefined"==typeof window||!window.XDomainRequest||"withCredentials"in p||s(e.url)||(p=new window.XDomainRequest,h="onload",g=!0,p.onprogress=function(){},p.ontimeout=function(){}),e.auth){var v=e.auth.username||"",m=e.auth.password||"";d.Authorization="Basic "+l(v+":"+m)}if(p.open(e.method.toUpperCase(),a(e.url,e.params,e.paramsSerializer),!0),p.timeout=e.timeout,p[h]=function(){if(p&&(4===p.readyState||g)&&(0!==p.status||p.responseURL&&0===p.responseURL.indexOf("file:"))){var n="getAllResponseHeaders"in p?i(p.getAllResponseHeaders()):null,r={data:e.responseType&&"text"!==e.responseType?p.response:p.responseText,status:1223===p.status?204:p.status,statusText:1223===p.status?"No Content":p.statusText,headers:n,config:e,request:p};o(t,c,r),p=null}},p.onerror=function(){c(u("Network Error",e,null,p)),p=null},p.ontimeout=function(){c(u("timeout of "+e.timeout+"ms exceeded",e,"ECONNABORTED",p)),p=null},r.isStandardBrowserEnv()){var y=n(129),w=(e.withCredentials||s(e.url))&&e.xsrfCookieName?y.read(e.xsrfCookieName):void 0;w&&(d[e.xsrfHeaderName]=w)}if("setRequestHeader"in p&&r.forEach(d,function(e,t){void 0===f&&"content-type"===t.toLowerCase()?delete d[t]:p.setRequestHeader(t,e)}),e.withCredentials&&(p.withCredentials=!0),e.responseType)try{p.responseType=e.responseType}catch(t){if("json"!==e.responseType)throw t}"function"==typeof e.onDownloadProgress&&p.addEventListener("progress",e.onDownloadProgress),"function"==typeof e.onUploadProgress&&p.upload&&p.upload.addEventListener("progress",e.onUploadProgress),e.cancelToken&&e.cancelToken.promise.then(function(e){p&&(p.abort(),c(e),p=null)}),void 0===f&&(f=null),p.send(f)})}},function(e,t,n){"use strict";var r=n(124);e.exports=function(e,t,n,o,a){var i=new Error(e);return r(i,t,n,o,a)}},function(e,t,n){"use strict";e.exports=function(e){return!(!e||!e.__CANCEL__)}},function(e,t,n){"use strict";function r(e){this.message=e}r.prototype.toString=function(){return"Cancel"+(this.message?": "+this.message:"")},r.prototype.__CANCEL__=!0,e.exports=r},function(e,t,n){"use strict";function r(e){for(var n in e)t.hasOwnProperty(n)||(t[n]=e[n])}Object.defineProperty(t,"__esModule",{value:!0}),r(n(137)),r(n(153)),r(n(160)),r(n(164)),r(n(27)),r(n(67)),r(n(68));var o=n(9);t.Exception=o.default;var a=n(36);t.ArgumentException=a.default;var i=n(73);t.ArithmeticException=i.default;var s=n(14);t.ChecksumException=s.default;var u=n(7);t.FormatException=u.default;var l=n(4);t.IllegalArgumentException=l.default;var c=n(23);t.IllegalStateException=c.default;var f=n(3);t.NotFoundException=f.default;var d=n(88);t.ReaderException=d.default;var p=n(74);t.ReedSolomonException=p.default;var h=n(34);t.UnsupportedOperationException=h.default;var g=n(49);t.WriterException=g.default;var v=n(5);t.BarcodeFormat=v.default;var m=n(72);t.Binarizer=m.default;var y=n(69);t.BinaryBitmap=y.default;var w=n(169);t.DecodeHintType=w.default;var b=n(20);t.InvertedLuminanceSource=b.default;var E=n(21);t.LuminanceSource=E.default;var _=n(170);t.MultiFormatReader=_.default;var C=n(171);t.MultiFormatWriter=C.default;var T=n(172);t.PlanarYUVLuminanceSource=T.default;var O=n(12);t.Result=O.default;var S=n(15);t.ResultMetadataType=S.default;var N=n(173);t.RGBLuminanceSource=N.default;var A=n(18);t.BitArray=A.default;var P=n(11);t.BitMatrix=P.default;var I=n(40);t.BitSource=I.default;var M=n(24);t.CharacterSetECI=M.default;var k=n(41);t.DecoderResult=k.default;var x=n(79);t.DefaultGridSampler=x.default;var R=n(43);t.DetectorResult=R.default;var D=n(31);t.EncodeHintType=D.default;var B=n(71);t.GlobalHistogramBinarizer=B.default;var j=n(80);t.GridSampler=j.default;var L=n(44);t.GridSamplerInstance=L.default;var U=n(70);t.HybridBinarizer=U.default;var F=n(45);t.PerspectiveTransform=F.default;var z=n(77);t.StringUtils=z.default;var H=n(22);t.MathUtils=H.default;var W=n(81);t.WhiteRectangleDetector=W.default;var V=n(19);t.GenericGF=V.default;var G=n(29);t.GenericGFPoly=G.default;var q=n(38);t.ReedSolomonDecoder=q.default;var X=n(82);t.ReedSolomonEncoder=X.default;var K=n(46);t.DataMatrixReader=K.default;var Y=n(37);t.QRCodeReader=Y.default;var Z=n(89);t.QRCodeWriter=Z.default;var Q=n(30);t.QRCodeDecoderErrorCorrectionLevel=Q.default;var $=n(47);t.QRCodeEncoder=$.default;var J=n(48);t.QRCodeEncoderQRCode=J.default;var ee=n(16);t.OneDReader=ee.default;var te=n(87);t.EAN13Reader=te.default;var ne=n(85);t.Code128Reader=ne.default;var re=n(86);t.ITFReader=re.default;var oe=n(84);t.Code39Reader=oe.default;var ae=n(50);t.MultiformatReader=ae.default},function(e,t,n){"use strict";var r=this&&this.__extends||function(){var e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])};return function(t,n){function r(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}();Object.defineProperty(t,"__esModule",{value:!0});var o=n(20),a=n(21),i=n(4),s=function(e){function t(n){var r=e.call(this,n.width,n.height)||this;return r.canvas=n,r.tempCanvasElement=null,r.buffer=t.makeBufferFromCanvasImageData(n),r}return r(t,e),t.makeBufferFromCanvasImageData=function(e){var n=e.getContext("2d").getImageData(0,0,e.width,e.height);return t.toGrayscaleBuffer(n.data,e.width,e.height)},t.toGrayscaleBuffer=function(e,t,n){for(var r=new Uint8ClampedArray(t*n),o=0,a=0,i=e.length;o<i;o+=4,a++){var s=void 0;if(0===e[o+3])s=255;else s=306*e[o]+601*e[o+1]+117*e[o+2]+512>>10;r[a]=s}return r},t.prototype.getRow=function(e,t){if(e<0||e>=this.getHeight())throw new i.default("Requested row is outside the image: "+e);var n=this.getWidth(),r=e*n;return null===t?t=this.buffer.slice(r,r+n):(t.length<n&&(t=new Uint8ClampedArray(n)),t.set(this.buffer.slice(r,r+n))),t},t.prototype.getMatrix=function(){return this.buffer},t.prototype.isCropSupported=function(){return!0},t.prototype.crop=function(e,t,n,r){return this.crop(e,t,n,r),this},t.prototype.isRotateSupported=function(){return!0},t.prototype.rotateCounterClockwise=function(){return this.rotate(-90),this},t.prototype.rotateCounterClockwise45=function(){return this.rotate(-45),this},t.prototype.getTempCanvasElement=function(){if(null===this.tempCanvasElement){var e=this.canvas.ownerDocument.createElement("canvas");e.style.width=this.canvas.width+"px",e.style.height=this.canvas.height+"px",this.tempCanvasElement=e}return this.tempCanvasElement},t.prototype.rotate=function(e){var n=this.getTempCanvasElement(),r=n.getContext("2d");return r.rotate(e*t.DEGREE_TO_RADIANS),r.drawImage(this.canvas,0,0),this.buffer=t.makeBufferFromCanvasImageData(n),this},t.prototype.invert=function(){return new o.default(this)},t.DEGREE_TO_RADIANS=Math.PI/180,t}(a.default);t.HTMLCanvasElementLuminanceSource=s},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){return function(e,t){this.deviceId=e,this.label=t}}();t.VideoInputDevice=r},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(4),o=function(){function e(e){if(this.binarizer=e,null===e)throw new r.default("Binarizer must be non-null.")}return e.prototype.getWidth=function(){return this.binarizer.getWidth()},e.prototype.getHeight=function(){return this.binarizer.getHeight()},e.prototype.getBlackRow=function(e,t){return this.binarizer.getBlackRow(e,t)},e.prototype.getBlackMatrix=function(){return null!==this.matrix&&void 0!==this.matrix||(this.matrix=this.binarizer.getBlackMatrix()),this.matrix},e.prototype.isCropSupported=function(){return this.binarizer.getLuminanceSource().isCropSupported()},e.prototype.crop=function(t,n,r,o){var a=this.binarizer.getLuminanceSource().crop(t,n,r,o);return new e(this.binarizer.createBinarizer(a))},e.prototype.isRotateSupported=function(){return this.binarizer.getLuminanceSource().isRotateSupported()},e.prototype.rotateCounterClockwise=function(){var t=this.binarizer.getLuminanceSource().rotateCounterClockwise();return new e(this.binarizer.createBinarizer(t))},e.prototype.rotateCounterClockwise45=function(){var t=this.binarizer.getLuminanceSource().rotateCounterClockwise45();return new e(this.binarizer.createBinarizer(t))},e.prototype.toString=function(){try{return this.getBlackMatrix().toString()}catch(e){return""}},e}();t.default=o},function(e,t,n){"use strict";var r=this&&this.__extends||function(){var e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])};return function(t,n){function r(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}();Object.defineProperty(t,"__esModule",{value:!0});var o=n(71),a=n(11),i=function(e){function t(t){var n=e.call(this,t)||this;return n.matrix=null,n}return r(t,e),t.prototype.getBlackMatrix=function(){if(null!==this.matrix)return this.matrix;var n=this.getLuminanceSource(),r=n.getWidth(),o=n.getHeight();if(r>=t.MINIMUM_DIMENSION&&o>=t.MINIMUM_DIMENSION){var i=n.getMatrix(),s=r>>t.BLOCK_SIZE_POWER;0!=(r&t.BLOCK_SIZE_MASK)&&s++;var u=o>>t.BLOCK_SIZE_POWER;0!=(o&t.BLOCK_SIZE_MASK)&&u++;var l=t.calculateBlackPoints(i,s,u,r,o),c=new a.default(r,o);t.calculateThresholdForBlock(i,s,u,r,o,l,c),this.matrix=c}else this.matrix=e.prototype.getBlackMatrix.call(this);return this.matrix},t.prototype.createBinarizer=function(e){return new t(e)},t.calculateThresholdForBlock=function(e,n,r,o,a,i,s){for(var u=a-t.BLOCK_SIZE,l=o-t.BLOCK_SIZE,c=0;c<r;c++){var f=c<<t.BLOCK_SIZE_POWER;f>u&&(f=u);for(var d=t.cap(c,2,r-3),p=0;p<n;p++){var h=p<<t.BLOCK_SIZE_POWER;h>l&&(h=l);for(var g=t.cap(p,2,n-3),v=0,m=-2;m<=2;m++){var y=i[d+m];v+=y[g-2]+y[g-1]+y[g]+y[g+1]+y[g+2]}var w=v/25;t.thresholdBlock(e,h,f,w,o,s)}}},t.cap=function(e,t,n){return e<t?t:e>n?n:e},t.thresholdBlock=function(e,n,r,o,a,i){for(var s=0,u=r*a+n;s<t.BLOCK_SIZE;s++,u+=a)for(var l=0;l<t.BLOCK_SIZE;l++)(255&e[u+l])<=o&&i.set(n+l,r+s)},t.calculateBlackPoints=function(e,n,r,o,a){for(var i=a-t.BLOCK_SIZE,s=o-t.BLOCK_SIZE,u=new Array(r),l=0;l<r;l++){u[l]=new Int32Array(n);var c=l<<t.BLOCK_SIZE_POWER;c>i&&(c=i);for(var f=0;f<n;f++){var d=f<<t.BLOCK_SIZE_POWER;d>s&&(d=s);for(var p=0,h=255,g=0,v=0,m=c*o+d;v<t.BLOCK_SIZE;v++,m+=o){for(var y=0;y<t.BLOCK_SIZE;y++){var w=255&e[m+y];p+=w,w<h&&(h=w),w>g&&(g=w)}if(g-h>t.MIN_DYNAMIC_RANGE)for(v++,m+=o;v<t.BLOCK_SIZE;v++,m+=o)for(y=0;y<t.BLOCK_SIZE;y++)p+=255&e[m+y]}var b=p>>2*t.BLOCK_SIZE_POWER;if(g-h<=t.MIN_DYNAMIC_RANGE&&(b=h/2,l>0&&f>0)){var E=(u[l-1][f]+2*u[l][f-1]+u[l-1][f-1])/4;h<E&&(b=E)}u[l][f]=b}}return u},t.BLOCK_SIZE_POWER=3,t.BLOCK_SIZE=1<<t.BLOCK_SIZE_POWER,t.BLOCK_SIZE_MASK=t.BLOCK_SIZE-1,t.MINIMUM_DIMENSION=5*t.BLOCK_SIZE,t.MIN_DYNAMIC_RANGE=24,t}(o.default);t.default=i},function(e,t,n){"use strict";var r=this&&this.__extends||function(){var e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])};return function(t,n){function r(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}();Object.defineProperty(t,"__esModule",{value:!0});var o=n(72),a=n(18),i=n(11),s=n(3),u=function(e){function t(n){var r=e.call(this,n)||this;return r.luminances=t.EMPTY,r.buckets=new Int32Array(t.LUMINANCE_BUCKETS),r}return r(t,e),t.prototype.getBlackRow=function(e,n){var r=this.getLuminanceSource(),o=r.getWidth();void 0===n||null===n||n.getSize()<o?n=new a.default(o):n.clear(),this.initArrays(o);for(var i=r.getRow(e,this.luminances),s=this.buckets,u=0;u<o;u++)s[(255&i[u])>>t.LUMINANCE_SHIFT]++;var l=t.estimateBlackPoint(s);if(o<3)for(u=0;u<o;u++)(255&i[u])<l&&n.set(u);else{var c=255&i[0],f=255&i[1];for(u=1;u<o-1;u++){var d=255&i[u+1];(4*f-c-d)/2<l&&n.set(u),c=f,f=d}}return n},t.prototype.getBlackMatrix=function(){var e=this.getLuminanceSource(),n=e.getWidth(),r=e.getHeight(),o=new i.default(n,r);this.initArrays(n);for(var a=this.buckets,s=1;s<5;s++)for(var u=r*s/5,l=e.getRow(u,this.luminances),c=Math.floor(4*n/5),f=Math.floor(n/5);f<c;f++){a[(255&l[f])>>t.LUMINANCE_SHIFT]++}var d=t.estimateBlackPoint(a),p=e.getMatrix();for(s=0;s<r;s++){var h=s*n;for(f=0;f<n;f++){(255&p[h+f])<d&&o.set(f,s)}}return o},t.prototype.createBinarizer=function(e){return new t(e)},t.prototype.initArrays=function(e){this.luminances.length<e&&(this.luminances=new Uint8ClampedArray(e));for(var n=this.buckets,r=0;r<t.LUMINANCE_BUCKETS;r++)n[r]=0},t.estimateBlackPoint=function(e){for(var n=e.length,r=0,o=0,a=0,i=0;i<n;i++)e[i]>a&&(o=i,a=e[i]),e[i]>r&&(r=e[i]);var u=0,l=0;for(i=0;i<n;i++){var c=i-o;(h=e[i]*c*c)>l&&(u=i,l=h)}if(o>u){var f=o;o=u,u=f}if(u-o<=n/16)throw new s.default;var d=u-1,p=-1;for(i=u-1;i>o;i--){var h,g=i-o;(h=g*g*(u-i)*(r-e[i]))>p&&(d=i,p=h)}return d<<t.LUMINANCE_SHIFT},t.LUMINANCE_BITS=5,t.LUMINANCE_SHIFT=8-t.LUMINANCE_BITS,t.LUMINANCE_BUCKETS=1<<t.LUMINANCE_BITS,t.EMPTY=Uint8ClampedArray.from([0]),t}(o.default);t.default=u},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e){this.source=e}return e.prototype.getLuminanceSource=function(){return this.source},e.prototype.getWidth=function(){return this.source.getWidth()},e.prototype.getHeight=function(){return this.source.getHeight()},e}();t.default=r},function(e,t,n){"use strict";var r=this&&this.__extends||function(){var e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])};return function(t,n){function r(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}();Object.defineProperty(t,"__esModule",{value:!0});var o=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return r(t,e),t}(n(9).default);t.default=o},function(e,t,n){"use strict";var r=this&&this.__extends||function(){var e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])};return function(t,n){function r(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}();Object.defineProperty(t,"__esModule",{value:!0});var o=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return r(t,e),t}(n(9).default);t.default=o},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(30),o=n(28),a=function(){function e(e){this.errorCorrectionLevel=r.default.forBits(e>>3&3),this.dataMask=7&e}return e.numBitsDiffering=function(e,t){return o.default.bitCount(e^t)},e.decodeFormatInformation=function(t,n){var r=e.doDecodeFormatInformation(t,n);return null!==r?r:e.doDecodeFormatInformation(t^e.FORMAT_INFO_MASK_QR,n^e.FORMAT_INFO_MASK_QR)},e.doDecodeFormatInformation=function(t,n){for(var r=Number.MAX_SAFE_INTEGER,o=0,a=0,i=e.FORMAT_INFO_DECODE_LOOKUP;a<i.length;a++){var s=i[a],u=s[0];if(u===t||u===n)return new e(s[1]);var l=e.numBitsDiffering(t,u);l<r&&(o=s[1],r=l),t!==n&&(l=e.numBitsDiffering(n,u))<r&&(o=s[1],r=l)}return r<=3?new e(o):null},e.prototype.getErrorCorrectionLevel=function(){return this.errorCorrectionLevel},e.prototype.getDataMask=function(){return this.dataMask},e.prototype.hashCode=function(){return this.errorCorrectionLevel.getBits()<<3|this.dataMask},e.prototype.equals=function(t){if(!(t instanceof e))return!1;var n=t;return this.errorCorrectionLevel===n.errorCorrectionLevel&&this.dataMask===n.dataMask},e.FORMAT_INFO_MASK_QR=21522,e.FORMAT_INFO_DECODE_LOOKUP=[Int32Array.from([21522,0]),Int32Array.from([20773,1]),Int32Array.from([24188,2]),Int32Array.from([23371,3]),Int32Array.from([17913,4]),Int32Array.from([16590,5]),Int32Array.from([20375,6]),Int32Array.from([19104,7]),Int32Array.from([30660,8]),Int32Array.from([29427,9]),Int32Array.from([32170,10]),Int32Array.from([30877,11]),Int32Array.from([26159,12]),Int32Array.from([25368,13]),Int32Array.from([27713,14]),Int32Array.from([26998,15]),Int32Array.from([5769,16]),Int32Array.from([5054,17]),Int32Array.from([7399,18]),Int32Array.from([6608,19]),Int32Array.from([1890,20]),Int32Array.from([597,21]),Int32Array.from([3340,22]),Int32Array.from([2107,23]),Int32Array.from([13663,24]),Int32Array.from([12392,25]),Int32Array.from([16177,26]),Int32Array.from([14854,27]),Int32Array.from([9396,28]),Int32Array.from([8579,29]),Int32Array.from([11994,30]),Int32Array.from([11245,31])],e}();t.default=a},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e){this.mirrored=e}return e.prototype.isMirrored=function(){return this.mirrored},e.prototype.applyMirroredCorrection=function(e){if(this.mirrored&&null!==e&&!(e.length<3)){var t=e[0];e[0]=e[2],e[2]=t}},e}();t.default=r},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(24),o=function(){function e(){}return e.prototype.StringUtils=function(){},e.guessEncoding=function(t,n){if(null!==n&&void 0!==n&&void 0!==n.get(4))return n.get(4).toString();for(var r=t.length,o=!0,a=!0,i=!0,s=0,u=0,l=0,c=0,f=0,d=0,p=0,h=0,g=0,v=0,m=0,y=t.length>3&&239===t[0]&&187===t[1]&&191===t[2],w=0;w<r&&(o||a||i);w++){var b=255&t[w];i&&(s>0?0==(128&b)?i=!1:s--:0!=(128&b)&&(0==(64&b)?i=!1:(s++,0==(32&b)?u++:(s++,0==(16&b)?l++:(s++,0==(8&b)?c++:i=!1))))),o&&(b>127&&b<160?o=!1:b>159&&(b<192||215===b||247===b)&&m++),a&&(f>0?b<64||127===b||b>252?a=!1:f--:128===b||160===b||b>239?a=!1:b>160&&b<224?(d++,h=0,++p>g&&(g=p)):b>127?(f++,p=0,++h>v&&(v=h)):(p=0,h=0))}return i&&s>0&&(i=!1),a&&f>0&&(a=!1),i&&(y||u+l+c>0)?e.UTF8:a&&(e.ASSUME_SHIFT_JIS||g>=3||v>=3)?e.SHIFT_JIS:o&&a?2===g&&2===d||10*m>=r?e.SHIFT_JIS:e.ISO88591:o?e.ISO88591:a?e.SHIFT_JIS:i?e.UTF8:e.PLATFORM_DEFAULT_ENCODING},e.SHIFT_JIS=r.default.SJIS.getName(),e.GB2312="GB2312",e.ISO88591=r.default.ISO8859_1.getName(),e.EUC_JP="EUC_JP",e.UTF8=r.default.UTF8.getName(),e.PLATFORM_DEFAULT_ENCODING=e.UTF8,e.ASSUME_SHIFT_JIS=!1,e}();t.default=o},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(4);!function(e){e[e.TERMINATOR=0]="TERMINATOR",e[e.NUMERIC=1]="NUMERIC",e[e.ALPHANUMERIC=2]="ALPHANUMERIC",e[e.STRUCTURED_APPEND=3]="STRUCTURED_APPEND",e[e.BYTE=4]="BYTE",e[e.ECI=5]="ECI",e[e.KANJI=6]="KANJI",e[e.FNC1_FIRST_POSITION=7]="FNC1_FIRST_POSITION",e[e.FNC1_SECOND_POSITION=8]="FNC1_SECOND_POSITION",e[e.HANZI=9]="HANZI"}(t.ModeValues||(t.ModeValues={}));var o=function(){function e(t,n,r,o){this.value=t,this.stringValue=n,this.characterCountBitsForVersions=r,this.bits=o,e.FOR_BITS.set(o,this),e.FOR_VALUE.set(t,this)}return e.forBits=function(t){var n=e.FOR_BITS.get(t);if(void 0===n)throw new r.default;return n},e.prototype.getCharacterCountBits=function(e){var t,n=e.getVersionNumber();return t=n<=9?0:n<=26?1:2,this.characterCountBitsForVersions[t]},e.prototype.getValue=function(){return this.value},e.prototype.getBits=function(){return this.bits},e.prototype.equals=function(t){if(!(t instanceof e))return!1;var n=t;return this.value===n.value},e.prototype.toString=function(){return this.stringValue},e.FOR_BITS=new Map,e.FOR_VALUE=new Map,e.TERMINATOR=new e(0,"TERMINATOR",Int32Array.from([0,0,0]),0),e.NUMERIC=new e(1,"NUMERIC",Int32Array.from([10,12,14]),1),e.ALPHANUMERIC=new e(2,"ALPHANUMERIC",Int32Array.from([9,11,13]),2),e.STRUCTURED_APPEND=new e(3,"STRUCTURED_APPEND",Int32Array.from([0,0,0]),3),e.BYTE=new e(4,"BYTE",Int32Array.from([8,16,16]),4),e.ECI=new e(5,"ECI",Int32Array.from([0,0,0]),7),e.KANJI=new e(6,"KANJI",Int32Array.from([8,10,12]),8),e.FNC1_FIRST_POSITION=new e(7,"FNC1_FIRST_POSITION",Int32Array.from([0,0,0]),5),e.FNC1_SECOND_POSITION=new e(8,"FNC1_SECOND_POSITION",Int32Array.from([0,0,0]),9),e.HANZI=new e(9,"HANZI",Int32Array.from([8,10,12]),13),e}();t.default=o},function(e,t,n){"use strict";var r=this&&this.__extends||function(){var e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])};return function(t,n){function r(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}();Object.defineProperty(t,"__esModule",{value:!0});var o=n(80),a=n(11),i=n(45),s=n(3),u=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return r(t,e),t.prototype.sampleGrid=function(e,t,n,r,o,a,s,u,l,c,f,d,p,h,g,v,m,y,w){var b=i.default.quadrilateralToQuadrilateral(r,o,a,s,u,l,c,f,d,p,h,g,v,m,y,w);return this.sampleGridWithTransform(e,t,n,b)},t.prototype.sampleGridWithTransform=function(e,t,n,r){if(t<=0||n<=0)throw new s.default;for(var i=new a.default(t,n),u=new Float32Array(2*t),l=0;l<n;l++){for(var c=u.length,f=l+.5,d=0;d<c;d+=2)u[d]=d/2+.5,u[d+1]=f;r.transformPoints(u),o.default.checkAndNudgePoints(e,u);try{for(d=0;d<c;d+=2)e.get(Math.floor(u[d]),Math.floor(u[d+1]))&&i.set(d/2,l)}catch(e){throw new s.default}}return i},t}(o.default);t.default=u},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(3),o=function(){function e(){}return e.checkAndNudgePoints=function(e,t){for(var n=e.getWidth(),o=e.getHeight(),a=!0,i=0;i<t.length&&a;i+=2){var s=Math.floor(t[i]),u=Math.floor(t[i+1]);if(s<-1||s>n||u<-1||u>o)throw new r.default;a=!1,-1===s?(t[i]=0,a=!0):s===n&&(t[i]=n-1,a=!0),-1===u?(t[i+1]=0,a=!0):u===o&&(t[i+1]=o-1,a=!0)}a=!0;for(i=t.length-2;i>=0&&a;i-=2){s=Math.floor(t[i]),u=Math.floor(t[i+1]);if(s<-1||s>n||u<-1||u>o)throw new r.default;a=!1,-1===s?(t[i]=0,a=!0):s===n&&(t[i]=n-1,a=!0),-1===u?(t[i+1]=0,a=!0):u===o&&(t[i+1]=o-1,a=!0)}},e}();t.default=o},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(6),o=n(22),a=n(3),i=function(){function e(t,n,r,o){this.image=t,this.height=t.getHeight(),this.width=t.getWidth(),void 0!==n&&null!==n||(n=e.INIT_SIZE),void 0!==r&&null!==r||(r=t.getWidth()/2|0),void 0!==o&&null!==o||(o=t.getHeight()/2|0);var i=n/2|0;if(this.leftInit=r-i,this.rightInit=r+i,this.upInit=o-i,this.downInit=o+i,this.upInit<0||this.leftInit<0||this.downInit>=this.height||this.rightInit>=this.width)throw new a.default}return e.prototype.detect=function(){for(var e=this.leftInit,t=this.rightInit,n=this.upInit,r=this.downInit,o=!1,i=!0,s=!1,u=!1,l=!1,c=!1,f=!1,d=this.width,p=this.height;i;){i=!1;for(var h=!0;(h||!u)&&t<d;)(h=this.containsBlackPoint(n,r,t,!1))?(t++,i=!0,u=!0):u||t++;if(t>=d){o=!0;break}for(var g=!0;(g||!l)&&r<p;)(g=this.containsBlackPoint(e,t,r,!0))?(r++,i=!0,l=!0):l||r++;if(r>=p){o=!0;break}for(var v=!0;(v||!c)&&e>=0;)(v=this.containsBlackPoint(n,r,e,!1))?(e--,i=!0,c=!0):c||e--;if(e<0){o=!0;break}for(var m=!0;(m||!f)&&n>=0;)(m=this.containsBlackPoint(e,t,n,!0))?(n--,i=!0,f=!0):f||n--;if(n<0){o=!0;break}i&&(s=!0)}if(!o&&s){for(var y=t-e,w=null,b=1;null===w&&b<y;b++)w=this.getBlackPointOnSegment(e,r-b,e+b,r);if(null==w)throw new a.default;var E=null;for(b=1;null===E&&b<y;b++)E=this.getBlackPointOnSegment(e,n+b,e+b,n);if(null==E)throw new a.default;var _=null;for(b=1;null===_&&b<y;b++)_=this.getBlackPointOnSegment(t,n+b,t-b,n);if(null==_)throw new a.default;var C=null;for(b=1;null===C&&b<y;b++)C=this.getBlackPointOnSegment(t,r-b,t-b,r);if(null==C)throw new a.default;return this.centerEdges(C,w,_,E)}throw new a.default},e.prototype.getBlackPointOnSegment=function(e,t,n,a){for(var i=o.default.round(o.default.distance(e,t,n,a)),s=(n-e)/i,u=(a-t)/i,l=this.image,c=0;c<i;c++){var f=o.default.round(e+c*s),d=o.default.round(t+c*u);if(l.get(f,d))return new r.default(f,d)}return null},e.prototype.centerEdges=function(t,n,o,a){var i=t.getX(),s=t.getY(),u=n.getX(),l=n.getY(),c=o.getX(),f=o.getY(),d=a.getX(),p=a.getY(),h=e.CORR;return i<this.width/2?[new r.default(d-h,p+h),new r.default(u+h,l+h),new r.default(c-h,f-h),new r.default(i+h,s-h)]:[new r.default(d+h,p+h),new r.default(u+h,l-h),new r.default(c-h,f+h),new r.default(i-h,s-h)]},e.prototype.containsBlackPoint=function(e,t,n,r){var o=this.image;if(r){for(var a=e;a<=t;a++)if(o.get(a,n))return!0}else for(var i=e;i<=t;i++)if(o.get(n,i))return!0;return!1},e.INIT_SIZE=10,e.CORR=1,e}();t.default=i},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(29),o=n(10),a=n(4),i=function(){function e(e){this.field=e,this.cachedGenerators=[],this.cachedGenerators.push(new r.default(e,Int32Array.from([1])))}return e.prototype.buildGenerator=function(e){var t=this.cachedGenerators;if(e>=t.length)for(var n=t[t.length-1],o=this.field,a=t.length;a<=e;a++){var i=n.multiply(new r.default(o,Int32Array.from([1,o.exp(a-1+o.getGeneratorBase())])));t.push(i),n=i}return t[e]},e.prototype.encode=function(e,t){if(0===t)throw new a.default("No error correction bytes");var n=e.length-t;if(n<=0)throw new a.default("No data bytes provided");var i=this.buildGenerator(t),s=new Int32Array(n);o.default.arraycopy(e,0,s,0,n);for(var u=new r.default(this.field,s),l=(u=u.multiplyByMonomial(t,1)).divide(i)[1].getCoefficients(),c=t-l.length,f=0;f<c;f++)e[n+f]=0;o.default.arraycopy(l,0,e,n+c,l.length)},e}();t.default=i},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(4),o=function(){function e(){}return e.applyMaskPenaltyRule1=function(t){return e.applyMaskPenaltyRule1Internal(t,!0)+e.applyMaskPenaltyRule1Internal(t,!1)},e.applyMaskPenaltyRule2=function(t){for(var n=0,r=t.getArray(),o=t.getWidth(),a=t.getHeight(),i=0;i<a-1;i++)for(var s=r[i],u=0;u<o-1;u++){var l=s[u];l===s[u+1]&&l===r[i+1][u]&&l===r[i+1][u+1]&&n++}return e.N2*n},e.applyMaskPenaltyRule3=function(t){for(var n=0,r=t.getArray(),o=t.getWidth(),a=t.getHeight(),i=0;i<a;i++)for(var s=0;s<o;s++){var u=r[i];s+6<o&&1===u[s]&&0===u[s+1]&&1===u[s+2]&&1===u[s+3]&&1===u[s+4]&&0===u[s+5]&&1===u[s+6]&&(e.isWhiteHorizontal(u,s-4,s)||e.isWhiteHorizontal(u,s+7,s+11))&&n++,i+6<a&&1===r[i][s]&&0===r[i+1][s]&&1===r[i+2][s]&&1===r[i+3][s]&&1===r[i+4][s]&&0===r[i+5][s]&&1===r[i+6][s]&&(e.isWhiteVertical(r,s,i-4,i)||e.isWhiteVertical(r,s,i+7,i+11))&&n++}return n*e.N3},e.isWhiteHorizontal=function(e,t,n){t=Math.max(t,0),n=Math.min(n,e.length);for(var r=t;r<n;r++)if(1===e[r])return!1;return!0},e.isWhiteVertical=function(e,t,n,r){n=Math.max(n,0),r=Math.min(r,e.length);for(var o=n;o<r;o++)if(1===e[o][t])return!1;return!0},e.applyMaskPenaltyRule4=function(t){for(var n=0,r=t.getArray(),o=t.getWidth(),a=t.getHeight(),i=0;i<a;i++)for(var s=r[i],u=0;u<o;u++)1===s[u]&&n++;var l=t.getHeight()*t.getWidth();return Math.floor(10*Math.abs(2*n-l)/l)*e.N4},e.getDataMaskBit=function(e,t,n){var o,a;switch(e){case 0:o=n+t&1;break;case 1:o=1&n;break;case 2:o=t%3;break;case 3:o=(n+t)%3;break;case 4:o=Math.floor(n/2)+Math.floor(t/3)&1;break;case 5:o=(1&(a=n*t))+a%3;break;case 6:o=(1&(a=n*t))+a%3&1;break;case 7:o=(a=n*t)%3+(n+t&1)&1;break;default:throw new r.default("Invalid mask pattern: "+e)}return 0===o},e.applyMaskPenaltyRule1Internal=function(t,n){for(var r=0,o=n?t.getHeight():t.getWidth(),a=n?t.getWidth():t.getHeight(),i=t.getArray(),s=0;s<o;s++){for(var u=0,l=-1,c=0;c<a;c++){var f=n?i[s][c]:i[c][s];f===l?u++:(u>=5&&(r+=e.N1+(u-5)),u=1,l=f)}u>=5&&(r+=e.N1+(u-5))}return r},e.N1=3,e.N2=3,e.N3=40,e.N4=10,e}();t.default=o},function(e,t,n){"use strict";var r=this&&this.__extends||function(){var e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])};return function(t,n){function r(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}();Object.defineProperty(t,"__esModule",{value:!0});var o=n(5),a=n(14),i=n(7),s=n(3),u=n(16),l=n(12),c=n(6),f=function(e){function t(t,n){void 0===t&&(t=!1),void 0===n&&(n=!1);var r=e.call(this)||this;return r.usingCheckDigit=t,r.extendedMode=n,r.decodeRowResult="",r.counters=new Array(9),r}return r(t,e),t.prototype.decodeRow=function(e,n,r){var i=this.counters;i.fill(0),this.decodeRowResult="";var u,f,d,p=t.findAsteriskPattern(n,i),h=n.getNextSet(p[1]),g=n.getSize();do{t.recordPattern(n,h,i);var v=t.toNarrowWidePattern(i);if(v<0)throw new s.default;u=t.patternToChar(v),this.decodeRowResult+=u,f=h;for(var m=0,y=i;m<y.length;m++){h+=y[m]}h=n.getNextSet(h)}while("*"!==u);this.decodeRowResult=this.decodeRowResult.substring(0,this.decodeRowResult.length-1);for(var w=0,b=0,E=i;b<E.length;b++){w+=E[b]}if(h!==g&&2*(h-f-w)<w)throw new s.default;if(this.usingCheckDigit){for(var _=this.decodeRowResult.length-1,C=0,T=0;T<_;T++)C+=t.ALPHABET_STRING.indexOf(this.decodeRowResult.charAt(T));if(this.decodeRowResult.charAt(_)!==t.ALPHABET_STRING.charAt(C%43))throw new a.default;this.decodeRowResult=this.decodeRowResult.substring(0,_)}if(0===this.decodeRowResult.length)throw new s.default;d=this.extendedMode?t.decodeExtended(this.decodeRowResult):this.decodeRowResult;var O=(p[1]+p[0])/2,S=f+w/2;return new l.default(d,null,0,[new c.default(O,e),new c.default(S,e)],o.default.CODE_39,(new Date).getTime())},t.findAsteriskPattern=function(e,n){for(var r=e.getSize(),o=e.getNextSet(0),a=0,i=o,u=!1,l=n.length,c=o;c<r;c++)if(e.get(c)!==u)n[a]++;else{if(a===l-1){if(this.toNarrowWidePattern(n)===t.ASTERISK_ENCODING&&e.isRange(Math.max(0,i-Math.floor((c-i)/2)),i,!1))return[i,c];i+=n[0]+n[1],n.copyWithin(0,2,2+a-1),n[a-1]=0,n[a]=0,a--}else a++;n[a]=1,u=!u}throw new s.default},t.toNarrowWidePattern=function(e){var t,n=e.length,r=0;do{for(var o=2147483647,a=0,i=e;a<i.length;a++){(c=i[a])<o&&c>r&&(o=c)}r=o,t=0;for(var s=0,u=0,l=0;l<n;l++){(c=e[l])>r&&(u|=1<<n-1-l,t++,s+=c)}if(3===t){for(l=0;l<n&&t>0;l++){var c;if((c=e[l])>r&&(t--,2*c>=s))return-1}return u}}while(t>3);return-1},t.patternToChar=function(e){for(var n=0;n<t.CHARACTER_ENCODINGS.length;n++)if(t.CHARACTER_ENCODINGS[n]===e)return t.ALPHABET_STRING.charAt(n);if(e===t.ASTERISK_ENCODING)return"*";throw new s.default},t.decodeExtended=function(e){for(var t=e.length,n="",r=0;r<t;r++){var o=e.charAt(r);if("+"===o||"$"===o||"%"===o||"/"===o){var a=e.charAt(r+1),s="\0";switch(o){case"+":if(!(a>="A"&&a<="Z"))throw new i.default;s=String.fromCharCode(a.charCodeAt(0)+32);break;case"$":if(!(a>="A"&&a<="Z"))throw new i.default;s=String.fromCharCode(a.charCodeAt(0)-64);break;case"%":if(a>="A"&&a<="E")s=String.fromCharCode(a.charCodeAt(0)-38);else if(a>="F"&&a<="J")s=String.fromCharCode(a.charCodeAt(0)-11);else if(a>="K"&&a<="O")s=String.fromCharCode(a.charCodeAt(0)+16);else if(a>="P"&&a<="T")s=String.fromCharCode(a.charCodeAt(0)+43);else if("U"===a)s="\0";else if("V"===a)s="@";else if("W"===a)s="`";else{if("X"!==a&&"Y"!==a&&"Z"!==a)throw new i.default;s=""}break;case"/":if(a>="A"&&a<="O")s=String.fromCharCode(a.charCodeAt(0)-32);else{if("Z"!==a)throw new i.default;s=":"}}n+=s,r++}else n+=o}return n},t.ALPHABET_STRING="0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ-. $/+%",t.CHARACTER_ENCODINGS=[52,289,97,352,49,304,112,37,292,100,265,73,328,25,280,88,13,268,76,28,259,67,322,19,274,82,7,262,70,22,385,193,448,145,400,208,133,388,196,168,162,138,42],t.ASTERISK_ENCODING=148,t}(u.default);t.default=f},function(e,t,n){"use strict";var r=this&&this.__extends||function(){var e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])};return function(t,n){function r(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}();Object.defineProperty(t,"__esModule",{value:!0});var o=n(5),a=n(12),i=n(6),s=n(16),u=n(3),l=n(7),c=n(14),f=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return r(t,e),t.findStartPattern=function(e){for(var n=e.getSize(),r=e.getNextSet(0),o=0,a=[0,0,0,0,0,0],i=r,l=!1,c=r;c<n;c++)if(e.get(c)!==l)a[o]++;else{if(5===o){for(var f=t.MAX_AVG_VARIANCE,d=-1,p=t.CODE_START_A;p<=t.CODE_START_C;p++){var h=s.default.patternMatchVariance(a,t.CODE_PATTERNS[p],t.MAX_INDIVIDUAL_VARIANCE);h<f&&(f=h,d=p)}if(d>=0&&e.isRange(Math.max(0,i-(c-i)/2),i,!1))return[i,c,d];i+=a[0]+a[1],a.splice(0,2),a[o-1]=0,a[o]=0,o--}else o++;a[o]=1,l=!l}throw new u.default},t.decodeCode=function(e,n,r){s.default.recordPattern(e,r,n);for(var o=t.MAX_AVG_VARIANCE,a=-1,i=0;i<t.CODE_PATTERNS.length;i++){var l=t.CODE_PATTERNS[i],c=this.patternMatchVariance(n,l,t.MAX_INDIVIDUAL_VARIANCE);c<o&&(o=c,a=i)}if(a>=0)return a;throw new u.default},t.prototype.decodeRow=function(e,n,r){var s,f=r&&!0===r.get(7),d=t.findStartPattern(n),p=d[2],h=0,g=new Uint8Array(20);switch(g[h++]=p,p){case t.CODE_START_A:s=t.CODE_CODE_A;break;case t.CODE_START_B:s=t.CODE_CODE_B;break;case t.CODE_START_C:s=t.CODE_CODE_C;break;default:throw new l.default}for(var v=!1,m=!1,y="",w=d[0],b=d[1],E=[0,0,0,0,0,0],_=0,C=0,T=p,O=0,S=!0,N=!1,A=!1;!v;){var P=m;switch(m=!1,_=C,C=t.decodeCode(n,E,b),g[h++]=C,C!==t.CODE_STOP&&(S=!0),C!==t.CODE_STOP&&(T+=++O*C),w=b,b+=E.reduce(function(e,t){return e+t},0),C){case t.CODE_START_A:case t.CODE_START_B:case t.CODE_START_C:throw new l.default}switch(s){case t.CODE_CODE_A:if(C<64)y+=A===N?String.fromCharCode(" ".charCodeAt(0)+C):String.fromCharCode(" ".charCodeAt(0)+C+128),A=!1;else if(C<96)y+=A===N?String.fromCharCode(C-64):String.fromCharCode(C+64),A=!1;else switch(C!==t.CODE_STOP&&(S=!1),C){case t.CODE_FNC_1:f&&(0===y.length?y+="]C1":y+=String.fromCharCode(29));break;case t.CODE_FNC_2:case t.CODE_FNC_3:break;case t.CODE_FNC_4_A:!N&&A?(N=!0,A=!1):N&&A?(N=!1,A=!1):A=!0;break;case t.CODE_SHIFT:m=!0,s=t.CODE_CODE_B;break;case t.CODE_CODE_B:s=t.CODE_CODE_B;break;case t.CODE_CODE_C:s=t.CODE_CODE_C;break;case t.CODE_STOP:v=!0}break;case t.CODE_CODE_B:if(C<96)y+=A===N?String.fromCharCode(" ".charCodeAt(0)+C):String.fromCharCode(" ".charCodeAt(0)+C+128),A=!1;else switch(C!==t.CODE_STOP&&(S=!1),C){case t.CODE_FNC_1:f&&(0===y.length?y+="]C1":y+=String.fromCharCode(29));break;case t.CODE_FNC_2:case t.CODE_FNC_3:break;case t.CODE_FNC_4_B:!N&&A?(N=!0,A=!1):N&&A?(N=!1,A=!1):A=!0;break;case t.CODE_SHIFT:m=!0,s=t.CODE_CODE_A;break;case t.CODE_CODE_A:s=t.CODE_CODE_A;break;case t.CODE_CODE_C:s=t.CODE_CODE_C;break;case t.CODE_STOP:v=!0}break;case t.CODE_CODE_C:if(C<100)C<10&&(y+="0"),y+=C;else switch(C!==t.CODE_STOP&&(S=!1),C){case t.CODE_FNC_1:f&&(0===y.length?y+="]C1":y+=String.fromCharCode(29));break;case t.CODE_CODE_A:s=t.CODE_CODE_A;break;case t.CODE_CODE_B:s=t.CODE_CODE_B;break;case t.CODE_STOP:v=!0}}P&&(s=s===t.CODE_CODE_A?t.CODE_CODE_B:t.CODE_CODE_A)}var I=b-w;if(b=n.getNextUnset(b),!n.isRange(b,Math.min(n.getSize(),b+(b-w)/2),!1))throw new u.default;if((T-=O*_)%103!==_)throw new c.default;var M=y.length;if(0===M)throw new u.default;M>0&&S&&(y=s===t.CODE_CODE_C?y.substring(0,M-2):y.substring(0,M-1));for(var k=(d[1]+d[0])/2,x=w+I/2,R=g.length,D=new Uint8Array(R),B=0;B<R;B++)D[B]=g[B];var j=[new i.default(k,e),new i.default(x,e)];return new a.default(y,D,0,j,o.default.CODE_128,(new Date).getTime())},t.CODE_PATTERNS=[[2,1,2,2,2,2],[2,2,2,1,2,2],[2,2,2,2,2,1],[1,2,1,2,2,3],[1,2,1,3,2,2],[1,3,1,2,2,2],[1,2,2,2,1,3],[1,2,2,3,1,2],[1,3,2,2,1,2],[2,2,1,2,1,3],[2,2,1,3,1,2],[2,3,1,2,1,2],[1,1,2,2,3,2],[1,2,2,1,3,2],[1,2,2,2,3,1],[1,1,3,2,2,2],[1,2,3,1,2,2],[1,2,3,2,2,1],[2,2,3,2,1,1],[2,2,1,1,3,2],[2,2,1,2,3,1],[2,1,3,2,1,2],[2,2,3,1,1,2],[3,1,2,1,3,1],[3,1,1,2,2,2],[3,2,1,1,2,2],[3,2,1,2,2,1],[3,1,2,2,1,2],[3,2,2,1,1,2],[3,2,2,2,1,1],[2,1,2,1,2,3],[2,1,2,3,2,1],[2,3,2,1,2,1],[1,1,1,3,2,3],[1,3,1,1,2,3],[1,3,1,3,2,1],[1,1,2,3,1,3],[1,3,2,1,1,3],[1,3,2,3,1,1],[2,1,1,3,1,3],[2,3,1,1,1,3],[2,3,1,3,1,1],[1,1,2,1,3,3],[1,1,2,3,3,1],[1,3,2,1,3,1],[1,1,3,1,2,3],[1,1,3,3,2,1],[1,3,3,1,2,1],[3,1,3,1,2,1],[2,1,1,3,3,1],[2,3,1,1,3,1],[2,1,3,1,1,3],[2,1,3,3,1,1],[2,1,3,1,3,1],[3,1,1,1,2,3],[3,1,1,3,2,1],[3,3,1,1,2,1],[3,1,2,1,1,3],[3,1,2,3,1,1],[3,3,2,1,1,1],[3,1,4,1,1,1],[2,2,1,4,1,1],[4,3,1,1,1,1],[1,1,1,2,2,4],[1,1,1,4,2,2],[1,2,1,1,2,4],[1,2,1,4,2,1],[1,4,1,1,2,2],[1,4,1,2,2,1],[1,1,2,2,1,4],[1,1,2,4,1,2],[1,2,2,1,1,4],[1,2,2,4,1,1],[1,4,2,1,1,2],[1,4,2,2,1,1],[2,4,1,2,1,1],[2,2,1,1,1,4],[4,1,3,1,1,1],[2,4,1,1,1,2],[1,3,4,1,1,1],[1,1,1,2,4,2],[1,2,1,1,4,2],[1,2,1,2,4,1],[1,1,4,2,1,2],[1,2,4,1,1,2],[1,2,4,2,1,1],[4,1,1,2,1,2],[4,2,1,1,1,2],[4,2,1,2,1,1],[2,1,2,1,4,1],[2,1,4,1,2,1],[4,1,2,1,2,1],[1,1,1,1,4,3],[1,1,1,3,4,1],[1,3,1,1,4,1],[1,1,4,1,1,3],[1,1,4,3,1,1],[4,1,1,1,1,3],[4,1,1,3,1,1],[1,1,3,1,4,1],[1,1,4,1,3,1],[3,1,1,1,4,1],[4,1,1,1,3,1],[2,1,1,4,1,2],[2,1,1,2,1,4],[2,1,1,2,3,2],[2,3,3,1,1,1,2]],t.MAX_AVG_VARIANCE=.25,t.MAX_INDIVIDUAL_VARIANCE=.7,t.CODE_SHIFT=98,t.CODE_CODE_C=99,t.CODE_CODE_B=100,t.CODE_CODE_A=101,t.CODE_FNC_1=102,t.CODE_FNC_2=97,t.CODE_FNC_3=96,t.CODE_FNC_4_A=101,t.CODE_FNC_4_B=100,t.CODE_START_A=103,t.CODE_START_B=104,t.CODE_START_C=105,t.CODE_STOP=106,t}(s.default);t.default=f},function(e,t,n){"use strict";var r=this&&this.__extends||function(){var e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])};return function(t,n){function r(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}();Object.defineProperty(t,"__esModule",{value:!0});var o=n(5),a=n(12),i=n(6),s=n(16),u=n(13),l=n(10),c=n(7),f=n(3),d=function(e){function t(){var t=null!==e&&e.apply(this,arguments)||this;return t.narrowLineWidth=-1,t}return r(t,e),t.prototype.decodeRow=function(e,n,r){var s=this.decodeStart(n),l=this.decodeEnd(n),f=new u.default;t.decodeMiddle(n,s[1],l[0],f);var d=f.toString(),p=null;null!=r&&(p=r.get(5)),null==p&&(p=t.DEFAULT_ALLOWED_LENGTHS);for(var h=d.length,g=!1,v=0,m=0,y=p;m<y.length;m++){var w=y[m];if(h===w){g=!0;break}w>v&&(v=w)}if(!g&&h>v&&(g=!0),!g)throw new c.default;var b=[new i.default(s[1],e),new i.default(l[0],e)];return new a.default(d,null,0,b,o.default.ITF,(new Date).getTime())},t.decodeMiddle=function(e,n,r,o){var a=new Array(10),i=new Array(5),u=new Array(5);for(a.fill(0),i.fill(0),u.fill(0);n<r;){s.default.recordPattern(e,n,a);for(var l=0;l<5;l++){var c=2*l;i[l]=a[c],u[l]=a[c+1]}var f=t.decodeDigit(i);o.append(f.toString()),f=this.decodeDigit(u),o.append(f.toString()),a.forEach(function(e){n+=e})}},t.prototype.decodeStart=function(e){var n=t.skipWhiteSpace(e),r=t.findGuardPattern(e,n,t.START_PATTERN);return this.narrowLineWidth=(r[1]-r[0])/4,this.validateQuietZone(e,r[0]),r},t.prototype.validateQuietZone=function(e,t){var n=10*this.narrowLineWidth;n=n<t?n:t;for(var r=t-1;n>0&&r>=0&&!e.get(r);r--)n--;if(0!==n)throw new f.default},t.skipWhiteSpace=function(e){var t=e.getSize(),n=e.getNextSet(0);if(n===t)throw new f.default;return n},t.prototype.decodeEnd=function(e){e.reverse();try{var n=t.skipWhiteSpace(e),r=void 0;try{r=t.findGuardPattern(e,n,t.END_PATTERN_REVERSED[0])}catch(o){r=t.findGuardPattern(e,n,t.END_PATTERN_REVERSED[1])}this.validateQuietZone(e,r[0]);var o=r[0];return r[0]=e.getSize()-r[1],r[1]=e.getSize()-o,r}finally{e.reverse()}},t.findGuardPattern=function(e,n,r){var o=r.length,a=new Array(o),i=e.getSize(),u=!1,c=0,d=n;a.fill(0);for(var p=n;p<i;p++)if(e.get(p)!==u)a[c]++;else{if(c===o-1){if(s.default.patternMatchVariance(a,r,t.MAX_INDIVIDUAL_VARIANCE)<t.MAX_AVG_VARIANCE)return[d,p];d+=a[0]+a[1],l.default.arraycopy(a,2,a,0,c-1),a[c-1]=0,a[c]=0,c--}else c++;a[c]=1,u=!u}throw new f.default},t.decodeDigit=function(e){for(var n=t.MAX_AVG_VARIANCE,r=-1,o=t.PATTERNS.length,a=0;a<o;a++){var i=t.PATTERNS[a],u=s.default.patternMatchVariance(e,i,t.MAX_INDIVIDUAL_VARIANCE);u<n?(n=u,r=a):u===n&&(r=-1)}if(r>=0)return r%10;throw new f.default},t.W=3,t.w=2,t.N=1,t.PATTERNS=[[1,1,2,2,1],[2,1,1,1,2],[1,2,1,1,2],[2,2,1,1,1],[1,1,2,1,2],[2,1,2,1,1],[1,2,2,1,1],[1,1,1,2,2],[2,1,1,2,1],[1,2,1,2,1],[1,1,3,3,1],[3,1,1,1,3],[1,3,1,1,3],[3,3,1,1,1],[1,1,3,1,3],[3,1,3,1,1],[1,3,3,1,1],[1,1,1,3,3],[3,1,1,3,1],[1,3,1,3,1]],t.MAX_AVG_VARIANCE=.38,t.MAX_INDIVIDUAL_VARIANCE=.5,t.DEFAULT_ALLOWED_LENGTHS=[6,8,10,12,14],t.START_PATTERN=[1,1,1,1],t.END_PATTERN_REVERSED=[[1,1,2],[1,1,3]],t}(s.default);t.default=d},function(e,t,n){"use strict";var r=this&&this.__extends||function(){var e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])};return function(t,n){function r(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}();Object.defineProperty(t,"__esModule",{value:!0});var o=n(5),a=n(32),i=n(3),s=function(e){function t(){var t=e.call(this)||this;return t.decodeMiddleCounters=[0,0,0,0],t}return r(t,e),t.prototype.decodeMiddle=function(e,n,r){var o=this.decodeMiddleCounters;o[0]=0,o[1]=0,o[2]=0,o[3]=0;for(var i=e.getSize(),s=n[1],u=0,l=0;l<6&&s<i;l++){var c=a.default.decodeDigit(e,o,s,a.default.L_AND_G_PATTERNS);r+=String.fromCharCode("0".charCodeAt(0)+c%10);for(var f=0,d=o;f<d.length;f++){s+=d[f]}c>=10&&(u|=1<<5-l)}r=t.determineFirstDigit(r,u),s=a.default.findGuardPattern(e,s,!0,a.default.MIDDLE_PATTERN,new Array(a.default.MIDDLE_PATTERN.length).fill(0))[1];for(l=0;l<6&&s<i;l++){c=a.default.decodeDigit(e,o,s,a.default.L_PATTERNS);r+=String.fromCharCode("0".charCodeAt(0)+c);for(var p=0,h=o;p<h.length;p++){s+=h[p]}}return{rowOffset:s,resultString:r}},t.prototype.getBarcodeFormat=function(){return o.default.EAN_13},t.determineFirstDigit=function(e,t){for(var n=0;n<10;n++)if(t===this.FIRST_DIGIT_ENCODINGS[n])return e=String.fromCharCode("0".charCodeAt(0)+n)+e;throw new i.default},t.FIRST_DIGIT_ENCODINGS=[0,11,13,14,19,25,28,21,22,26],t}(a.default);t.default=s},function(e,t,n){"use strict";var r=this&&this.__extends||function(){var e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])};return function(t,n){function r(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}();Object.defineProperty(t,"__esModule",{value:!0});var o=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return r(t,e),t}(n(9).default);t.default=o},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(5),o=n(31),a=n(11),i=n(30),s=n(47),u=n(4),l=n(23),c=function(){function e(){}return e.prototype.encode=function(t,n,a,l,c){if(0===t.length)throw new u.default("Found empty contents");if(n!==r.default.QR_CODE)throw new u.default("Can only encode QR_CODE, but got "+n);if(a<0||l<0)throw new u.default("Requested dimensions are too small: "+a+"x"+l);var f=i.default.L,d=e.QUIET_ZONE_SIZE;null!==c&&(void 0!==c.get(o.default.ERROR_CORRECTION)&&(f=i.default.fromString(c.get(o.default.ERROR_CORRECTION).toString())),void 0!==c.get(o.default.MARGIN)&&(d=Number.parseInt(c.get(o.default.MARGIN).toString(),10)));var p=s.default.encode(t,f,c);return e.renderResult(p,a,l,d)},e.renderResult=function(e,t,n,r){var o=e.getMatrix();if(null===o)throw new l.default;for(var i=o.getWidth(),s=o.getHeight(),u=i+2*r,c=s+2*r,f=Math.max(t,u),d=Math.max(n,c),p=Math.min(Math.floor(f/u),Math.floor(d/c)),h=Math.floor((f-i*p)/2),g=Math.floor((d-s*p)/2),v=new a.default(f,d),m=0,y=g;m<s;m++,y+=p)for(var w=0,b=h;w<i;w++,b+=p)1===o.get(w,m)&&v.setRegion(b,y,p,p);return v},e.QUIET_ZONE_SIZE=4,e}();t.default=c},function(e,t,n){"use strict";n.r(t);var r=n(1),o=n(0),a=n.n(o),i=a.a.shape({trySubscribe:a.a.func.isRequired,tryUnsubscribe:a.a.func.isRequired,notifyNestedSubs:a.a.func.isRequired,isSubscribed:a.a.func.isRequired}),s=a.a.shape({subscribe:a.a.func.isRequired,dispatch:a.a.func.isRequired,getState:a.a.func.isRequired});function u(){var e,t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"store",n=arguments[1]||t+"Subscription",o=function(e){function o(n,r){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,o);var a=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,e.call(this,n,r));return a[t]=n.store,a}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(o,e),o.prototype.getChildContext=function(){var e;return(e={})[t]=this[t],e[n]=null,e},o.prototype.render=function(){return r.Children.only(this.props.children)},o}(r.Component);return o.propTypes={store:s.isRequired,children:a.a.element.isRequired},o.childContextTypes=((e={})[t]=s.isRequired,e[n]=i,e),o}var l=u(),c=n(93),f=n.n(c),d=n(25),p=n.n(d);var h=null,g={notify:function(){}};var v=function(){function e(t,n,r){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.store=t,this.parentSub=n,this.onStateChange=r,this.unsubscribe=null,this.listeners=g}return e.prototype.addNestedSub=function(e){return this.trySubscribe(),this.listeners.subscribe(e)},e.prototype.notifyNestedSubs=function(){this.listeners.notify()},e.prototype.isSubscribed=function(){return Boolean(this.unsubscribe)},e.prototype.trySubscribe=function(){this.unsubscribe||(this.unsubscribe=this.parentSub?this.parentSub.addNestedSub(this.onStateChange):this.store.subscribe(this.onStateChange),this.listeners=function(){var e=[],t=[];return{clear:function(){t=h,e=h},notify:function(){for(var n=e=t,r=0;r<n.length;r++)n[r]()},get:function(){return t},subscribe:function(n){var r=!0;return t===e&&(t=e.slice()),t.push(n),function(){r&&e!==h&&(r=!1,t===e&&(t=e.slice()),t.splice(t.indexOf(n),1))}}}}())},e.prototype.tryUnsubscribe=function(){this.unsubscribe&&(this.unsubscribe(),this.unsubscribe=null,this.listeners.clear(),this.listeners=g)},e}(),m=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e};var y=0,w={};function b(){}function E(e){var t,n,o=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},a=o.getDisplayName,u=void 0===a?function(e){return"ConnectAdvanced("+e+")"}:a,l=o.methodName,c=void 0===l?"connectAdvanced":l,d=o.renderCountProp,h=void 0===d?void 0:d,g=o.shouldHandleStateChanges,E=void 0===g||g,_=o.storeKey,C=void 0===_?"store":_,T=o.withRef,O=void 0!==T&&T,S=function(e,t){var n={};for(var r in e)t.indexOf(r)>=0||Object.prototype.hasOwnProperty.call(e,r)&&(n[r]=e[r]);return n}(o,["getDisplayName","methodName","renderCountProp","shouldHandleStateChanges","storeKey","withRef"]),N=C+"Subscription",A=y++,P=((t={})[C]=s,t[N]=i,t),I=((n={})[N]=i,n);return function(t){p()("function"==typeof t,"You must pass a component to the function returned by "+c+". Instead received "+JSON.stringify(t));var n=t.displayName||t.name||"Component",o=u(n),a=m({},S,{getDisplayName:u,methodName:c,renderCountProp:h,shouldHandleStateChanges:E,storeKey:C,withRef:O,displayName:o,wrappedComponentName:n,WrappedComponent:t}),i=function(n){function i(e,t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,i);var r=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,n.call(this,e,t));return r.version=A,r.state={},r.renderCount=0,r.store=e[C]||t[C],r.propsMode=Boolean(e[C]),r.setWrappedInstance=r.setWrappedInstance.bind(r),p()(r.store,'Could not find "'+C+'" in either the context or props of "'+o+'". Either wrap the root component in a <Provider>, or explicitly pass "'+C+'" as a prop to "'+o+'".'),r.initSelector(),r.initSubscription(),r}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(i,n),i.prototype.getChildContext=function(){var e,t=this.propsMode?null:this.subscription;return(e={})[N]=t||this.context[N],e},i.prototype.componentDidMount=function(){E&&(this.subscription.trySubscribe(),this.selector.run(this.props),this.selector.shouldComponentUpdate&&this.forceUpdate())},i.prototype.componentWillReceiveProps=function(e){this.selector.run(e)},i.prototype.shouldComponentUpdate=function(){return this.selector.shouldComponentUpdate},i.prototype.componentWillUnmount=function(){this.subscription&&this.subscription.tryUnsubscribe(),this.subscription=null,this.notifyNestedSubs=b,this.store=null,this.selector.run=b,this.selector.shouldComponentUpdate=!1},i.prototype.getWrappedInstance=function(){return p()(O,"To access the wrapped instance, you need to specify { withRef: true } in the options argument of the "+c+"() call."),this.wrappedInstance},i.prototype.setWrappedInstance=function(e){this.wrappedInstance=e},i.prototype.initSelector=function(){var t=e(this.store.dispatch,a);this.selector=function(e,t){var n={run:function(r){try{var o=e(t.getState(),r);(o!==n.props||n.error)&&(n.shouldComponentUpdate=!0,n.props=o,n.error=null)}catch(e){n.shouldComponentUpdate=!0,n.error=e}}};return n}(t,this.store),this.selector.run(this.props)},i.prototype.initSubscription=function(){if(E){var e=(this.propsMode?this.props:this.context)[N];this.subscription=new v(this.store,e,this.onStateChange.bind(this)),this.notifyNestedSubs=this.subscription.notifyNestedSubs.bind(this.subscription)}},i.prototype.onStateChange=function(){this.selector.run(this.props),this.selector.shouldComponentUpdate?(this.componentDidUpdate=this.notifyNestedSubsOnComponentDidUpdate,this.setState(w)):this.notifyNestedSubs()},i.prototype.notifyNestedSubsOnComponentDidUpdate=function(){this.componentDidUpdate=void 0,this.notifyNestedSubs()},i.prototype.isSubscribed=function(){return Boolean(this.subscription)&&this.subscription.isSubscribed()},i.prototype.addExtraProps=function(e){if(!(O||h||this.propsMode&&this.subscription))return e;var t=m({},e);return O&&(t.ref=this.setWrappedInstance),h&&(t[h]=this.renderCount++),this.propsMode&&this.subscription&&(t[N]=this.subscription),t},i.prototype.render=function(){var e=this.selector;if(e.shouldComponentUpdate=!1,e.error)throw e.error;return Object(r.createElement)(t,this.addExtraProps(e.props))},i}(r.Component);return i.WrappedComponent=t,i.displayName=o,i.childContextTypes=I,i.contextTypes=P,i.propTypes=P,f()(i,t)}}var _=Object.prototype.hasOwnProperty;function C(e,t){return e===t?0!==e||0!==t||1/e==1/t:e!=e&&t!=t}function T(e,t){if(C(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(var o=0;o<n.length;o++)if(!_.call(t,n[o])||!C(e[n[o]],t[n[o]]))return!1;return!0}var O=n(52),S=n(94),N="object"==typeof self&&self&&self.Object===Object&&self,A=(S.a||N||Function("return this")()).Symbol,P=Object.prototype;P.hasOwnProperty,P.toString,A&&A.toStringTag;Object.prototype.toString;A&&A.toStringTag;Object.getPrototypeOf,Object;var I=Function.prototype,M=Object.prototype,k=I.toString;M.hasOwnProperty,k.call(Object);function x(e){return function(t,n){var r=e(t,n);function o(){return r}return o.dependsOnOwnProps=!1,o}}function R(e){return null!==e.dependsOnOwnProps&&void 0!==e.dependsOnOwnProps?Boolean(e.dependsOnOwnProps):1!==e.length}function D(e,t){return function(t,n){n.displayName;var r=function(e,t){return r.dependsOnOwnProps?r.mapToProps(e,t):r.mapToProps(e)};return r.dependsOnOwnProps=!0,r.mapToProps=function(t,n){r.mapToProps=e,r.dependsOnOwnProps=R(e);var o=r(t,n);return"function"==typeof o&&(r.mapToProps=o,r.dependsOnOwnProps=R(o),o=r(t,n)),o},r}}var B=[function(e){return"function"==typeof e?D(e):void 0},function(e){return e?void 0:x(function(e){return{dispatch:e}})},function(e){return e&&"object"==typeof e?x(function(t){return Object(O.bindActionCreators)(e,t)}):void 0}];var j=[function(e){return"function"==typeof e?D(e):void 0},function(e){return e?void 0:x(function(){return{}})}],L=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e};function U(e,t,n){return L({},n,e,t)}var F=[function(e){return"function"==typeof e?function(e){return function(t,n){n.displayName;var r=n.pure,o=n.areMergedPropsEqual,a=!1,i=void 0;return function(t,n,s){var u=e(t,n,s);return a?r&&o(u,i)||(i=u):(a=!0,i=u),i}}}(e):void 0},function(e){return e?void 0:function(){return U}}];function z(e,t,n,r){return function(o,a){return n(e(o,a),t(r,a),a)}}function H(e,t,n,r,o){var a=o.areStatesEqual,i=o.areOwnPropsEqual,s=o.areStatePropsEqual,u=!1,l=void 0,c=void 0,f=void 0,d=void 0,p=void 0;function h(o,u){var h=!i(u,c),g=!a(o,l);return l=o,c=u,h&&g?(f=e(l,c),t.dependsOnOwnProps&&(d=t(r,c)),p=n(f,d,c)):h?(e.dependsOnOwnProps&&(f=e(l,c)),t.dependsOnOwnProps&&(d=t(r,c)),p=n(f,d,c)):g?function(){var t=e(l,c),r=!s(t,f);return f=t,r&&(p=n(f,d,c)),p}():p}return function(o,a){return u?h(o,a):function(o,a){return f=e(l=o,c=a),d=t(r,c),p=n(f,d,c),u=!0,p}(o,a)}}function W(e,t){var n=t.initMapStateToProps,r=t.initMapDispatchToProps,o=t.initMergeProps,a=function(e,t){var n={};for(var r in e)t.indexOf(r)>=0||Object.prototype.hasOwnProperty.call(e,r)&&(n[r]=e[r]);return n}(t,["initMapStateToProps","initMapDispatchToProps","initMergeProps"]),i=n(e,a),s=r(e,a),u=o(e,a);return(a.pure?H:z)(i,s,u,e,a)}var V=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e};function G(e,t,n){for(var r=t.length-1;r>=0;r--){var o=t[r](e);if(o)return o}return function(t,r){throw new Error("Invalid value of type "+typeof e+" for "+n+" argument when connecting component "+r.wrappedComponentName+".")}}function q(e,t){return e===t}var X=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e.connectHOC,n=void 0===t?E:t,r=e.mapStateToPropsFactories,o=void 0===r?j:r,a=e.mapDispatchToPropsFactories,i=void 0===a?B:a,s=e.mergePropsFactories,u=void 0===s?F:s,l=e.selectorFactory,c=void 0===l?W:l;return function(e,t,r){var a=arguments.length>3&&void 0!==arguments[3]?arguments[3]:{},s=a.pure,l=void 0===s||s,f=a.areStatesEqual,d=void 0===f?q:f,p=a.areOwnPropsEqual,h=void 0===p?T:p,g=a.areStatePropsEqual,v=void 0===g?T:g,m=a.areMergedPropsEqual,y=void 0===m?T:m,w=function(e,t){var n={};for(var r in e)t.indexOf(r)>=0||Object.prototype.hasOwnProperty.call(e,r)&&(n[r]=e[r]);return n}(a,["pure","areStatesEqual","areOwnPropsEqual","areStatePropsEqual","areMergedPropsEqual"]),b=G(e,o,"mapStateToProps"),E=G(t,i,"mapDispatchToProps"),_=G(r,u,"mergeProps");return n(c,V({methodName:"connect",getDisplayName:function(e){return"Connect("+e+")"},shouldHandleStateChanges:Boolean(e),initMapStateToProps:b,initMapDispatchToProps:E,initMergeProps:_,pure:l,areStatesEqual:d,areOwnPropsEqual:h,areStatePropsEqual:v,areMergedPropsEqual:y},w))}}();n.d(t,"Provider",function(){return l}),n.d(t,"createProvider",function(){return u}),n.d(t,"connectAdvanced",function(){return E}),n.d(t,"connect",function(){return X})},function(e,t,n){"use strict";n.r(t);var r=n(1),o=n.n(r),a=n(0),i=n.n(a),s=n(2),u=n.n(s),l=n(51),c=n.n(l),f=n(53),d=n.n(f),p=n(17),h=n.n(p),g=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}();function v(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var m=function(e){function t(){var e,n,r;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var o=arguments.length,a=Array(o),i=0;i<o;i++)a[i]=arguments[i];return n=r=v(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(a))),r._setTargetNode=function(e){r._targetNode=e},r._getTargetNode=function(){return r._targetNode},v(r,n)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,r["Component"]),g(t,[{key:"getChildContext",value:function(){return{popperManager:{setTargetNode:this._setTargetNode,getTargetNode:this._getTargetNode}}}},{key:"render",value:function(){var e=this.props,t=e.tag,n=e.children,o=function(e,t){var n={};for(var r in e)t.indexOf(r)>=0||Object.prototype.hasOwnProperty.call(e,r)&&(n[r]=e[r]);return n}(e,["tag","children"]);return!1!==t?Object(r.createElement)(t,o,n):n}}]),t}();m.childContextTypes={popperManager:i.a.object.isRequired},m.propTypes={tag:i.a.oneOfType([i.a.string,i.a.bool]),children:i.a.oneOfType([i.a.node,i.a.func])},m.defaultProps={tag:"div"};var y=m,w=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e};var b=function(e,t){var n=e.component,o=void 0===n?"div":n,a=e.innerRef,i=e.children,s=function(e,t){var n={};for(var r in e)t.indexOf(r)>=0||Object.prototype.hasOwnProperty.call(e,r)&&(n[r]=e[r]);return n}(e,["component","innerRef","children"]),u=t.popperManager,l=function(e){u.setTargetNode(e),"function"==typeof a&&a(e)};if("function"==typeof i)return i({targetProps:{ref:l},restProps:s});var c=w({},s);return"string"==typeof o?c.ref=l:c.innerRef=l,Object(r.createElement)(o,c,i)};b.contextTypes={popperManager:i.a.object.isRequired},b.propTypes={component:i.a.oneOfType([i.a.node,i.a.func]),innerRef:i.a.func,children:i.a.oneOfType([i.a.node,i.a.func])};var E=b,_=n(54),C=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},T=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}();function O(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var S=_.a.placements,N=function(e){function t(){var e,n,r;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var o=arguments.length,a=Array(o),i=0;i<o;i++)a[i]=arguments[i];return n=r=O(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(a))),r.state={},r._setArrowNode=function(e){r._arrowNode=e},r._getTargetNode=function(){if(r.props.target)return r.props.target;if(!r.context.popperManager||!r.context.popperManager.getTargetNode())throw new Error("Target missing. Popper must be given a target from the Popper Manager, or as a prop.");return r.context.popperManager.getTargetNode()},r._getOffsets=function(e){return Object.keys(e.offsets).map(function(t){return e.offsets[t]})},r._isDataDirty=function(e){return!r.state.data||JSON.stringify(r._getOffsets(r.state.data))!==JSON.stringify(r._getOffsets(e))},r._updateStateModifier={enabled:!0,order:900,fn:function(e){return r._isDataDirty(e)&&r.setState({data:e}),e}},r._getPopperStyle=function(){var e=r.state.data;return r._popper&&e?C({position:e.offsets.popper.position},e.styles):{position:"absolute",pointerEvents:"none",opacity:0}},r._getPopperPlacement=function(){return r.state.data?r.state.data.placement:void 0},r._getPopperHide=function(){return r.state.data&&r.state.data.hide?"":void 0},r._getArrowStyle=function(){if(r.state.data&&r.state.data.offsets.arrow){var e=r.state.data.offsets.arrow;return{top:e.top,left:e.left}}return{}},r._handlePopperRef=function(e){r._popperNode=e,e?r._createPopper():r._destroyPopper(),r.props.innerRef&&r.props.innerRef(e)},r._scheduleUpdate=function(){r._popper&&r._popper.scheduleUpdate()},O(r,n)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,r["Component"]),T(t,[{key:"getChildContext",value:function(){return{popper:{setArrowNode:this._setArrowNode,getArrowStyle:this._getArrowStyle}}}},{key:"componentDidUpdate",value:function(e){e.placement===this.props.placement&&e.eventsEnabled===this.props.eventsEnabled&&e.target===this.props.target||(this._destroyPopper(),this._createPopper()),e.children!==this.props.children&&this._scheduleUpdate()}},{key:"componentWillUnmount",value:function(){this._destroyPopper()}},{key:"_createPopper",value:function(){var e=this,t=this.props,n=t.placement,r=t.eventsEnabled,o=t.positionFixed,a=C({},this.props.modifiers,{applyStyle:{enabled:!1},updateState:this._updateStateModifier});this._arrowNode&&(a.arrow=C({},this.props.modifiers.arrow||{},{element:this._arrowNode})),this._popper=new _.a(this._getTargetNode(),this._popperNode,{placement:n,positionFixed:o,eventsEnabled:r,modifiers:a}),setTimeout(function(){return e._scheduleUpdate()})}},{key:"_destroyPopper",value:function(){this._popper&&this._popper.destroy()}},{key:"render",value:function(){var e=this.props,t=e.component,n=(e.innerRef,e.placement,e.eventsEnabled,e.positionFixed,e.modifiers,e.children),o=function(e,t){var n={};for(var r in e)t.indexOf(r)>=0||Object.prototype.hasOwnProperty.call(e,r)&&(n[r]=e[r]);return n}(e,["component","innerRef","placement","eventsEnabled","positionFixed","modifiers","children"]),a=this._getPopperStyle(),i=this._getPopperPlacement(),s=this._getPopperHide();if("function"==typeof n)return n({popperProps:{ref:this._handlePopperRef,style:a,"data-placement":i,"data-x-out-of-boundaries":s},restProps:o,scheduleUpdate:this._scheduleUpdate});var u=C({},o,{style:C({},o.style,a),"data-placement":i,"data-x-out-of-boundaries":s});return"string"==typeof t?u.ref=this._handlePopperRef:u.innerRef=this._handlePopperRef,Object(r.createElement)(t,u,n)}}]),t}();N.contextTypes={popperManager:i.a.object},N.childContextTypes={popper:i.a.object.isRequired},N.propTypes={component:i.a.oneOfType([i.a.node,i.a.func]),innerRef:i.a.func,placement:i.a.oneOf(S),eventsEnabled:i.a.bool,positionFixed:i.a.bool,modifiers:i.a.object,children:i.a.oneOfType([i.a.node,i.a.func]),target:i.a.oneOfType([i.a.instanceOf("undefined"!=typeof Element?Element:Object),i.a.shape({getBoundingClientRect:i.a.func.isRequired,clientWidth:i.a.number.isRequired,clientHeight:i.a.number.isRequired})])},N.defaultProps={component:"div",placement:"bottom",eventsEnabled:!0,positionFixed:!1,modifiers:{}};var A=N,P=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e};var I=function(e,t){var n=e.component,o=void 0===n?"span":n,a=e.innerRef,i=e.children,s=function(e,t){var n={};for(var r in e)t.indexOf(r)>=0||Object.prototype.hasOwnProperty.call(e,r)&&(n[r]=e[r]);return n}(e,["component","innerRef","children"]),u=t.popper,l=function(e){u.setArrowNode(e),"function"==typeof a&&a(e)},c=u.getArrowStyle();if("function"==typeof i)return i({arrowProps:{ref:l,style:c},restProps:s});var f=P({},s,{style:P({},c,s.style)});return"string"==typeof o?f.ref=l:f.innerRef=l,Object(r.createElement)(o,f,i)};I.contextTypes={popper:i.a.object.isRequired},I.propTypes={component:i.a.oneOfType([i.a.node,i.a.func]),innerRef:i.a.func,children:i.a.oneOfType([i.a.node,i.a.func])};var M=I,k=n(55),x=n.n(k);function R(){var e=this.constructor.getDerivedStateFromProps(this.props,this.state);null!==e&&void 0!==e&&this.setState(e)}function D(e){this.setState(function(t){var n=this.constructor.getDerivedStateFromProps(e,t);return null!==n&&void 0!==n?n:null}.bind(this))}function B(e,t){try{var n=this.props,r=this.state;this.props=e,this.state=t,this.__reactInternalSnapshotFlag=!0,this.__reactInternalSnapshot=this.getSnapshotBeforeUpdate(n,r)}finally{this.props=n,this.state=r}}function j(){var e=document.createElement("div");e.style.position="absolute",e.style.top="-9999px",e.style.width="50px",e.style.height="50px",e.style.overflow="scroll",document.body.appendChild(e);var t=e.offsetWidth-e.clientWidth;return document.body.removeChild(e),t}function L(e){document.body.style.paddingRight=e>0?e+"px":null}function U(){return document.body.clientWidth<window.innerWidth}function F(){var e=window.getComputedStyle(document.body,null);return parseInt(e&&e.getPropertyValue("padding-right")||0,10)}function z(){var e=j(),t=document.querySelectorAll(".fixed-top, .fixed-bottom, .is-fixed, .sticky-top")[0],n=t?parseInt(t.style.paddingRight||0,10):0;U()&&L(n+e)}R.__suppressDeprecationWarning=!0,D.__suppressDeprecationWarning=!0,B.__suppressDeprecationWarning=!0,n.d(t,"Alert",function(){return Rr}),n.d(t,"Container",function(){return ye}),n.d(t,"Row",function(){return be}),n.d(t,"Col",function(){return Se}),n.d(t,"Navbar",function(){return Pe}),n.d(t,"NavbarBrand",function(){return Me}),n.d(t,"NavbarToggler",function(){return xe}),n.d(t,"Nav",function(){return De}),n.d(t,"NavItem",function(){return je}),n.d(t,"NavDropdown",function(){return ze}),n.d(t,"NavLink",function(){return We}),n.d(t,"Breadcrumb",function(){return Ge}),n.d(t,"BreadcrumbItem",function(){return Xe}),n.d(t,"Button",function(){return Ye}),n.d(t,"ButtonDropdown",function(){return Qe}),n.d(t,"ButtonGroup",function(){return Je}),n.d(t,"ButtonToolbar",function(){return tt}),n.d(t,"Dropdown",function(){return Fe}),n.d(t,"DropdownItem",function(){return ot}),n.d(t,"DropdownMenu",function(){return lt}),n.d(t,"DropdownToggle",function(){return dt}),n.d(t,"Fade",function(){return yt}),n.d(t,"Badge",function(){return bt}),n.d(t,"Card",function(){return _t}),n.d(t,"CardLink",function(){return xt}),n.d(t,"CardGroup",function(){return Tt}),n.d(t,"CardDeck",function(){return St}),n.d(t,"CardColumns",function(){return At}),n.d(t,"CardBody",function(){return It}),n.d(t,"CardBlock",function(){return Mt}),n.d(t,"CardFooter",function(){return Dt}),n.d(t,"CardHeader",function(){return jt}),n.d(t,"CardImg",function(){return Ut}),n.d(t,"CardImgOverlay",function(){return zt}),n.d(t,"Carousel",function(){return Wt}),n.d(t,"UncontrolledCarousel",function(){return Kt}),n.d(t,"CarouselControl",function(){return Vt}),n.d(t,"CarouselItem",function(){return Ht}),n.d(t,"CarouselIndicators",function(){return Gt}),n.d(t,"CarouselCaption",function(){return qt}),n.d(t,"CardSubtitle",function(){return Zt}),n.d(t,"CardText",function(){return $t}),n.d(t,"CardTitle",function(){return en}),n.d(t,"Popover",function(){return fn}),n.d(t,"PopoverContent",function(){return mn}),n.d(t,"PopoverBody",function(){return vn}),n.d(t,"PopoverTitle",function(){return hn}),n.d(t,"PopoverHeader",function(){return pn}),n.d(t,"Progress",function(){return wn}),n.d(t,"Modal",function(){return Nn}),n.d(t,"ModalHeader",function(){return Pn}),n.d(t,"ModalBody",function(){return Mn}),n.d(t,"ModalFooter",function(){return xn}),n.d(t,"PopperContent",function(){return an}),n.d(t,"PopperTargetHelper",function(){return sn}),n.d(t,"Tooltip",function(){return jn}),n.d(t,"Table",function(){return Un}),n.d(t,"ListGroup",function(){return zn}),n.d(t,"Form",function(){return Wn}),n.d(t,"FormFeedback",function(){return qn}),n.d(t,"FormGroup",function(){return Kn}),n.d(t,"FormText",function(){return Zn}),n.d(t,"Input",function(){return $n}),n.d(t,"InputGroup",function(){return er}),n.d(t,"InputGroupAddon",function(){return or}),n.d(t,"InputGroupButton",function(){return ir}),n.d(t,"InputGroupButtonDropdown",function(){return ur}),n.d(t,"InputGroupText",function(){return nr}),n.d(t,"Label",function(){return hr}),n.d(t,"CustomInput",function(){return nn}),n.d(t,"Media",function(){return vr}),n.d(t,"Pagination",function(){return yr}),n.d(t,"PaginationItem",function(){return br}),n.d(t,"PaginationLink",function(){return _r}),n.d(t,"TabContent",function(){return Or}),n.d(t,"TabPane",function(){return Ar}),n.d(t,"Jumbotron",function(){return Ir}),n.d(t,"Collapse",function(){return Ur}),n.d(t,"ListGroupItem",function(){return Hr}),n.d(t,"ListGroupItemText",function(){return qr}),n.d(t,"ListGroupItemHeading",function(){return Vr}),n.d(t,"UncontrolledAlert",function(){return Xr}),n.d(t,"UncontrolledButtonDropdown",function(){return Kr}),n.d(t,"UncontrolledCollapse",function(){return Qr}),n.d(t,"UncontrolledDropdown",function(){return $r}),n.d(t,"UncontrolledNavDropdown",function(){return Jr}),n.d(t,"UncontrolledTooltip",function(){return eo}),n.d(t,"Util",function(){return ue});var H=void 0;function W(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"",t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:H;return t?e.split(" ").map(function(e){return t[e]||e}).join(" "):e}function V(e,t){var n={};return Object.keys(e).forEach(function(r){-1===t.indexOf(r)&&(n[r]=e[r])}),n}function G(e,t){for(var n=Array.isArray(t)?t:[t],r=n.length,o=void 0,a={};r>0;)a[o=n[r-=1]]=e[o];return a}var q={};function X(e){q[e]||("undefined"!=typeof console&&console.error(e),q[e]=!0)}function K(e,t){return function(n,r,o){null!==n[r]&&void 0!==n[r]&&X('"'+r+'" property of "'+o+'" has been deprecated.\n'+t);for(var a=arguments.length,i=Array(a>3?a-3:0),s=3;s<a;s++)i[s-3]=arguments[s];return e.apply(void 0,[n,r,o].concat(i))}}function Y(e,t,n){if(!(e[t]instanceof Element))return new Error("Invalid prop `"+t+"` supplied to `"+n+"`. Expected prop to be an instance of Element. Validation failed.")}var Z={Fade:150,Collapse:350,Modal:300,Carousel:600},Q=["in","mountOnEnter","unmountOnExit","appear","enter","exit","timeout","onEnter","onEntering","onEntered","onExit","onExiting","onExited"],$={ENTERING:"entering",ENTERED:"entered",EXITING:"exiting",EXITED:"exited"},J={esc:27,space:32,tab:9,up:38,down:40},ee=["auto-start","auto","auto-end","top-start","top","top-end","right-start","right","right-end","bottom-end","bottom","bottom-start","left-end","left","left-start"],te=!("undefined"==typeof window||!window.document||!window.document.createElement);function ne(e){if(c()(e))return e();if("string"==typeof e&&te){var t=document.querySelectorAll(e);if(t.length||(t=document.querySelectorAll("#"+e)),!t.length)throw new Error("The target '"+e+"' could not be identified in the dom, tip: check spelling");return t}return e}function re(e){return Array.isArray(e)||te&&"number"==typeof e.length}function oe(e){var t=ne(e);return re(t)?t[0]:t}var ae=["touchstart","click"];function ie(e,t,n){var r=e;re(r)||(r=[r]);var o=n;if("string"==typeof o&&(o=o.split(/\s+/)),!re(r)||"function"!=typeof t||!Array.isArray(o))throw new Error("\n      The first argument of this function must be DOM node or an array on DOM nodes or NodeList.\n      The second must be a function.\n      The third is a string or an array of strings that represents DOM events\n    ");return o.forEach(function(e){r.forEach(function(n){n.addEventListener(e,t)})}),function(){o.forEach(function(e){r.forEach(function(n){n.removeEventListener(e,t)})})}}var se=["a[href]","area[href]","input:not([disabled]):not([type=hidden])","select:not([disabled])","textarea:not([disabled])","button:not([disabled])","object","embed","[tabindex]:not(.modal)","audio[controls]","video[controls]",'[contenteditable]:not([contenteditable="false"])'],ue=Object.freeze({getScrollbarWidth:j,setScrollbarWidth:L,isBodyOverflowing:U,getOriginalBodyPadding:F,conditionallyUpdateScrollbar:z,setGlobalCssModule:function(e){H=e},mapToCssModules:W,omit:V,pick:G,warnOnce:X,deprecated:K,DOMElement:Y,TransitionTimeouts:Z,TransitionPropTypeKeys:Q,TransitionStatuses:$,keyCodes:J,PopperPlacements:ee,canUseDOM:te,findDOMElements:ne,isArrayOrNodeList:re,getTarget:oe,defaultToggleEvents:ae,addMultipleEventListeners:ie,focusableElements:se}),le="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},ce=function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")},fe=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),de=function(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e},pe=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},he=function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)},ge=function(e,t){var n={};for(var r in e)t.indexOf(r)>=0||Object.prototype.hasOwnProperty.call(e,r)&&(n[r]=e[r]);return n},ve=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t},me={tag:i.a.oneOfType([i.a.func,i.a.string]),fluid:i.a.bool,className:i.a.string,cssModule:i.a.object},ye=function(e){var t=e.className,n=e.cssModule,r=e.fluid,a=e.tag,i=ge(e,["className","cssModule","fluid","tag"]),s=W(u()(t,r?"container-fluid":"container"),n);return o.a.createElement(a,pe({},i,{className:s}))};ye.propTypes=me,ye.defaultProps={tag:"div"};var we={tag:i.a.oneOfType([i.a.func,i.a.string]),noGutters:i.a.bool,className:i.a.string,cssModule:i.a.object},be=function(e){var t=e.className,n=e.cssModule,r=e.noGutters,a=e.tag,i=ge(e,["className","cssModule","noGutters","tag"]),s=W(u()(t,r?"no-gutters":null,"row"),n);return o.a.createElement(a,pe({},i,{className:s}))};be.propTypes=we,be.defaultProps={tag:"div"};var Ee=i.a.oneOfType([i.a.number,i.a.string]),_e=i.a.oneOfType([i.a.bool,i.a.number,i.a.string,i.a.shape({size:i.a.oneOfType([i.a.bool,i.a.number,i.a.string]),push:K(Ee,'Please use the prop "order"'),pull:K(Ee,'Please use the prop "order"'),order:Ee,offset:Ee})]),Ce={tag:i.a.oneOfType([i.a.func,i.a.string]),xs:_e,sm:_e,md:_e,lg:_e,xl:_e,className:i.a.string,cssModule:i.a.object,widths:i.a.array},Te={tag:"div",widths:["xs","sm","md","lg","xl"]},Oe=function(e,t,n){return!0===n||""===n?e?"col":"col-"+t:"auto"===n?e?"col-auto":"col-"+t+"-auto":e?"col-"+n:"col-"+t+"-"+n},Se=function(e){var t=e.className,n=e.cssModule,r=e.widths,a=e.tag,i=ge(e,["className","cssModule","widths","tag"]),s=[];r.forEach(function(t,r){var o=e[t];if(delete i[t],o||""===o){var a=!r;if(d()(o)){var l,c=a?"-":"-"+t+"-",f=Oe(a,t,o.size);s.push(W(u()((de(l={},f,o.size||""===o.size),de(l,"order"+c+o.order,o.order||0===o.order),de(l,"offset"+c+o.offset,o.offset||0===o.offset),l)),n))}else{var p=Oe(a,t,o);s.push(p)}}}),s.length||s.push("col");var l=W(u()(t,s),n);return o.a.createElement(a,pe({},i,{className:l}))};Se.propTypes=Ce,Se.defaultProps=Te;var Ne={light:i.a.bool,dark:i.a.bool,inverse:K(i.a.bool,'Please use the prop "dark"'),full:i.a.bool,fixed:i.a.string,sticky:i.a.string,color:i.a.string,role:i.a.string,tag:i.a.oneOfType([i.a.func,i.a.string]),className:i.a.string,cssModule:i.a.object,toggleable:K(i.a.oneOfType([i.a.bool,i.a.string]),'Please use the prop "expand"'),expand:i.a.oneOfType([i.a.bool,i.a.string])},Ae={xs:"sm",sm:"md",md:"lg",lg:"xl"},Pe=function(e){var t,n=e.toggleable,r=e.expand,a=e.className,i=e.cssModule,s=e.light,l=e.dark,c=e.inverse,f=e.fixed,d=e.sticky,p=e.color,h=e.tag,g=ge(e,["toggleable","expand","className","cssModule","light","dark","inverse","fixed","sticky","color","tag"]),v=W(u()(a,"navbar",function(e){return!1!==e&&(!0===e||"xs"===e?"navbar-expand":"navbar-expand-"+e)}(r)||function(e){return void 0!==e&&"xl"!==e&&(!1===e?"navbar-expand":"navbar-expand-"+(!0===e?"sm":Ae[e]||e))}(n),(de(t={"navbar-light":s,"navbar-dark":c||l},"bg-"+p,p),de(t,"fixed-"+f,f),de(t,"sticky-"+d,d),t)),i);return o.a.createElement(h,pe({},g,{className:v}))};Pe.propTypes=Ne,Pe.defaultProps={tag:"nav",expand:!1};var Ie={tag:i.a.oneOfType([i.a.func,i.a.string]),className:i.a.string,cssModule:i.a.object},Me=function(e){var t=e.className,n=e.cssModule,r=e.tag,a=ge(e,["className","cssModule","tag"]),i=W(u()(t,"navbar-brand"),n);return o.a.createElement(r,pe({},a,{className:i}))};Me.propTypes=Ie,Me.defaultProps={tag:"a"};var ke={tag:i.a.oneOfType([i.a.func,i.a.string]),type:i.a.string,className:i.a.string,cssModule:i.a.object,children:i.a.node},xe=function(e){var t=e.className,n=e.cssModule,r=e.children,a=e.tag,i=ge(e,["className","cssModule","children","tag"]),s=W(u()(t,"navbar-toggler"),n);return o.a.createElement(a,pe({},i,{className:s}),r||o.a.createElement("span",{className:W("navbar-toggler-icon",n)}))};xe.propTypes=ke,xe.defaultProps={tag:"button",type:"button"};var Re={tabs:i.a.bool,pills:i.a.bool,vertical:i.a.oneOfType([i.a.bool,i.a.string]),horizontal:i.a.string,justified:i.a.bool,fill:i.a.bool,navbar:i.a.bool,card:i.a.bool,tag:i.a.oneOfType([i.a.func,i.a.string]),className:i.a.string,cssModule:i.a.object},De=function(e){var t=e.className,n=e.cssModule,r=e.tabs,a=e.pills,i=e.vertical,s=e.horizontal,l=e.justified,c=e.fill,f=e.navbar,d=e.card,p=e.tag,h=ge(e,["className","cssModule","tabs","pills","vertical","horizontal","justified","fill","navbar","card","tag"]),g=W(u()(t,f?"navbar-nav":"nav",!!s&&"justify-content-"+s,function(e){return!1!==e&&(!0===e||"xs"===e?"flex-column":"flex-"+e+"-column")}(i),{"nav-tabs":r,"card-header-tabs":d&&r,"nav-pills":a,"card-header-pills":d&&a,"nav-justified":l,"nav-fill":c}),n);return o.a.createElement(p,pe({},h,{className:g}))};De.propTypes=Re,De.defaultProps={tag:"ul",vertical:!1};var Be={tag:i.a.oneOfType([i.a.func,i.a.string]),active:i.a.bool,className:i.a.string,cssModule:i.a.object},je=function(e){var t=e.className,n=e.cssModule,r=e.active,a=e.tag,i=ge(e,["className","cssModule","active","tag"]),s=W(u()(t,"nav-item",!!r&&"active"),n);return o.a.createElement(a,pe({},i,{className:s}))};je.propTypes=Be,je.defaultProps={tag:"li"};var Le={disabled:i.a.bool,dropup:K(i.a.bool,'Please use the prop "direction" with the value "up".'),direction:i.a.oneOf(["up","down","left","right"]),group:i.a.bool,isOpen:i.a.bool,nav:i.a.bool,active:i.a.bool,addonType:i.a.oneOfType([i.a.bool,i.a.oneOf(["prepend","append"])]),size:i.a.string,tag:i.a.string,toggle:i.a.func,children:i.a.node,className:i.a.string,cssModule:i.a.object,inNavbar:i.a.bool,setActiveFromChild:i.a.bool},Ue={toggle:i.a.func.isRequired,isOpen:i.a.bool.isRequired,direction:i.a.oneOf(["up","down","left","right"]).isRequired,inNavbar:i.a.bool.isRequired},Fe=function(e){function t(e){ce(this,t);var n=ve(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.addEvents=n.addEvents.bind(n),n.handleDocumentClick=n.handleDocumentClick.bind(n),n.handleKeyDown=n.handleKeyDown.bind(n),n.removeEvents=n.removeEvents.bind(n),n.toggle=n.toggle.bind(n),n}return he(t,e),fe(t,[{key:"getChildContext",value:function(){return{toggle:this.props.toggle,isOpen:this.props.isOpen,direction:"down"===this.props.direction&&this.props.dropup?"up":this.props.direction,inNavbar:this.props.inNavbar}}},{key:"componentDidMount",value:function(){this.handleProps()}},{key:"componentDidUpdate",value:function(e){this.props.isOpen!==e.isOpen&&this.handleProps()}},{key:"componentWillUnmount",value:function(){this.removeEvents()}},{key:"getContainer",value:function(){return h.a.findDOMNode(this)}},{key:"addEvents",value:function(){var e=this;["click","touchstart","keyup"].forEach(function(t){return document.addEventListener(t,e.handleDocumentClick,!0)})}},{key:"removeEvents",value:function(){var e=this;["click","touchstart","keyup"].forEach(function(t){return document.removeEventListener(t,e.handleDocumentClick,!0)})}},{key:"handleDocumentClick",value:function(e){if(!e||3!==e.which&&("keyup"!==e.type||e.which===J.tab)){var t=this.getContainer();(!t.contains(e.target)||t===e.target||"keyup"===e.type&&e.which!==J.tab)&&this.toggle(e)}}},{key:"handleKeyDown",value:function(e){if(!(J.tab===e.which||/button/i.test(e.target.tagName)&&e.which===J.space||/input|textarea/i.test(e.target.tagName)||(e.preventDefault(),this.props.disabled))){var t=this.getContainer();if(e.which===J.space&&this.props.isOpen&&t!==e.target&&e.target.click(),e.which===J.esc||!this.props.isOpen)return this.toggle(e),void t.querySelector("[aria-expanded]").focus();var n=W("dropdown-menu",this.props.cssModule),r=W("dropdown-item",this.props.cssModule),o=W("disabled",this.props.cssModule),a=t.querySelectorAll("."+n+" ."+r+":not(."+o+")");if(a.length){for(var i=-1,s=String.fromCharCode(e.which).toLowerCase(),u=0;u<a.length;u+=1){if((a[u].textContent&&a[u].textContent[0].toLowerCase())===s||a[u]===e.target){i=u;break}}e.which===J.up&&i>0&&(i-=1),e.which===J.down&&i<a.length-1&&(i+=1),i<0&&(i=0),a[i].focus()}}}},{key:"handleProps",value:function(){this.props.isOpen?this.addEvents():this.removeEvents()}},{key:"toggle",value:function(e){return this.props.disabled?e&&e.preventDefault():this.props.toggle(e)}},{key:"render",value:function(){var e,t=V(this.props,["toggle","disabled","inNavbar","direction"]),n=t.className,r=t.cssModule,a=t.dropup,i=t.isOpen,s=t.group,l=t.size,c=t.nav,f=t.setActiveFromChild,d=t.active,p=t.addonType,h=ge(t,["className","cssModule","dropup","isOpen","group","size","nav","setActiveFromChild","active","addonType"]),g="down"===this.props.direction&&a?"up":this.props.direction;h.tag=h.tag||(c?"li":"div");var v=!1;f&&o.a.Children.map(this.props.children[1].props.children,function(e){e.props.active&&(v=!0)});var m=W(u()(n,"down"!==g&&"drop"+g,!(!c||!d)&&"active",!(!f||!v)&&"active",(de(e={},"input-group-"+p,p),de(e,"btn-group",s),de(e,"btn-group-"+l,!!l),de(e,"dropdown",!s&&!p),de(e,"show",i),de(e,"nav-item",c),e)),r);return o.a.createElement(y,pe({},h,{className:m,onKeyDown:this.handleKeyDown}))}}]),t}(o.a.Component);function ze(e){return X('The "NavDropdown" component has been deprecated.\nPlease use component "Dropdown" with nav prop.'),o.a.createElement(Fe,pe({nav:!0},e))}Fe.propTypes=Le,Fe.defaultProps={isOpen:!1,direction:"down",nav:!1,active:!1,addonType:!1,inNavbar:!1,setActiveFromChild:!1},Fe.childContextTypes=Ue;var He={tag:i.a.oneOfType([i.a.func,i.a.string]),innerRef:i.a.oneOfType([i.a.object,i.a.func,i.a.string]),disabled:i.a.bool,active:i.a.bool,className:i.a.string,cssModule:i.a.object,onClick:i.a.func,href:i.a.any},We=function(e){function t(e){ce(this,t);var n=ve(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.onClick=n.onClick.bind(n),n}return he(t,e),fe(t,[{key:"onClick",value:function(e){this.props.disabled?e.preventDefault():("#"===this.props.href&&e.preventDefault(),this.props.onClick&&this.props.onClick(e))}},{key:"render",value:function(){var e=this.props,t=e.className,n=e.cssModule,r=e.active,a=e.tag,i=e.innerRef,s=ge(e,["className","cssModule","active","tag","innerRef"]),l=W(u()(t,"nav-link",{disabled:s.disabled,active:r}),n);return o.a.createElement(a,pe({},s,{ref:i,onClick:this.onClick,className:l}))}}]),t}(o.a.Component);We.propTypes=He,We.defaultProps={tag:"a"};var Ve={tag:i.a.oneOfType([i.a.func,i.a.string]),listTag:i.a.oneOfType([i.a.func,i.a.string]),className:i.a.string,listClassName:i.a.string,cssModule:i.a.object,children:i.a.node,"aria-label":i.a.string},Ge=function(e){var t=e.className,n=e.listClassName,r=e.cssModule,a=e.children,i=e.tag,s=e.listTag,l=e["aria-label"],c=ge(e,["className","listClassName","cssModule","children","tag","listTag","aria-label"]),f=W(u()(t),r),d=W(u()("breadcrumb",n),r);return o.a.createElement(i,pe({},c,{className:f,"aria-label":l}),o.a.createElement(s,{className:d},a))};Ge.propTypes=Ve,Ge.defaultProps={tag:"nav",listTag:"ol","aria-label":"breadcrumb"};var qe={tag:i.a.oneOfType([i.a.func,i.a.string]),active:i.a.bool,className:i.a.string,cssModule:i.a.object},Xe=function(e){var t=e.className,n=e.cssModule,r=e.active,a=e.tag,i=ge(e,["className","cssModule","active","tag"]),s=W(u()(t,!!r&&"active","breadcrumb-item"),n);return o.a.createElement(a,pe({},i,{className:s,"aria-current":r?"page":void 0}))};Xe.propTypes=qe,Xe.defaultProps={tag:"li"};var Ke={active:i.a.bool,block:i.a.bool,color:i.a.string,disabled:i.a.bool,outline:i.a.bool,tag:i.a.oneOfType([i.a.func,i.a.string]),innerRef:i.a.oneOfType([i.a.object,i.a.func,i.a.string]),onClick:i.a.func,size:i.a.string,children:i.a.node,className:i.a.string,cssModule:i.a.object},Ye=function(e){function t(e){ce(this,t);var n=ve(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.onClick=n.onClick.bind(n),n}return he(t,e),fe(t,[{key:"onClick",value:function(e){this.props.disabled?e.preventDefault():this.props.onClick&&this.props.onClick(e)}},{key:"render",value:function(){var e=this.props,t=e.active,n=e.block,r=e.className,a=e.cssModule,i=e.color,s=e.outline,l=e.size,c=e.tag,f=e.innerRef,d=ge(e,["active","block","className","cssModule","color","outline","size","tag","innerRef"]),p=W(u()(r,"btn","btn"+(s?"-outline":"")+"-"+i,!!l&&"btn-"+l,!!n&&"btn-block",{active:t,disabled:this.props.disabled}),a);return d.href&&"button"===c&&(c="a"),o.a.createElement(c,pe({type:"button"===c&&d.onClick?"button":void 0},d,{className:p,ref:f,onClick:this.onClick}))}}]),t}(o.a.Component);Ye.propTypes=Ke,Ye.defaultProps={color:"secondary",tag:"button"};var Ze={children:i.a.node},Qe=function(e){return o.a.createElement(Fe,pe({group:!0},e))};Qe.propTypes=Ze;var $e={tag:i.a.oneOfType([i.a.func,i.a.string]),"aria-label":i.a.string,className:i.a.string,cssModule:i.a.object,role:i.a.string,size:i.a.string,vertical:i.a.bool},Je=function(e){var t=e.className,n=e.cssModule,r=e.size,a=e.vertical,i=e.tag,s=ge(e,["className","cssModule","size","vertical","tag"]),l=W(u()(t,!!r&&"btn-group-"+r,a?"btn-group-vertical":"btn-group"),n);return o.a.createElement(i,pe({},s,{className:l}))};Je.propTypes=$e,Je.defaultProps={tag:"div",role:"group"};var et={tag:i.a.oneOfType([i.a.func,i.a.string]),"aria-label":i.a.string,className:i.a.string,cssModule:i.a.object,role:i.a.string},tt=function(e){var t=e.className,n=e.cssModule,r=e.tag,a=ge(e,["className","cssModule","tag"]),i=W(u()(t,"btn-toolbar"),n);return o.a.createElement(r,pe({},a,{className:i}))};tt.propTypes=et,tt.defaultProps={tag:"div",role:"toolbar"};var nt={children:i.a.node,active:i.a.bool,disabled:i.a.bool,divider:i.a.bool,tag:i.a.oneOfType([i.a.func,i.a.string]),header:i.a.bool,onClick:i.a.func,className:i.a.string,cssModule:i.a.object,toggle:i.a.bool},rt={toggle:i.a.func},ot=function(e){function t(e){ce(this,t);var n=ve(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.onClick=n.onClick.bind(n),n.getTabIndex=n.getTabIndex.bind(n),n}return he(t,e),fe(t,[{key:"onClick",value:function(e){this.props.disabled||this.props.header||this.props.divider?e.preventDefault():(this.props.onClick&&this.props.onClick(e),this.props.toggle&&this.context.toggle(e))}},{key:"getTabIndex",value:function(){return this.props.disabled||this.props.header||this.props.divider?"-1":"0"}},{key:"render",value:function(){var e=this.getTabIndex(),t=V(this.props,["toggle"]),n=t.className,r=t.cssModule,a=t.divider,i=t.tag,s=t.header,l=t.active,c=ge(t,["className","cssModule","divider","tag","header","active"]),f=W(u()(n,{disabled:c.disabled,"dropdown-item":!a&&!s,active:l,"dropdown-header":s,"dropdown-divider":a}),r);return"button"===i&&(s?i="h6":a?i="div":c.href&&(i="a")),o.a.createElement(i,pe({type:"button"===i&&(c.onClick||this.props.toggle)?"button":void 0},c,{tabIndex:e,className:f,onClick:this.onClick}))}}]),t}(o.a.Component);ot.propTypes=nt,ot.defaultProps={tag:"button",toggle:!0},ot.contextTypes=rt;var at={tag:i.a.string,children:i.a.node.isRequired,right:i.a.bool,flip:i.a.bool,modifiers:i.a.object,className:i.a.string,cssModule:i.a.object,persist:i.a.bool},it={isOpen:i.a.bool.isRequired,direction:i.a.oneOf(["up","down","left","right"]).isRequired,inNavbar:i.a.bool.isRequired},st={flip:{enabled:!1}},ut={up:"top",left:"left",right:"right",down:"bottom"},lt=function(e,t){var n=e.className,r=e.cssModule,a=e.right,i=e.tag,s=e.flip,l=e.modifiers,c=e.persist,f=ge(e,["className","cssModule","right","tag","flip","modifiers","persist"]),d=W(u()(n,"dropdown-menu",{"dropdown-menu-right":a,show:t.isOpen}),r),p=i;if(c||t.isOpen&&!t.inNavbar){p=A;var h=ut[t.direction]||"bottom",g=a?"end":"start";f.placement=h+"-"+g,f.component=i,f.modifiers=s?l:pe({},l,st)}return o.a.createElement(p,pe({tabIndex:"-1",role:"menu"},f,{"aria-hidden":!t.isOpen,className:d,"x-placement":f.placement}))};lt.propTypes=at,lt.defaultProps={tag:"div",flip:!0},lt.contextTypes=it;var ct={caret:i.a.bool,color:i.a.string,children:i.a.node,className:i.a.string,cssModule:i.a.object,disabled:i.a.bool,onClick:i.a.func,"aria-haspopup":i.a.bool,split:i.a.bool,tag:i.a.oneOfType([i.a.func,i.a.string]),nav:i.a.bool},ft={isOpen:i.a.bool.isRequired,toggle:i.a.func.isRequired,inNavbar:i.a.bool.isRequired},dt=function(e){function t(e){ce(this,t);var n=ve(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.onClick=n.onClick.bind(n),n}return he(t,e),fe(t,[{key:"onClick",value:function(e){this.props.disabled?e.preventDefault():(this.props.nav&&!this.props.tag&&e.preventDefault(),this.props.onClick&&this.props.onClick(e),this.context.toggle(e))}},{key:"render",value:function(){var e=this.props,t=e.className,n=e.color,r=e.cssModule,a=e.caret,i=e.split,s=e.nav,l=e.tag,c=ge(e,["className","color","cssModule","caret","split","nav","tag"]),f=c["aria-label"]||"Toggle Dropdown",d=W(u()(t,{"dropdown-toggle":a||i,"dropdown-toggle-split":i,"nav-link":s}),r),p=c.children||o.a.createElement("span",{className:"sr-only"},f),h=void 0;return s&&!l?(h="a",c.href="#"):l?h=l:(h=Ye,c.color=n,c.cssModule=r),this.context.inNavbar?o.a.createElement(h,pe({},c,{className:d,onClick:this.onClick,"aria-expanded":this.context.isOpen,children:p})):o.a.createElement(E,pe({},c,{className:d,component:h,onClick:this.onClick,"aria-expanded":this.context.isOpen,children:p}))}}]),t}(o.a.Component);function pt(e){return e&&e.__esModule&&Object.prototype.hasOwnProperty.call(e,"default")?e.default:e}function ht(e,t){return e(t={exports:{}},t.exports),t.exports}dt.propTypes=ct,dt.defaultProps={"aria-haspopup":!0,color:"secondary"},dt.contextTypes=ft,pt(ht(function(e,t){t.__esModule=!0,t.classNamesShape=t.timeoutsShape=void 0,t.transitionTimeout=function(e){var t="transition"+e+"Timeout",n="transition"+e;return function(e){if(e[n]){if(null==e[t])return new Error(t+" wasn't supplied to CSSTransitionGroup: this can cause unreliable animations and won't be supported in a future version of React. See https://fb.me/react-animation-transition-group-timeout for more information.");if("number"!=typeof e[t])return new Error(t+" must be a number (in milliseconds)")}return null}};var n=function(e){return e&&e.__esModule?e:{default:e}}(i.a);t.timeoutsShape=n.default.oneOfType([n.default.number,n.default.shape({enter:n.default.number,exit:n.default.number}).isRequired]),t.classNamesShape=n.default.oneOfType([n.default.string,n.default.shape({enter:n.default.string,exit:n.default.string,active:n.default.string}),n.default.shape({enter:n.default.string,enterDone:n.default.string,enterActive:n.default.string,exit:n.default.string,exitDone:n.default.string,exitActive:n.default.string})])}));var gt=pt(ht(function(e,t){t.__esModule=!0,t.EXITING=t.ENTERED=t.ENTERING=t.EXITED=t.UNMOUNTED=void 0;var n=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t}(i.a),r=s(o.a),a=s(h.a);function s(e){return e&&e.__esModule?e:{default:e}}var u=t.UNMOUNTED="unmounted",l=t.EXITED="exited",c=t.ENTERING="entering",f=t.ENTERED="entered",d=t.EXITING="exiting",p=function(e){function t(n,r){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var o=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!==(void 0===t?"undefined":le(t))&&"function"!=typeof t?e:t}(this,e.call(this,n,r)),a=r.transitionGroup,i=a&&!a.isMounting?n.enter:n.appear,s=void 0;return o.nextStatus=null,n.in?i?(s=l,o.nextStatus=c):s=f:s=n.unmountOnExit||n.mountOnEnter?u:l,o.state={status:s},o.nextCallback=null,o}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+(void 0===t?"undefined":le(t)));e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.getChildContext=function(){return{transitionGroup:null}},t.prototype.componentDidMount=function(){this.updateStatus(!0)},t.prototype.componentWillReceiveProps=function(e){var t=(this.pendingState||this.state).status;e.in?(t===u&&this.setState({status:l}),t!==c&&t!==f&&(this.nextStatus=c)):t!==c&&t!==f||(this.nextStatus=d)},t.prototype.componentDidUpdate=function(){this.updateStatus()},t.prototype.componentWillUnmount=function(){this.cancelNextCallback()},t.prototype.getTimeouts=function(){var e=this.props.timeout,t=void 0,n=void 0,r=void 0;return t=n=r=e,null!=e&&"number"!=typeof e&&(t=e.exit,n=e.enter,r=e.appear),{exit:t,enter:n,appear:r}},t.prototype.updateStatus=function(){var e=arguments.length>0&&void 0!==arguments[0]&&arguments[0],t=this.nextStatus;if(null!==t){this.nextStatus=null,this.cancelNextCallback();var n=a.default.findDOMNode(this);t===c?this.performEnter(n,e):this.performExit(n)}else this.props.unmountOnExit&&this.state.status===l&&this.setState({status:u})},t.prototype.performEnter=function(e,t){var n=this,r=this.props.enter,o=this.context.transitionGroup?this.context.transitionGroup.isMounting:t,a=this.getTimeouts();t||r?(this.props.onEnter(e,o),this.safeSetState({status:c},function(){n.props.onEntering(e,o),n.onTransitionEnd(e,a.enter,function(){n.safeSetState({status:f},function(){n.props.onEntered(e,o)})})})):this.safeSetState({status:f},function(){n.props.onEntered(e)})},t.prototype.performExit=function(e){var t=this,n=this.props.exit,r=this.getTimeouts();n?(this.props.onExit(e),this.safeSetState({status:d},function(){t.props.onExiting(e),t.onTransitionEnd(e,r.exit,function(){t.safeSetState({status:l},function(){t.props.onExited(e)})})})):this.safeSetState({status:l},function(){t.props.onExited(e)})},t.prototype.cancelNextCallback=function(){null!==this.nextCallback&&(this.nextCallback.cancel(),this.nextCallback=null)},t.prototype.safeSetState=function(e,t){var n=this;this.pendingState=e,t=this.setNextCallback(t),this.setState(e,function(){n.pendingState=null,t()})},t.prototype.setNextCallback=function(e){var t=this,n=!0;return this.nextCallback=function(r){n&&(n=!1,t.nextCallback=null,e(r))},this.nextCallback.cancel=function(){n=!1},this.nextCallback},t.prototype.onTransitionEnd=function(e,t,n){this.setNextCallback(n),e?(this.props.addEndListener&&this.props.addEndListener(e,this.nextCallback),null!=t&&setTimeout(this.nextCallback,t)):setTimeout(this.nextCallback,0)},t.prototype.render=function(){var e=this.state.status;if(e===u)return null;var t=this.props,n=t.children,o=function(e,t){var n={};for(var r in e)t.indexOf(r)>=0||Object.prototype.hasOwnProperty.call(e,r)&&(n[r]=e[r]);return n}(t,["children"]);if(delete o.in,delete o.mountOnEnter,delete o.unmountOnExit,delete o.appear,delete o.enter,delete o.exit,delete o.timeout,delete o.addEndListener,delete o.onEnter,delete o.onEntering,delete o.onEntered,delete o.onExit,delete o.onExiting,delete o.onExited,"function"==typeof n)return n(e,o);var a=r.default.Children.only(n);return r.default.cloneElement(a,o)},t}(r.default.Component);function g(){}p.contextTypes={transitionGroup:n.object},p.childContextTypes={transitionGroup:function(){}},p.propTypes={},p.defaultProps={in:!1,mountOnEnter:!1,unmountOnExit:!1,appear:!1,enter:!0,exit:!0,onEnter:g,onEntering:g,onEntered:g,onExit:g,onExiting:g,onExited:g},p.UNMOUNTED=0,p.EXITED=1,p.ENTERING=2,p.ENTERED=3,p.EXITING=4,t.default=p})),vt=pe({},gt.propTypes,{children:i.a.oneOfType([i.a.arrayOf(i.a.node),i.a.node]),tag:i.a.oneOfType([i.a.string,i.a.func]),baseClass:i.a.string,baseClassActive:i.a.string,className:i.a.string,cssModule:i.a.object,innerRef:i.a.oneOfType([i.a.object,i.a.string,i.a.func])}),mt=pe({},gt.defaultProps,{tag:"div",baseClass:"fade",baseClassActive:"show",timeout:Z.Fade,appear:!0,enter:!0,exit:!0,in:!0});function yt(e){var t=e.tag,n=e.baseClass,r=e.baseClassActive,a=e.className,i=e.cssModule,s=e.children,l=e.innerRef,c=ge(e,["tag","baseClass","baseClassActive","className","cssModule","children","innerRef"]),f=G(c,Q),d=V(c,Q);return o.a.createElement(gt,f,function(e){var c="entered"===e,f=W(u()(a,n,c&&r),i);return o.a.createElement(t,pe({className:f},d,{ref:l}),s)})}yt.propTypes=vt,yt.defaultProps=mt;var wt={color:i.a.string,pill:i.a.bool,tag:i.a.oneOfType([i.a.func,i.a.string]),children:i.a.node,className:i.a.string,cssModule:i.a.object},bt=function(e){var t=e.className,n=e.cssModule,r=e.color,a=e.pill,i=e.tag,s=ge(e,["className","cssModule","color","pill","tag"]),l=W(u()(t,"badge","badge-"+r,!!a&&"badge-pill"),n);return s.href&&"span"===i&&(i="a"),o.a.createElement(i,pe({},s,{className:l}))};bt.propTypes=wt,bt.defaultProps={color:"secondary",pill:!1,tag:"span"};var Et={tag:i.a.oneOfType([i.a.func,i.a.string]),inverse:i.a.bool,color:i.a.string,block:K(i.a.bool,'Please use the props "body"'),body:i.a.bool,outline:i.a.bool,className:i.a.string,cssModule:i.a.object,innerRef:i.a.oneOfType([i.a.object,i.a.string,i.a.func])},_t=function(e){var t=e.className,n=e.cssModule,r=e.color,a=e.block,i=e.body,s=e.inverse,l=e.outline,c=e.tag,f=e.innerRef,d=ge(e,["className","cssModule","color","block","body","inverse","outline","tag","innerRef"]),p=W(u()(t,"card",!!s&&"text-white",!(!a&&!i)&&"card-body",!!r&&(l?"border":"bg")+"-"+r),n);return o.a.createElement(c,pe({},d,{className:p,ref:f}))};_t.propTypes=Et,_t.defaultProps={tag:"div"};var Ct={tag:i.a.oneOfType([i.a.func,i.a.string]),className:i.a.string,cssModule:i.a.object},Tt=function(e){var t=e.className,n=e.cssModule,r=e.tag,a=ge(e,["className","cssModule","tag"]),i=W(u()(t,"card-group"),n);return o.a.createElement(r,pe({},a,{className:i}))};Tt.propTypes=Ct,Tt.defaultProps={tag:"div"};var Ot={tag:i.a.oneOfType([i.a.func,i.a.string]),className:i.a.string,cssModule:i.a.object},St=function(e){var t=e.className,n=e.cssModule,r=e.tag,a=ge(e,["className","cssModule","tag"]),i=W(u()(t,"card-deck"),n);return o.a.createElement(r,pe({},a,{className:i}))};St.propTypes=Ot,St.defaultProps={tag:"div"};var Nt={tag:i.a.oneOfType([i.a.func,i.a.string]),className:i.a.string,cssModule:i.a.object},At=function(e){var t=e.className,n=e.cssModule,r=e.tag,a=ge(e,["className","cssModule","tag"]),i=W(u()(t,"card-columns"),n);return o.a.createElement(r,pe({},a,{className:i}))};At.propTypes=Nt,At.defaultProps={tag:"div"};var Pt={tag:i.a.oneOfType([i.a.func,i.a.string]),className:i.a.string,cssModule:i.a.object},It=function(e){var t=e.className,n=e.cssModule,r=e.tag,a=ge(e,["className","cssModule","tag"]),i=W(u()(t,"card-body"),n);return o.a.createElement(r,pe({},a,{className:i}))};function Mt(e){return X('The "CardBlock" component has been deprecated.\nPlease use component "CardBody".'),o.a.createElement(It,e)}It.propTypes=Pt,It.defaultProps={tag:"div"};var kt={tag:i.a.oneOfType([i.a.func,i.a.string]),innerRef:i.a.oneOfType([i.a.object,i.a.func,i.a.string]),className:i.a.string,cssModule:i.a.object},xt=function(e){var t=e.className,n=e.cssModule,r=e.tag,a=e.innerRef,i=ge(e,["className","cssModule","tag","innerRef"]),s=W(u()(t,"card-link"),n);return o.a.createElement(r,pe({},i,{ref:a,className:s}))};xt.propTypes=kt,xt.defaultProps={tag:"a"};var Rt={tag:i.a.oneOfType([i.a.func,i.a.string]),className:i.a.string,cssModule:i.a.object},Dt=function(e){var t=e.className,n=e.cssModule,r=e.tag,a=ge(e,["className","cssModule","tag"]),i=W(u()(t,"card-footer"),n);return o.a.createElement(r,pe({},a,{className:i}))};Dt.propTypes=Rt,Dt.defaultProps={tag:"div"};var Bt={tag:i.a.oneOfType([i.a.func,i.a.string]),className:i.a.string,cssModule:i.a.object},jt=function(e){var t=e.className,n=e.cssModule,r=e.tag,a=ge(e,["className","cssModule","tag"]),i=W(u()(t,"card-header"),n);return o.a.createElement(r,pe({},a,{className:i}))};jt.propTypes=Bt,jt.defaultProps={tag:"div"};var Lt={tag:i.a.oneOfType([i.a.func,i.a.string]),top:i.a.bool,bottom:i.a.bool,className:i.a.string,cssModule:i.a.object},Ut=function(e){var t=e.className,n=e.cssModule,r=e.top,a=e.bottom,i=e.tag,s=ge(e,["className","cssModule","top","bottom","tag"]),l="card-img";r&&(l="card-img-top"),a&&(l="card-img-bottom");var c=W(u()(t,l),n);return o.a.createElement(i,pe({},s,{className:c}))};Ut.propTypes=Lt,Ut.defaultProps={tag:"img"};var Ft={tag:i.a.oneOfType([i.a.func,i.a.string]),className:i.a.string,cssModule:i.a.object},zt=function(e){var t=e.className,n=e.cssModule,r=e.tag,a=ge(e,["className","cssModule","tag"]),i=W(u()(t,"card-img-overlay"),n);return o.a.createElement(r,pe({},a,{className:i}))};zt.propTypes=Ft,zt.defaultProps={tag:"div"};var Ht=function(e){function t(e){ce(this,t);var n=ve(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.state={startAnimation:!1},n.onEnter=n.onEnter.bind(n),n.onEntering=n.onEntering.bind(n),n.onExit=n.onExit.bind(n),n.onExiting=n.onExiting.bind(n),n.onExited=n.onExited.bind(n),n}return he(t,e),fe(t,[{key:"onEnter",value:function(e,t){this.setState({startAnimation:!1}),this.props.onEnter(e,t)}},{key:"onEntering",value:function(e,t){var n=e.offsetHeight;return this.setState({startAnimation:!0}),this.props.onEntering(e,t),n}},{key:"onExit",value:function(e){this.setState({startAnimation:!1}),this.props.onExit(e)}},{key:"onExiting",value:function(e){this.setState({startAnimation:!0}),e.dispatchEvent(new CustomEvent("slide.bs.carousel")),this.props.onExiting(e)}},{key:"onExited",value:function(e){e.dispatchEvent(new CustomEvent("slid.bs.carousel")),this.props.onExited(e)}},{key:"render",value:function(){var e=this,t=this.props,n=t.in,r=t.children,a=t.cssModule,i=t.slide,s=t.tag,l=t.className,c=ge(t,["in","children","cssModule","slide","tag","className"]);return o.a.createElement(gt,pe({},c,{enter:i,exit:i,in:n,onEnter:this.onEnter,onEntering:this.onEntering,onExit:this.onExit,onExiting:this.onExiting,onExited:this.onExited}),function(t){var n=e.context.direction,i=t===$.ENTERED||t===$.EXITING,c=(t===$.ENTERING||t===$.EXITING)&&e.state.startAnimation&&("right"===n?"carousel-item-left":"carousel-item-right"),f=t===$.ENTERING&&("right"===n?"carousel-item-next":"carousel-item-prev"),d=W(u()(l,"carousel-item",i&&"active",c,f),a);return o.a.createElement(s,{className:d},r)})}}]),t}(o.a.Component);Ht.propTypes=pe({},gt.propTypes,{tag:i.a.oneOfType([i.a.func,i.a.string]),in:i.a.bool,cssModule:i.a.object,children:i.a.node,slide:i.a.bool,className:i.a.string}),Ht.defaultProps=pe({},gt.defaultProps,{tag:"div",timeout:Z.Carousel,slide:!0}),Ht.contextTypes={direction:i.a.string};var Wt=function(e){function t(e){ce(this,t);var n=ve(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.handleKeyPress=n.handleKeyPress.bind(n),n.renderItems=n.renderItems.bind(n),n.hoverStart=n.hoverStart.bind(n),n.hoverEnd=n.hoverEnd.bind(n),n.state={direction:"right",indicatorClicked:!1},n}return he(t,e),fe(t,[{key:"getChildContext",value:function(){return{direction:this.state.direction}}},{key:"componentDidMount",value:function(){"carousel"===this.props.ride&&this.setInterval(),document.addEventListener("keyup",this.handleKeyPress)}},{key:"componentWillReceiveProps",value:function(e){this.setInterval(e),this.props.activeIndex+1===e.activeIndex?this.setState({direction:"right"}):this.props.activeIndex-1===e.activeIndex?this.setState({direction:"left"}):this.props.activeIndex>e.activeIndex?this.setState({direction:this.state.indicatorClicked?"left":"right"}):this.props.activeIndex!==e.activeIndex&&this.setState({direction:this.state.indicatorClicked?"right":"left"}),this.setState({indicatorClicked:!1})}},{key:"componentWillUnmount",value:function(){this.clearInterval(),document.removeEventListener("keyup",this.handleKeyPress)}},{key:"setInterval",value:function(e){function t(){return e.apply(this,arguments)}return t.toString=function(){return e.toString()},t}(function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:this.props;this.clearInterval(),e.interval&&(this.cycleInterval=setInterval(function(){e.next()},parseInt(e.interval,10)))})},{key:"clearInterval",value:function(e){function t(){return e.apply(this,arguments)}return t.toString=function(){return e.toString()},t}(function(){clearInterval(this.cycleInterval)})},{key:"hoverStart",value:function(){var e;("hover"===this.props.pause&&this.clearInterval(),this.props.mouseEnter)&&(e=this.props).mouseEnter.apply(e,arguments)}},{key:"hoverEnd",value:function(){var e;("hover"===this.props.pause&&this.setInterval(),this.props.mouseLeave)&&(e=this.props).mouseLeave.apply(e,arguments)}},{key:"handleKeyPress",value:function(e){this.props.keyboard&&(37===e.keyCode?this.props.previous():39===e.keyCode&&this.props.next())}},{key:"renderItems",value:function(e,t){var n=this,r=this.props.slide;return o.a.createElement("div",{role:"listbox",className:t},e.map(function(e,t){var a=t===n.props.activeIndex;return o.a.cloneElement(e,{in:a,slide:r})}))}},{key:"render",value:function(){var e=this,t=this.props,n=t.cssModule,r=t.slide,a=t.className,i=W(u()(a,"carousel",r&&"slide"),n),s=W(u()("carousel-inner"),n),l=this.props.children.filter(function(e){return null!==e&&void 0!==e&&"boolean"!=typeof e});if(l.every(function(e){return e.type===Ht}))return o.a.createElement("div",{className:i,onMouseEnter:this.hoverStart,onMouseLeave:this.hoverEnd},this.renderItems(l,s));if(l[0]instanceof Array){var c=l[0],f=l[1],d=l[2];return o.a.createElement("div",{className:i,onMouseEnter:this.hoverStart,onMouseLeave:this.hoverEnd},this.renderItems(c,s),f,d)}var p=l[0],h=o.a.cloneElement(p,{onClickHandler:function(t){"function"==typeof p.props.onClickHandler&&e.setState({indicatorClicked:!0},function(){return p.props.onClickHandler(t)})}}),g=l[1],v=l[2],m=l[3];return o.a.createElement("div",{className:i,onMouseEnter:this.hoverStart,onMouseLeave:this.hoverEnd},h,this.renderItems(g,s),v,m)}}]),t}(o.a.Component);Wt.propTypes={activeIndex:i.a.number,next:i.a.func.isRequired,previous:i.a.func.isRequired,keyboard:i.a.bool,pause:i.a.oneOf(["hover",!1]),ride:i.a.oneOf(["carousel"]),interval:i.a.oneOfType([i.a.number,i.a.string,i.a.bool]),children:i.a.array,mouseEnter:i.a.func,mouseLeave:i.a.func,slide:i.a.bool,cssModule:i.a.object,className:i.a.string},Wt.defaultProps={interval:5e3,pause:"hover",keyboard:!0,slide:!0},Wt.childContextTypes={direction:i.a.string};var Vt=function(e){var t=e.direction,n=e.onClickHandler,r=e.cssModule,a=e.directionText,i=e.className,s=W(u()(i,"carousel-control-"+t),r),l=W(u()("carousel-control-"+t+"-icon"),r),c=W(u()("sr-only"),r);return o.a.createElement("a",{className:s,role:"button",tabIndex:"0",onClick:function(e){e.preventDefault(),n()}},o.a.createElement("span",{className:l,"aria-hidden":"true"}),o.a.createElement("span",{className:c},a||t))};Vt.propTypes={direction:i.a.oneOf(["prev","next"]).isRequired,onClickHandler:i.a.func.isRequired,cssModule:i.a.object,directionText:i.a.string,className:i.a.string};var Gt=function(e){var t=e.items,n=e.activeIndex,r=e.cssModule,a=e.onClickHandler,i=e.className,s=W(u()(i,"carousel-indicators"),r),l=t.map(function(e,t){var i=W(u()({active:n===t}),r);return o.a.createElement("li",{key:""+(e.key||e.src)+e.caption+e.altText,onClick:function(e){e.preventDefault(),a(t)},className:i})});return o.a.createElement("ol",{className:s},l)};Gt.propTypes={items:i.a.array.isRequired,activeIndex:i.a.number.isRequired,cssModule:i.a.object,onClickHandler:i.a.func.isRequired,className:i.a.string};var qt=function(e){var t=e.captionHeader,n=e.captionText,r=e.cssModule,a=e.className,i=W(u()(a,"carousel-caption","d-none","d-md-block"),r);return o.a.createElement("div",{className:i},o.a.createElement("h3",null,t),o.a.createElement("p",null,n))};qt.propTypes={captionHeader:i.a.string,captionText:i.a.string.isRequired,cssModule:i.a.object,className:i.a.string};var Xt={items:i.a.array.isRequired,indicators:i.a.bool,controls:i.a.bool,autoPlay:i.a.bool,activeIndex:i.a.number,next:i.a.func,previous:i.a.func,goToIndex:i.a.func},Kt=function(e){function t(e){ce(this,t);var n=ve(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.animating=!1,n.state={activeIndex:0},n.next=n.next.bind(n),n.previous=n.previous.bind(n),n.goToIndex=n.goToIndex.bind(n),n.onExiting=n.onExiting.bind(n),n.onExited=n.onExited.bind(n),n}return he(t,e),fe(t,[{key:"onExiting",value:function(){this.animating=!0}},{key:"onExited",value:function(){this.animating=!1}},{key:"next",value:function(){if(!this.animating){var e=this.state.activeIndex===this.props.items.length-1?0:this.state.activeIndex+1;this.setState({activeIndex:e})}}},{key:"previous",value:function(){if(!this.animating){var e=0===this.state.activeIndex?this.props.items.length-1:this.state.activeIndex-1;this.setState({activeIndex:e})}}},{key:"goToIndex",value:function(e){this.animating||this.setState({activeIndex:e})}},{key:"render",value:function(){var e=this,t=this.props,n=t.autoPlay,r=t.indicators,a=t.controls,i=t.items,s=t.goToIndex,u=ge(t,["autoPlay","indicators","controls","items","goToIndex"]),l=this.state.activeIndex,c=i.map(function(t){return o.a.createElement(Ht,{onExiting:e.onExiting,onExited:e.onExited,key:t.src},o.a.createElement("img",{className:"d-block w-100",src:t.src,alt:t.altText}),o.a.createElement(qt,{captionText:t.caption,captionHeader:t.header||t.caption}))});return o.a.createElement(Wt,pe({activeIndex:l,next:this.next,previous:this.previous,ride:n?"carousel":void 0},u),r&&o.a.createElement(Gt,{items:i,activeIndex:u.activeIndex||l,onClickHandler:s||this.goToIndex}),c,a&&o.a.createElement(Vt,{direction:"prev",directionText:"Previous",onClickHandler:u.previous||this.previous}),a&&o.a.createElement(Vt,{direction:"next",directionText:"Next",onClickHandler:u.next||this.next}))}}]),t}(r.Component);Kt.propTypes=Xt,Kt.defaultProps={controls:!0,indicators:!0,autoPlay:!0};var Yt={tag:i.a.oneOfType([i.a.func,i.a.string]),className:i.a.string,cssModule:i.a.object},Zt=function(e){var t=e.className,n=e.cssModule,r=e.tag,a=ge(e,["className","cssModule","tag"]),i=W(u()(t,"card-subtitle"),n);return o.a.createElement(r,pe({},a,{className:i}))};Zt.propTypes=Yt,Zt.defaultProps={tag:"h6"};var Qt={tag:i.a.oneOfType([i.a.func,i.a.string]),className:i.a.string,cssModule:i.a.object},$t=function(e){var t=e.className,n=e.cssModule,r=e.tag,a=ge(e,["className","cssModule","tag"]),i=W(u()(t,"card-text"),n);return o.a.createElement(r,pe({},a,{className:i}))};$t.propTypes=Qt,$t.defaultProps={tag:"p"};var Jt={tag:i.a.oneOfType([i.a.func,i.a.string]),className:i.a.string,cssModule:i.a.object},en=function(e){var t=e.className,n=e.cssModule,r=e.tag,a=ge(e,["className","cssModule","tag"]),i=W(u()(t,"card-title"),n);return o.a.createElement(r,pe({},a,{className:i}))};en.propTypes=Jt,en.defaultProps={tag:"h5"};var tn={className:i.a.string,id:i.a.oneOfType([i.a.string,i.a.number]).isRequired,type:i.a.string.isRequired,label:i.a.node,inline:i.a.bool,valid:i.a.bool,invalid:i.a.bool,bsSize:i.a.string,cssModule:i.a.object,children:i.a.oneOfType([i.a.node,i.a.array,i.a.func]),innerRef:i.a.oneOfType([i.a.object,i.a.string,i.a.func])};function nn(e){var t=e.className,n=e.label,r=e.inline,a=e.valid,i=e.invalid,s=e.cssModule,l=e.children,c=e.bsSize,f=e.innerRef,d=ge(e,["className","label","inline","valid","invalid","cssModule","children","bsSize","innerRef"]),p=d.type,h=W(u()(t,"custom-"+p,!!c&&"custom-"+p+"-"+c),s),g=W(u()(i&&"is-invalid",a&&"is-valid"),s);if("select"===p)return o.a.createElement("select",pe({},d,{ref:f,className:u()(g,h)}),l);if("file"===p)return o.a.createElement("div",{className:h},o.a.createElement("input",pe({},d,{ref:f,className:u()(g,W("custom-file-input",s))})),o.a.createElement("label",{className:W("custom-file-label",s),htmlFor:d.id},n||"Choose file"));if("checkbox"!==p&&"radio"!==p)return o.a.createElement("input",pe({},d,{ref:f,className:u()(g,h)}));var v=u()(h,W(u()("custom-control",{"custom-control-inline":r}),s));return o.a.createElement("div",{className:v},o.a.createElement("input",pe({},d,{ref:f,className:u()(g,W("custom-control-input",s))})),o.a.createElement("label",{className:W("custom-control-label",s),htmlFor:d.id},n),l)}nn.propTypes=tn;var rn={children:i.a.node.isRequired,className:i.a.string,placement:i.a.string,placementPrefix:i.a.string,arrowClassName:i.a.string,hideArrow:i.a.bool,tag:i.a.string,isOpen:i.a.bool.isRequired,cssModule:i.a.object,offset:i.a.oneOfType([i.a.string,i.a.number]),fallbackPlacement:i.a.oneOfType([i.a.string,i.a.array]),flip:i.a.bool,container:i.a.oneOfType([i.a.string,i.a.func,Y]),target:i.a.oneOfType([i.a.string,i.a.func,Y]).isRequired,modifiers:i.a.object,boundariesElement:i.a.string},on={popperManager:i.a.object.isRequired},an=function(e){function t(e){ce(this,t);var n=ve(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.handlePlacementChange=n.handlePlacementChange.bind(n),n.setTargetNode=n.setTargetNode.bind(n),n.getTargetNode=n.getTargetNode.bind(n),n.state={},n}return he(t,e),fe(t,[{key:"getChildContext",value:function(){return{popperManager:{setTargetNode:this.setTargetNode,getTargetNode:this.getTargetNode}}}},{key:"componentDidMount",value:function(){this.handleProps()}},{key:"componentDidUpdate",value:function(e){this.props.isOpen!==e.isOpen?this.handleProps():this._element&&this.renderIntoSubtree()}},{key:"componentWillUnmount",value:function(){this.hide()}},{key:"setTargetNode",value:function(e){this.targetNode=e}},{key:"getTargetNode",value:function(){return this.targetNode}},{key:"getContainerNode",value:function(){return oe(this.props.container)}},{key:"handlePlacementChange",value:function(e){return this.state.placement!==e.placement&&this.setState({placement:e.placement}),e}},{key:"handleProps",value:function(){"inline"!==this.props.container&&(this.props.isOpen?this.show():this.hide())}},{key:"hide",value:function(){this._element&&(this.getContainerNode().removeChild(this._element),h.a.unmountComponentAtNode(this._element),this._element=null)}},{key:"show",value:function(){this._element=document.createElement("div"),this.getContainerNode().appendChild(this._element),this.renderIntoSubtree(),this._element.childNodes&&this._element.childNodes[0]&&this._element.childNodes[0].focus&&this._element.childNodes[0].focus()}},{key:"renderIntoSubtree",value:function(){h.a.unstable_renderSubtreeIntoContainer(this,this.renderChildren(),this._element)}},{key:"renderChildren",value:function(){var e=this.props,t=e.cssModule,n=e.children,r=(e.isOpen,e.flip),a=(e.target,e.offset),i=e.fallbackPlacement,s=e.placementPrefix,l=e.arrowClassName,c=e.hideArrow,f=e.className,d=e.tag,p=(e.container,e.modifiers),h=e.boundariesElement,g=ge(e,["cssModule","children","isOpen","flip","target","offset","fallbackPlacement","placementPrefix","arrowClassName","hideArrow","className","tag","container","modifiers","boundariesElement"]),v=W(u()("arrow",l),t),m=(this.state.placement||g.placement).split("-")[0],y=W(u()(f,s?s+"-"+m:m),this.props.cssModule),w=pe({offset:{offset:a},flip:{enabled:r,behavior:i},preventOverflow:{boundariesElement:h},update:{enabled:!0,order:950,fn:this.handlePlacementChange}},p);return o.a.createElement(A,pe({modifiers:w},g,{component:d,className:y,"x-placement":this.state.placement||g.placement}),n,!c&&o.a.createElement(M,{className:v}))}},{key:"render",value:function(){return this.setTargetNode(oe(this.props.target)),"inline"===this.props.container&&this.props.isOpen?this.renderChildren():null}}]),t}(o.a.Component);an.propTypes=rn,an.defaultProps={boundariesElement:"scrollParent",placement:"auto",hideArrow:!1,isOpen:!1,offset:0,fallbackPlacement:"flip",flip:!0,container:"body",modifiers:{}},an.childContextTypes=on;var sn=function(e,t){return t.popperManager.setTargetNode(oe(e.target)),null};sn.contextTypes={popperManager:i.a.object.isRequired},sn.propTypes={target:i.a.oneOfType([i.a.string,i.a.func,Y]).isRequired};var un={placement:i.a.oneOf(ee),target:i.a.oneOfType([i.a.string,i.a.func,Y]).isRequired,container:i.a.oneOfType([i.a.string,i.a.func,Y]),boundariesElement:i.a.string,isOpen:i.a.bool,disabled:i.a.bool,hideArrow:i.a.bool,className:i.a.string,innerClassName:i.a.string,placementPrefix:i.a.string,cssModule:i.a.object,toggle:i.a.func,delay:i.a.oneOfType([i.a.shape({show:i.a.number,hide:i.a.number}),i.a.number]),modifiers:i.a.object,offset:i.a.oneOfType([i.a.string,i.a.number])},ln={show:0,hide:0},cn={isOpen:!1,hideArrow:!1,placement:"right",placementPrefix:"bs-popover",delay:ln,toggle:function(){}},fn=function(e){function t(e){ce(this,t);var n=ve(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.addTargetEvents=n.addTargetEvents.bind(n),n.handleDocumentClick=n.handleDocumentClick.bind(n),n.removeTargetEvents=n.removeTargetEvents.bind(n),n.getRef=n.getRef.bind(n),n.toggle=n.toggle.bind(n),n.show=n.show.bind(n),n.hide=n.hide.bind(n),n}return he(t,e),fe(t,[{key:"componentDidMount",value:function(){this._target=oe(this.props.target),this.handleProps()}},{key:"componentDidUpdate",value:function(){this.handleProps()}},{key:"componentWillUnmount",value:function(){this.clearShowTimeout(),this.clearHideTimeout(),this.removeTargetEvents()}},{key:"getRef",value:function(e){this._popover=e}},{key:"getDelay",value:function(e){var t=this.props.delay;return"object"===(void 0===t?"undefined":le(t))?isNaN(t[e])?ln[e]:t[e]:t}},{key:"handleProps",value:function(){this.props.isOpen?this.show():this.hide()}},{key:"show",value:function(){this.clearHideTimeout(),this.addTargetEvents(),this.props.isOpen||(this.clearShowTimeout(),this._showTimeout=setTimeout(this.toggle,this.getDelay("show")))}},{key:"hide",value:function(){this.clearShowTimeout(),this.removeTargetEvents(),this.props.isOpen&&(this.clearHideTimeout(),this._hideTimeout=setTimeout(this.toggle,this.getDelay("hide")))}},{key:"clearShowTimeout",value:function(){clearTimeout(this._showTimeout),this._showTimeout=void 0}},{key:"clearHideTimeout",value:function(){clearTimeout(this._hideTimeout),this._hideTimeout=void 0}},{key:"handleDocumentClick",value:function(e){e.target===this._target||this._target.contains(e.target)||e.target===this._popover||this._popover&&this._popover.contains(e.target)||(this._hideTimeout&&this.clearHideTimeout(),this.props.isOpen&&this.toggle(e))}},{key:"addTargetEvents",value:function(){var e=this;["click","touchstart"].forEach(function(t){return document.addEventListener(t,e.handleDocumentClick,!0)})}},{key:"removeTargetEvents",value:function(){var e=this;["click","touchstart"].forEach(function(t){return document.removeEventListener(t,e.handleDocumentClick,!0)})}},{key:"toggle",value:function(e){return this.props.disabled?e&&e.preventDefault():this.props.toggle(e)}},{key:"render",value:function(){if(!this.props.isOpen)return null;var e=V(this.props,Object.keys(un)),t=W(u()("popover-inner",this.props.innerClassName),this.props.cssModule),n=W(u()("popover","show",this.props.className),this.props.cssModule);return o.a.createElement(an,{className:n,target:this.props.target,isOpen:this.props.isOpen,hideArrow:this.props.hideArrow,placement:this.props.placement,placementPrefix:this.props.placementPrefix,container:this.props.container,modifiers:this.props.modifiers,offset:this.props.offset,boundariesElement:this.props.boundariesElement},o.a.createElement("div",pe({},e,{className:t,ref:this.getRef})))}}]),t}(o.a.Component);fn.propTypes=un,fn.defaultProps=cn;var dn={tag:i.a.oneOfType([i.a.func,i.a.string]),className:i.a.string,cssModule:i.a.object},pn=function(e){var t=e.className,n=e.cssModule,r=e.tag,a=ge(e,["className","cssModule","tag"]),i=W(u()(t,"popover-header"),n);return o.a.createElement(r,pe({},a,{className:i}))};function hn(e){return X('The "PopoverTitle" component has been deprecated.\nPlease use component "PopoverHeader".'),o.a.createElement(pn,e)}pn.propTypes=dn,pn.defaultProps={tag:"h3"};var gn={tag:i.a.oneOfType([i.a.func,i.a.string]),className:i.a.string,cssModule:i.a.object},vn=function(e){var t=e.className,n=e.cssModule,r=e.tag,a=ge(e,["className","cssModule","tag"]),i=W(u()(t,"popover-body"),n);return o.a.createElement(r,pe({},a,{className:i}))};function mn(e){return X('The "PopoverContent" component has been deprecated.\nPlease use component "PopoverBody".'),o.a.createElement(vn,e)}vn.propTypes=gn,vn.defaultProps={tag:"div"};var yn={children:i.a.node,bar:i.a.bool,multi:i.a.bool,tag:i.a.string,value:i.a.oneOfType([i.a.string,i.a.number]),max:i.a.oneOfType([i.a.string,i.a.number]),animated:i.a.bool,striped:i.a.bool,color:i.a.string,className:i.a.string,barClassName:i.a.string,cssModule:i.a.object},wn=function(e){var t=e.children,n=e.className,r=e.barClassName,a=e.cssModule,i=e.value,s=e.max,l=e.animated,c=e.striped,f=e.color,d=e.bar,p=e.multi,h=e.tag,g=ge(e,["children","className","barClassName","cssModule","value","max","animated","striped","color","bar","multi","tag"]),v=x()(i)/x()(s)*100,m=W(u()(n,"progress"),a),y=W(u()("progress-bar",d&&n||r,l?"progress-bar-animated":null,f?"bg-"+f:null,c||l?"progress-bar-striped":null),a),w=p?t:o.a.createElement("div",{className:y,style:{width:v+"%"},role:"progressbar","aria-valuenow":i,"aria-valuemin":"0","aria-valuemax":s,children:t});return d?w:o.a.createElement(h,pe({},g,{className:m,children:w}))};wn.propTypes=yn,wn.defaultProps={tag:"div",value:0,max:100};var bn={children:i.a.node.isRequired,node:i.a.any},En=function(e){function t(){return ce(this,t),ve(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return he(t,e),fe(t,[{key:"componentWillUnmount",value:function(){this.defaultNode&&document.body.removeChild(this.defaultNode),this.defaultNode=null}},{key:"render",value:function(){return te?(this.props.node||this.defaultNode||(this.defaultNode=document.createElement("div"),document.body.appendChild(this.defaultNode)),h.a.createPortal(this.props.children,this.props.node||this.defaultNode)):null}}]),t}(o.a.Component);function _n(){}En.propTypes=bn;var Cn=i.a.shape(yt.propTypes),Tn={isOpen:i.a.bool,autoFocus:i.a.bool,centered:i.a.bool,size:i.a.string,toggle:i.a.func,keyboard:i.a.bool,role:i.a.string,labelledBy:i.a.string,backdrop:i.a.oneOfType([i.a.bool,i.a.oneOf(["static"])]),onEnter:i.a.func,onExit:i.a.func,onOpened:i.a.func,onClosed:i.a.func,children:i.a.node,className:i.a.string,wrapClassName:i.a.string,modalClassName:i.a.string,backdropClassName:i.a.string,contentClassName:i.a.string,external:i.a.node,fade:i.a.bool,cssModule:i.a.object,zIndex:i.a.oneOfType([i.a.number,i.a.string]),backdropTransition:Cn,modalTransition:Cn,innerRef:i.a.oneOfType([i.a.object,i.a.string,i.a.func])},On=Object.keys(Tn),Sn={isOpen:!1,autoFocus:!0,centered:!1,role:"dialog",backdrop:!0,keyboard:!0,zIndex:1050,fade:!0,onOpened:_n,onClosed:_n,modalTransition:{timeout:Z.Modal},backdropTransition:{mountOnEnter:!0,timeout:Z.Fade}},Nn=function(e){function t(e){ce(this,t);var n=ve(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n._element=null,n._originalBodyPadding=null,n.getFocusableChildren=n.getFocusableChildren.bind(n),n.handleBackdropClick=n.handleBackdropClick.bind(n),n.handleBackdropMouseDown=n.handleBackdropMouseDown.bind(n),n.handleEscape=n.handleEscape.bind(n),n.handleTab=n.handleTab.bind(n),n.onOpened=n.onOpened.bind(n),n.onClosed=n.onClosed.bind(n),n.state={isOpen:e.isOpen},e.isOpen&&n.init(),n}return he(t,e),fe(t,[{key:"componentDidMount",value:function(){this.props.onEnter&&this.props.onEnter(),this.state.isOpen&&this.props.autoFocus&&this.setFocus(),this._isMounted=!0}},{key:"componentWillReceiveProps",value:function(e){e.isOpen&&!this.props.isOpen&&this.setState({isOpen:e.isOpen})}},{key:"componentWillUpdate",value:function(e,t){t.isOpen&&!this.state.isOpen&&this.init()}},{key:"componentDidUpdate",value:function(e,t){this.props.autoFocus&&this.state.isOpen&&!t.isOpen&&this.setFocus(),this._element&&e.zIndex!==this.props.zIndex&&(this._element.style.zIndex=this.props.zIndex)}},{key:"componentWillUnmount",value:function(){this.props.onExit&&this.props.onExit(),this.state.isOpen&&this.destroy(),this._isMounted=!1}},{key:"onOpened",value:function(e,t){this.props.onOpened(),(this.props.modalTransition.onEntered||_n)(e,t)}},{key:"onClosed",value:function(e){this.props.onClosed(),(this.props.modalTransition.onExited||_n)(e),this.destroy(),this._isMounted&&this.setState({isOpen:!1})}},{key:"setFocus",value:function(){this._dialog&&this._dialog.parentNode&&"function"==typeof this._dialog.parentNode.focus&&this._dialog.parentNode.focus()}},{key:"getFocusableChildren",value:function(){return this._element.querySelectorAll(se.join(", "))}},{key:"getFocusedChild",value:function(){var e=void 0,t=this.getFocusableChildren();try{e=document.activeElement}catch(n){e=t[0]}return e}},{key:"handleBackdropClick",value:function(e){if(e.target===this._mouseDownElement){if(e.stopPropagation(),!this.props.isOpen||!0!==this.props.backdrop)return;var t=this._dialog;e.target&&!t.contains(e.target)&&this.props.toggle&&this.props.toggle(e)}}},{key:"handleTab",value:function(e){if(9===e.which){for(var t=this.getFocusableChildren(),n=t.length,r=this.getFocusedChild(),o=0,a=0;a<n;a+=1)if(t[a]===r){o=a;break}e.shiftKey&&0===o?(e.preventDefault(),t[n-1].focus()):e.shiftKey||o!==n-1||(e.preventDefault(),t[0].focus())}}},{key:"handleBackdropMouseDown",value:function(e){this._mouseDownElement=e.target}},{key:"handleEscape",value:function(e){this.props.isOpen&&this.props.keyboard&&27===e.keyCode&&this.props.toggle&&this.props.toggle(e)}},{key:"init",value:function(){try{this._triggeringElement=document.activeElement}catch(e){this._triggeringElement=null}this._element=document.createElement("div"),this._element.setAttribute("tabindex","-1"),this._element.style.position="relative",this._element.style.zIndex=this.props.zIndex,this._originalBodyPadding=F(),z(),document.body.appendChild(this._element),this.bodyClassAdded||(document.body.className=u()(document.body.className,W("modal-open",this.props.cssModule)),this.bodyClassAdded=!0)}},{key:"destroy",value:function(){if(this._element&&(document.body.removeChild(this._element),this._element=null),this._triggeringElement&&(this._triggeringElement.focus(),this._triggeringElement=null),this.bodyClassAdded){var e=W("modal-open",this.props.cssModule),t=new RegExp("(^| )"+e+"( |$)");document.body.className=document.body.className.replace(t," ").trim(),this.bodyClassAdded=!1}L(this._originalBodyPadding)}},{key:"renderModalDialog",value:function(){var e,t=this,n=V(this.props,On);return o.a.createElement("div",pe({},n,{className:W(u()("modal-dialog",this.props.className,(e={},de(e,"modal-"+this.props.size,this.props.size),de(e,"modal-dialog-centered",this.props.centered),e)),this.props.cssModule),role:"document",ref:function(e){t._dialog=e}}),o.a.createElement("div",{className:W(u()("modal-content",this.props.contentClassName),this.props.cssModule)},this.props.children))}},{key:"render",value:function(){if(this.state.isOpen){var e=this.props,t=e.wrapClassName,n=e.modalClassName,r=e.backdropClassName,a=e.cssModule,i=e.isOpen,s=e.backdrop,l=e.role,c=e.labelledBy,f=e.external,d=e.innerRef,p={onClick:this.handleBackdropClick,onMouseDown:this.handleBackdropMouseDown,onKeyUp:this.handleEscape,onKeyDown:this.handleTab,style:{display:"block"},"aria-labelledby":c,role:l,tabIndex:"-1"},h=this.props.fade,g=pe({},yt.defaultProps,this.props.modalTransition,{baseClass:h?this.props.modalTransition.baseClass:"",timeout:h?this.props.modalTransition.timeout:0}),v=pe({},yt.defaultProps,this.props.backdropTransition,{baseClass:h?this.props.backdropTransition.baseClass:"",timeout:h?this.props.backdropTransition.timeout:0}),m=h?o.a.createElement(yt,pe({},v,{in:i&&!!s,cssModule:a,className:W(u()("modal-backdrop",r),a)})):o.a.createElement("div",{className:W(u()("modal-backdrop","show",r),a)});return o.a.createElement(En,{node:this._element},o.a.createElement("div",{className:W(t)},o.a.createElement(yt,pe({},p,g,{in:i,onEntered:this.onOpened,onExited:this.onClosed,cssModule:a,className:W(u()("modal",n),a),innerRef:d}),f,this.renderModalDialog()),m))}return null}}]),t}(o.a.Component);Nn.propTypes=Tn,Nn.defaultProps=Sn;var An={tag:i.a.oneOfType([i.a.func,i.a.string]),wrapTag:i.a.oneOfType([i.a.func,i.a.string]),toggle:i.a.func,className:i.a.string,cssModule:i.a.object,children:i.a.node,closeAriaLabel:i.a.string,charCode:i.a.oneOfType([i.a.string,i.a.number])},Pn=function(e){var t=void 0,n=e.className,r=e.cssModule,a=e.children,i=e.toggle,s=e.tag,l=e.wrapTag,c=e.closeAriaLabel,f=e.charCode,d=ge(e,["className","cssModule","children","toggle","tag","wrapTag","closeAriaLabel","charCode"]),p=W(u()(n,"modal-header"),r);if(i){var h="number"==typeof f?String.fromCharCode(f):f;t=o.a.createElement("button",{type:"button",onClick:i,className:W("close",r),"aria-label":c},o.a.createElement("span",{"aria-hidden":"true"},h))}return o.a.createElement(l,pe({},d,{className:p}),o.a.createElement(s,{className:W("modal-title",r)},a),t)};Pn.propTypes=An,Pn.defaultProps={tag:"h5",wrapTag:"div",closeAriaLabel:"Close",charCode:215};var In={tag:i.a.oneOfType([i.a.func,i.a.string]),className:i.a.string,cssModule:i.a.object},Mn=function(e){var t=e.className,n=e.cssModule,r=e.tag,a=ge(e,["className","cssModule","tag"]),i=W(u()(t,"modal-body"),n);return o.a.createElement(r,pe({},a,{className:i}))};Mn.propTypes=In,Mn.defaultProps={tag:"div"};var kn={tag:i.a.oneOfType([i.a.func,i.a.string]),className:i.a.string,cssModule:i.a.object},xn=function(e){var t=e.className,n=e.cssModule,r=e.tag,a=ge(e,["className","cssModule","tag"]),i=W(u()(t,"modal-footer"),n);return o.a.createElement(r,pe({},a,{className:i}))};xn.propTypes=kn,xn.defaultProps={tag:"div"};var Rn={placement:i.a.oneOf(ee),target:i.a.oneOfType([i.a.string,i.a.func,Y]).isRequired,container:i.a.oneOfType([i.a.string,i.a.func,Y]),isOpen:i.a.bool,disabled:i.a.bool,hideArrow:i.a.bool,boundariesElement:i.a.string,className:i.a.string,innerClassName:i.a.string,arrowClassName:i.a.string,cssModule:i.a.object,toggle:i.a.func,autohide:i.a.bool,placementPrefix:i.a.string,delay:i.a.oneOfType([i.a.shape({show:i.a.number,hide:i.a.number}),i.a.number]),modifiers:i.a.object,offset:i.a.oneOfType([i.a.string,i.a.number]),innerRef:i.a.oneOfType([i.a.func,i.a.string,i.a.object]),trigger:i.a.string},Dn={show:0,hide:250},Bn={isOpen:!1,hideArrow:!1,placement:"top",placementPrefix:"bs-tooltip",delay:Dn,autohide:!0,toggle:function(){}},jn=function(e){function t(e){ce(this,t);var n=ve(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.addTargetEvents=n.addTargetEvents.bind(n),n.handleDocumentClick=n.handleDocumentClick.bind(n),n.removeTargetEvents=n.removeTargetEvents.bind(n),n.toggle=n.toggle.bind(n),n.onMouseOverTooltip=n.onMouseOverTooltip.bind(n),n.onMouseLeaveTooltip=n.onMouseLeaveTooltip.bind(n),n.onMouseOverTooltipContent=n.onMouseOverTooltipContent.bind(n),n.onMouseLeaveTooltipContent=n.onMouseLeaveTooltipContent.bind(n),n.show=n.show.bind(n),n.hide=n.hide.bind(n),n.onEscKeyDown=n.onEscKeyDown.bind(n),n}return he(t,e),fe(t,[{key:"componentDidMount",value:function(){this._target=oe(this.props.target),this.addTargetEvents()}},{key:"componentWillUnmount",value:function(){this.removeTargetEvents()}},{key:"onMouseOverTooltip",value:function(e){this._hideTimeout&&this.clearHideTimeout(),this._showTimeout=setTimeout(this.show.bind(this,e),this.getDelay("show"))}},{key:"onMouseLeaveTooltip",value:function(e){this._showTimeout&&this.clearShowTimeout(),this._hideTimeout=setTimeout(this.hide.bind(this,e),this.getDelay("hide"))}},{key:"onMouseOverTooltipContent",value:function(){this.props.autohide||this._hideTimeout&&this.clearHideTimeout()}},{key:"onMouseLeaveTooltipContent",value:function(e){this.props.autohide||(this._showTimeout&&this.clearShowTimeout(),e.persist(),this._hideTimeout=setTimeout(this.hide.bind(this,e),this.getDelay("hide")))}},{key:"onEscKeyDown",value:function(e){"Escape"===e.key&&this.hide(e)}},{key:"getDelay",value:function(e){var t=this.props.delay;return"object"===(void 0===t?"undefined":le(t))?isNaN(t[e])?Dn[e]:t[e]:t}},{key:"show",value:function(e){this.props.isOpen||(this.clearShowTimeout(),this.toggle(e))}},{key:"hide",value:function(e){this.props.isOpen&&(this.clearHideTimeout(),this.toggle(e))}},{key:"clearShowTimeout",value:function(){clearTimeout(this._showTimeout),this._showTimeout=void 0}},{key:"clearHideTimeout",value:function(){clearTimeout(this._hideTimeout),this._hideTimeout=void 0}},{key:"handleDocumentClick",value:function(e){e.target===this._target||this._target.contains(e.target)?(this._hideTimeout&&this.clearHideTimeout(),this.props.isOpen||this.toggle(e)):this.props.isOpen&&"tooltip"!==e.target.getAttribute("role")&&(this._showTimeout&&this.clearShowTimeout(),this._hideTimeout=setTimeout(this.hide.bind(this,e),this.getDelay("hide")))}},{key:"addTargetEvents",value:function(){var e=this;if(this.props.trigger){var t=this.props.trigger.split(" ");-1===t.indexOf("manual")&&(t.indexOf("click")>-1&&["click","touchstart"].forEach(function(t){return document.addEventListener(t,e.handleDocumentClick,!0)}),t.indexOf("hover")>-1&&(this._target.addEventListener("mouseover",this.onMouseOverTooltip,!0),this._target.addEventListener("mouseout",this.onMouseLeaveTooltip,!0)),t.indexOf("focus")>-1&&(this._target.addEventListener("focusin",this.show,!0),this._target.addEventListener("focusout",this.hide,!0)),this._target.addEventListener("keydown",this.onEscKeyDown,!0))}else this._target.addEventListener("mouseover",this.onMouseOverTooltip,!0),this._target.addEventListener("mouseout",this.onMouseLeaveTooltip,!0),this._target.addEventListener("keydown",this.onEscKeyDown,!0),this._target.addEventListener("focusin",this.show,!0),this._target.addEventListener("focusout",this.hide,!0),["click","touchstart"].forEach(function(t){return document.addEventListener(t,e.handleDocumentClick,!0)})}},{key:"removeTargetEvents",value:function(){var e=this;this._target.removeEventListener("mouseover",this.onMouseOverTooltip,!0),this._target.removeEventListener("mouseout",this.onMouseLeaveTooltip,!0),this._target.addEventListener("keydown",this.onEscKeyDown,!0),this._target.addEventListener("focusin",this.show,!0),this._target.addEventListener("focusout",this.hide,!0),["click","touchstart"].forEach(function(t){return document.removeEventListener(t,e.handleDocumentClick,!0)})}},{key:"toggle",value:function(e){return this.props.disabled?e&&e.preventDefault():this.props.toggle(e)}},{key:"render",value:function(){if(!this.props.isOpen)return null;var e=V(this.props,Object.keys(Rn)),t=W(u()("tooltip-inner",this.props.innerClassName),this.props.cssModule),n=W(u()("tooltip","show",this.props.className),this.props.cssModule);return o.a.createElement(an,{className:n,target:this.props.target,isOpen:this.props.isOpen,hideArrow:this.props.hideArrow,boundariesElement:this.props.boundariesElement,placement:this.props.placement,placementPrefix:this.props.placementPrefix,arrowClassName:this.props.arrowClassName,container:this.props.container,modifiers:this.props.modifiers,offset:this.props.offset,cssModule:this.props.cssModule},o.a.createElement("div",pe({},e,{ref:this.props.innerRef,className:t,role:"tooltip","aria-hidden":this.props.isOpen,onMouseOver:this.onMouseOverTooltipContent,onMouseLeave:this.onMouseLeaveTooltipContent,onKeyDown:this.onEscKeyDown})))}}]),t}(o.a.Component);jn.propTypes=Rn,jn.defaultProps=Bn;var Ln={className:i.a.string,cssModule:i.a.object,size:i.a.string,bordered:i.a.bool,borderless:i.a.bool,striped:i.a.bool,inverse:K(i.a.bool,'Please use the prop "dark"'),dark:i.a.bool,hover:i.a.bool,responsive:i.a.oneOfType([i.a.bool,i.a.string]),tag:i.a.oneOfType([i.a.func,i.a.string]),responsiveTag:i.a.oneOfType([i.a.func,i.a.string])},Un=function(e){var t=e.className,n=e.cssModule,r=e.size,a=e.bordered,i=e.borderless,s=e.striped,l=e.inverse,c=e.dark,f=e.hover,d=e.responsive,p=e.tag,h=e.responsiveTag,g=ge(e,["className","cssModule","size","bordered","borderless","striped","inverse","dark","hover","responsive","tag","responsiveTag"]),v=W(u()(t,"table",!!r&&"table-"+r,!!a&&"table-bordered",!!i&&"table-borderless",!!s&&"table-striped",!(!c&&!l)&&"table-dark",!!f&&"table-hover"),n),m=o.a.createElement(p,pe({},g,{className:v}));if(d){var y=!0===d?"table-responsive":"table-responsive-"+d;return o.a.createElement(h,{className:y},m)}return m};Un.propTypes=Ln,Un.defaultProps={tag:"table",responsiveTag:"div"};var Fn={tag:i.a.oneOfType([i.a.func,i.a.string]),flush:i.a.bool,className:i.a.string,cssModule:i.a.object},zn=function(e){var t=e.className,n=e.cssModule,r=e.tag,a=e.flush,i=ge(e,["className","cssModule","tag","flush"]),s=W(u()(t,"list-group",!!a&&"list-group-flush"),n);return o.a.createElement(r,pe({},i,{className:s}))};zn.propTypes=Fn,zn.defaultProps={tag:"ul"};var Hn={children:i.a.node,inline:i.a.bool,tag:i.a.oneOfType([i.a.func,i.a.string]),innerRef:i.a.oneOfType([i.a.object,i.a.func,i.a.string]),className:i.a.string,cssModule:i.a.object},Wn=function(e){function t(e){ce(this,t);var n=ve(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.getRef=n.getRef.bind(n),n.submit=n.submit.bind(n),n}return he(t,e),fe(t,[{key:"getRef",value:function(e){this.props.innerRef&&this.props.innerRef(e),this.ref=e}},{key:"submit",value:function(){this.ref&&this.ref.submit()}},{key:"render",value:function(){var e=this.props,t=e.className,n=e.cssModule,r=e.inline,a=e.tag,i=e.innerRef,s=ge(e,["className","cssModule","inline","tag","innerRef"]),l=W(u()(t,!!r&&"form-inline"),n);return o.a.createElement(a,pe({},s,{ref:i,className:l}))}}]),t}(r.Component);Wn.propTypes=Hn,Wn.defaultProps={tag:"form"};var Vn={children:i.a.node,tag:i.a.string,className:i.a.string,cssModule:i.a.object,valid:i.a.bool,tooltip:i.a.bool},Gn={tag:"div",valid:void 0},qn=function(e){var t=e.className,n=e.cssModule,r=e.valid,a=e.tooltip,i=e.tag,s=ge(e,["className","cssModule","valid","tooltip","tag"]),l=a?"tooltip":"feedback",c=W(u()(t,r?"valid-"+l:"invalid-"+l),n);return o.a.createElement(i,pe({},s,{className:c}))};qn.propTypes=Vn,qn.defaultProps=Gn;var Xn={children:i.a.node,row:i.a.bool,check:i.a.bool,inline:i.a.bool,disabled:i.a.bool,tag:i.a.string,className:i.a.string,cssModule:i.a.object},Kn=function(e){var t=e.className,n=e.cssModule,r=e.row,a=e.disabled,i=e.check,s=e.inline,l=e.tag,c=ge(e,["className","cssModule","row","disabled","check","inline","tag"]),f=W(u()(t,"position-relative",!!r&&"row",i?"form-check":"form-group",!(!i||!s)&&"form-check-inline",!(!i||!a)&&"disabled"),n);return o.a.createElement(l,pe({},c,{className:f}))};Kn.propTypes=Xn,Kn.defaultProps={tag:"div"};var Yn={children:i.a.node,inline:i.a.bool,tag:i.a.oneOfType([i.a.func,i.a.string]),color:i.a.string,className:i.a.string,cssModule:i.a.object},Zn=function(e){var t=e.className,n=e.cssModule,r=e.inline,a=e.color,i=e.tag,s=ge(e,["className","cssModule","inline","color","tag"]),l=W(u()(t,!r&&"form-text",!!a&&"text-"+a),n);return o.a.createElement(i,pe({},s,{className:l}))};Zn.propTypes=Yn,Zn.defaultProps={tag:"small",color:"muted"};var Qn={children:i.a.node,type:i.a.string,size:i.a.string,bsSize:i.a.string,state:K(i.a.string,'Please use the props "valid" and "invalid" to indicate the state.'),valid:i.a.bool,invalid:i.a.bool,tag:i.a.oneOfType([i.a.func,i.a.string]),innerRef:i.a.oneOfType([i.a.object,i.a.func,i.a.string]),static:K(i.a.bool,'Please use the prop "plaintext"'),plaintext:i.a.bool,addon:i.a.bool,className:i.a.string,cssModule:i.a.object},$n=function(e){function t(e){ce(this,t);var n=ve(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.getRef=n.getRef.bind(n),n.focus=n.focus.bind(n),n}return he(t,e),fe(t,[{key:"getRef",value:function(e){this.props.innerRef&&this.props.innerRef(e),this.ref=e}},{key:"focus",value:function(){this.ref&&this.ref.focus()}},{key:"render",value:function(){var e=this.props,t=e.className,n=e.cssModule,r=e.type,a=e.bsSize,i=e.state,s=e.valid,l=e.invalid,c=e.tag,f=e.addon,d=e.static,p=e.plaintext,h=e.innerRef,g=ge(e,["className","cssModule","type","bsSize","state","valid","invalid","tag","addon","static","plaintext","innerRef"]),v=["radio","checkbox"].indexOf(r)>-1,m=new RegExp("\\D","g"),y=c||("select"===r||"textarea"===r?r:"input"),w="form-control";p||d?(w+="-plaintext",y=c||"p"):"file"===r?w+="-file":v&&(w=f?null:"form-check-input"),i&&void 0===s&&void 0===l&&("danger"===i?l=!0:"success"===i&&(s=!0)),g.size&&m.test(g.size)&&(X('Please use the prop "bsSize" instead of the "size" to bootstrap\'s input sizing.'),a=g.size,delete g.size);var b=W(u()(t,l&&"is-invalid",s&&"is-valid",!!a&&"form-control-"+a,w),n);return("input"===y||c&&"function"==typeof c)&&(g.type=r),!g.children||p||d||"select"===r||"string"!=typeof y||"select"===y||(X('Input with a type of "'+r+'" cannot have children. Please use "value"/"defaultValue" instead.'),delete g.children),o.a.createElement(y,pe({},g,{ref:h,className:b}))}}]),t}(o.a.Component);$n.propTypes=Qn,$n.defaultProps={type:"text"};var Jn={tag:i.a.oneOfType([i.a.func,i.a.string]),size:i.a.string,className:i.a.string,cssModule:i.a.object},er=function(e){var t=e.className,n=e.cssModule,r=e.tag,a=e.size,i=ge(e,["className","cssModule","tag","size"]),s=W(u()(t,"input-group",a?"input-group-"+a:null),n);return o.a.createElement(r,pe({},i,{className:s}))};er.propTypes=Jn,er.defaultProps={tag:"div"};var tr={tag:i.a.oneOfType([i.a.func,i.a.string]),className:i.a.string,cssModule:i.a.object},nr=function(e){var t=e.className,n=e.cssModule,r=e.tag,a=ge(e,["className","cssModule","tag"]),i=W(u()(t,"input-group-text"),n);return o.a.createElement(r,pe({},a,{className:i}))};nr.propTypes=tr,nr.defaultProps={tag:"span"};var rr={tag:i.a.oneOfType([i.a.func,i.a.string]),addonType:i.a.oneOf(["prepend","append"]).isRequired,children:i.a.node,className:i.a.string,cssModule:i.a.object},or=function(e){var t=e.className,n=e.cssModule,r=e.tag,a=e.addonType,i=e.children,s=ge(e,["className","cssModule","tag","addonType","children"]),l=W(u()(t,"input-group-"+a),n);return"string"==typeof i?o.a.createElement(r,pe({},s,{className:l}),o.a.createElement(nr,{children:i})):o.a.createElement(r,pe({},s,{className:l,children:i}))};or.propTypes=rr,or.defaultProps={tag:"div"};var ar={tag:i.a.oneOfType([i.a.func,i.a.string]),addonType:i.a.oneOf(["prepend","append"]).isRequired,children:i.a.node,groupClassName:i.a.string,groupAttributes:i.a.object,className:i.a.string,cssModule:i.a.object},ir=function(e){X('The "InputGroupButton" component has been deprecated.\nPlease use component "InputGroupAddon".');var t=e.children,n=e.groupClassName,r=e.groupAttributes,a=ge(e,["children","groupClassName","groupAttributes"]);if("string"==typeof t){var i=a.cssModule,s=a.tag,u=a.addonType,l=ge(a,["cssModule","tag","addonType"]),c=pe({},r,{cssModule:i,tag:s,addonType:u});return o.a.createElement(or,pe({},c,{className:n}),o.a.createElement(Ye,pe({},l,{children:t})))}return o.a.createElement(or,pe({},e,{children:t}))};ir.propTypes=ar;var sr={addonType:i.a.oneOf(["prepend","append"]).isRequired,children:i.a.node},ur=function(e){return o.a.createElement(Fe,e)};ur.propTypes=sr;var lr=i.a.oneOfType([i.a.number,i.a.string]),cr=i.a.oneOfType([i.a.string,i.a.number,i.a.shape({size:lr,push:K(lr,'Please use the prop "order"'),pull:K(lr,'Please use the prop "order"'),order:lr,offset:lr})]),fr={children:i.a.node,hidden:i.a.bool,check:i.a.bool,size:i.a.string,for:i.a.string,tag:i.a.string,className:i.a.string,cssModule:i.a.object,xs:cr,sm:cr,md:cr,lg:cr,xl:cr,widths:i.a.array},dr={tag:"label",widths:["xs","sm","md","lg","xl"]},pr=function(e,t,n){return!0===n||""===n?e?"col":"col-"+t:"auto"===n?e?"col-auto":"col-"+t+"-auto":e?"col-"+n:"col-"+t+"-"+n},hr=function(e){var t=e.className,n=e.cssModule,r=e.hidden,a=e.widths,i=e.tag,s=e.check,l=e.size,c=e.for,f=ge(e,["className","cssModule","hidden","widths","tag","check","size","for"]),p=[];a.forEach(function(t,r){var o=e[t];if(delete f[t],o||""===o){var a=!r,i=void 0;if(d()(o)){var s,l=a?"-":"-"+t+"-";i=pr(a,t,o.size),p.push(W(u()((de(s={},i,o.size||""===o.size),de(s,"order"+l+o.order,o.order||0===o.order),de(s,"offset"+l+o.offset,o.offset||0===o.offset),s))),n)}else i=pr(a,t,o),p.push(i)}});var h=W(u()(t,!!r&&"sr-only",!!s&&"form-check-label",!!l&&"col-form-label-"+l,p,!!p.length&&"col-form-label"),n);return o.a.createElement(i,pe({htmlFor:c},f,{className:h}))};hr.propTypes=fr,hr.defaultProps=dr;var gr={body:i.a.bool,bottom:i.a.bool,children:i.a.node,className:i.a.string,cssModule:i.a.object,heading:i.a.bool,left:i.a.bool,list:i.a.bool,middle:i.a.bool,object:i.a.bool,right:i.a.bool,tag:i.a.oneOfType([i.a.func,i.a.string]),top:i.a.bool},vr=function(e){var t=e.body,n=e.bottom,r=e.className,a=e.cssModule,i=e.heading,s=e.left,l=e.list,c=e.middle,f=e.object,d=e.right,p=e.tag,h=e.top,g=ge(e,["body","bottom","className","cssModule","heading","left","list","middle","object","right","tag","top"]),v=void 0;v=i?"h4":g.href?"a":g.src||f?"img":l?"ul":"div";var m=p||v,y=W(u()(r,{"media-body":t,"media-heading":i,"media-left":s,"media-right":d,"media-top":h,"media-bottom":n,"media-middle":c,"media-object":f,"media-list":l,media:!(t||i||s||d||h||n||c||f||l)}),a);return o.a.createElement(m,pe({},g,{className:y}))};vr.propTypes=gr;var mr={children:i.a.node,className:i.a.string,listClassName:i.a.string,cssModule:i.a.object,size:i.a.string,tag:i.a.oneOfType([i.a.func,i.a.string]),listTag:i.a.oneOfType([i.a.func,i.a.string]),"aria-label":i.a.string},yr=function(e){var t=e.className,n=e.listClassName,r=e.cssModule,a=e.size,i=e.tag,s=e.listTag,l=e["aria-label"],c=ge(e,["className","listClassName","cssModule","size","tag","listTag","aria-label"]),f=W(u()(t),r),d=W(u()(n,"pagination",de({},"pagination-"+a,!!a)),r);return o.a.createElement(i,{className:f,"aria-label":l},o.a.createElement(s,pe({},c,{className:d})))};yr.propTypes=mr,yr.defaultProps={tag:"nav",listTag:"ul","aria-label":"pagination"};var wr={active:i.a.bool,children:i.a.node,className:i.a.string,cssModule:i.a.object,disabled:i.a.bool,tag:i.a.oneOfType([i.a.func,i.a.string])},br=function(e){var t=e.active,n=e.className,r=e.cssModule,a=e.disabled,i=e.tag,s=ge(e,["active","className","cssModule","disabled","tag"]),l=W(u()(n,"page-item",{active:t,disabled:a}),r);return o.a.createElement(i,pe({},s,{className:l}))};br.propTypes=wr,br.defaultProps={tag:"li"};var Er={"aria-label":i.a.string,children:i.a.node,className:i.a.string,cssModule:i.a.object,next:i.a.bool,previous:i.a.bool,tag:i.a.oneOfType([i.a.func,i.a.string])},_r=function(e){var t=e.className,n=e.cssModule,r=e.next,a=e.previous,i=e.tag,s=ge(e,["className","cssModule","next","previous","tag"]),l=W(u()(t,"page-link"),n),c=void 0;a?c="Previous":r&&(c="Next");var f=e["aria-label"]||c,d=void 0;a?d="«":r&&(d="»");var p=e.children;return p&&Array.isArray(p)&&0===p.length&&(p=null),s.href||"a"!==i||(i="button"),(a||r)&&(p=[o.a.createElement("span",{"aria-hidden":"true",key:"caret"},p||d),o.a.createElement("span",{className:"sr-only",key:"sr"},f)]),o.a.createElement(i,pe({},s,{className:l,"aria-label":f}),p)};_r.propTypes=Er,_r.defaultProps={tag:"a"};var Cr={tag:i.a.oneOfType([i.a.func,i.a.string]),activeTab:i.a.any,className:i.a.string,cssModule:i.a.object},Tr={activeTabId:i.a.any},Or=function(e){function t(e){ce(this,t);var n=ve(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.state={activeTab:n.props.activeTab},n}return he(t,e),fe(t,null,[{key:"getDerivedStateFromProps",value:function(e,t){return t.activeTab!==e.activeTab?{activeTab:e.activeTab}:null}}]),fe(t,[{key:"getChildContext",value:function(){return{activeTabId:this.state.activeTab}}},{key:"render",value:function(){var e=this.props,t=e.className,n=e.cssModule,r=e.tag,a=V(this.props,Object.keys(Cr)),i=W(u()("tab-content",t),n);return o.a.createElement(r,pe({},a,{className:i}))}}]),t}(r.Component);!function(e){var t=e.prototype;if(!t||!t.isReactComponent)throw new Error("Can only polyfill class components");if("function"!=typeof e.getDerivedStateFromProps&&"function"!=typeof t.getSnapshotBeforeUpdate)return e;var n=null,r=null,o=null;if("function"==typeof t.componentWillMount?n="componentWillMount":"function"==typeof t.UNSAFE_componentWillMount&&(n="UNSAFE_componentWillMount"),"function"==typeof t.componentWillReceiveProps?r="componentWillReceiveProps":"function"==typeof t.UNSAFE_componentWillReceiveProps&&(r="UNSAFE_componentWillReceiveProps"),"function"==typeof t.componentWillUpdate?o="componentWillUpdate":"function"==typeof t.UNSAFE_componentWillUpdate&&(o="UNSAFE_componentWillUpdate"),null!==n||null!==r||null!==o){var a=e.displayName||e.name,i="function"==typeof e.getDerivedStateFromProps?"getDerivedStateFromProps()":"getSnapshotBeforeUpdate()";throw Error("Unsafe legacy lifecycles will not be called for components using new component APIs.\n\n"+a+" uses "+i+" but also contains the following legacy lifecycles:"+(null!==n?"\n  "+n:"")+(null!==r?"\n  "+r:"")+(null!==o?"\n  "+o:"")+"\n\nThe above lifecycles should be removed. Learn more about this warning here:\nhttps://fb.me/react-async-component-lifecycle-hooks")}if("function"==typeof e.getDerivedStateFromProps&&(t.componentWillMount=R,t.componentWillReceiveProps=D),"function"==typeof t.getSnapshotBeforeUpdate){if("function"!=typeof t.componentDidUpdate)throw new Error("Cannot polyfill getSnapshotBeforeUpdate() for components that do not define componentDidUpdate() on the prototype");t.componentWillUpdate=B;var s=t.componentDidUpdate;t.componentDidUpdate=function(e,t,n){var r=this.__reactInternalSnapshotFlag?this.__reactInternalSnapshot:n;s.call(this,e,t,r)}}}(Or),Or.propTypes=Cr,Or.defaultProps={tag:"div"},Or.childContextTypes=Tr;var Sr={tag:i.a.oneOfType([i.a.func,i.a.string]),className:i.a.string,cssModule:i.a.object,tabId:i.a.any},Nr={activeTabId:i.a.any};function Ar(e,t){var n=e.className,r=e.cssModule,a=e.tabId,i=e.tag,s=ge(e,["className","cssModule","tabId","tag"]),l=W(u()("tab-pane",n,{active:a===t.activeTabId}),r);return o.a.createElement(i,pe({},s,{className:l}))}Ar.propTypes=Sr,Ar.defaultProps={tag:"div"},Ar.contextTypes=Nr;var Pr={tag:i.a.oneOfType([i.a.func,i.a.string]),fluid:i.a.bool,className:i.a.string,cssModule:i.a.object},Ir=function(e){var t=e.className,n=e.cssModule,r=e.tag,a=e.fluid,i=ge(e,["className","cssModule","tag","fluid"]),s=W(u()(t,"jumbotron",!!a&&"jumbotron-fluid"),n);return o.a.createElement(r,pe({},i,{className:s}))};Ir.propTypes=Pr,Ir.defaultProps={tag:"div"};var Mr,kr={children:i.a.node,className:i.a.string,closeClassName:i.a.string,closeAriaLabel:i.a.string,cssModule:i.a.object,color:i.a.string,fade:i.a.bool,isOpen:i.a.bool,toggle:i.a.func,tag:i.a.oneOfType([i.a.func,i.a.string]),transition:i.a.shape(yt.propTypes),innerRef:i.a.oneOfType([i.a.object,i.a.string,i.a.func])},xr={color:"success",isOpen:!0,tag:"div",closeAriaLabel:"Close",fade:!0,transition:pe({},yt.defaultProps,{unmountOnExit:!0})};function Rr(e){var t=e.className,n=e.closeClassName,r=e.closeAriaLabel,a=e.cssModule,i=e.tag,s=e.color,l=e.isOpen,c=e.toggle,f=e.children,d=e.transition,p=e.fade,h=e.innerRef,g=ge(e,["className","closeClassName","closeAriaLabel","cssModule","tag","color","isOpen","toggle","children","transition","fade","innerRef"]),v=W(u()(t,"alert","alert-"+s,{"alert-dismissible":c}),a),m=W(u()("close",n),a),y=pe({},yt.defaultProps,d,{baseClass:p?d.baseClass:"",timeout:p?d.timeout:0});return o.a.createElement(yt,pe({},g,y,{tag:i,className:v,in:l,role:"alert",innerRef:h}),c?o.a.createElement("button",{type:"button",className:m,"aria-label":r,onClick:c},o.a.createElement("span",{"aria-hidden":"true"},"×")):null,f)}Rr.propTypes=kr,Rr.defaultProps=xr;var Dr=pe({},gt.propTypes,{isOpen:i.a.bool,children:i.a.oneOfType([i.a.arrayOf(i.a.node),i.a.node]),tag:i.a.oneOfType([i.a.func,i.a.string]),className:i.a.node,navbar:i.a.bool,cssModule:i.a.object,innerRef:i.a.oneOfType([i.a.func,i.a.string,i.a.object])}),Br=pe({},gt.defaultProps,{isOpen:!1,appear:!1,enter:!0,exit:!0,tag:"div",timeout:Z.Collapse}),jr=(de(Mr={},$.ENTERING,"collapsing"),de(Mr,$.ENTERED,"collapse show"),de(Mr,$.EXITING,"collapsing"),de(Mr,$.EXITED,"collapse"),Mr);function Lr(e){return e.scrollHeight}var Ur=function(e){function t(e){ce(this,t);var n=ve(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.state={height:null},["onEntering","onEntered","onExit","onExiting","onExited"].forEach(function(e){n[e]=n[e].bind(n)}),n}return he(t,e),fe(t,[{key:"onEntering",value:function(e,t){this.setState({height:Lr(e)}),this.props.onEntering(e,t)}},{key:"onEntered",value:function(e,t){this.setState({height:null}),this.props.onEntered(e,t)}},{key:"onExit",value:function(e){this.setState({height:Lr(e)}),this.props.onExit(e)}},{key:"onExiting",value:function(e){e.offsetHeight;this.setState({height:0}),this.props.onExiting(e)}},{key:"onExited",value:function(e){this.setState({height:null}),this.props.onExited(e)}},{key:"render",value:function(){var e=this,t=this.props,n=t.tag,r=t.isOpen,a=t.className,i=t.navbar,s=t.cssModule,l=t.children,c=(t.innerRef,ge(t,["tag","isOpen","className","navbar","cssModule","children","innerRef"])),f=this.state.height,d=G(c,Q),p=V(c,Q);return o.a.createElement(gt,pe({},d,{in:r,onEntering:this.onEntering,onEntered:this.onEntered,onExit:this.onExit,onExiting:this.onExiting,onExited:this.onExited}),function(t){var r=function(e){return jr[e]||"collapse"}(t),c=W(u()(a,r,i&&"navbar-collapse"),s),d=null===f?null:{height:f};return o.a.createElement(n,pe({},p,{style:pe({},p.style,d),className:c,ref:e.props.innerRef}),l)})}}]),t}(r.Component);Ur.propTypes=Dr,Ur.defaultProps=Br;var Fr={tag:i.a.oneOfType([i.a.func,i.a.string]),active:i.a.bool,disabled:i.a.bool,color:i.a.string,action:i.a.bool,className:i.a.any,cssModule:i.a.object},zr=function(e){e.preventDefault()},Hr=function(e){var t=e.className,n=e.cssModule,r=e.tag,a=e.active,i=e.disabled,s=e.action,l=e.color,c=ge(e,["className","cssModule","tag","active","disabled","action","color"]),f=W(u()(t,!!a&&"active",!!i&&"disabled",!!s&&"list-group-item-action",!!l&&"list-group-item-"+l,"list-group-item"),n);return i&&(c.onClick=zr),o.a.createElement(r,pe({},c,{className:f}))};Hr.propTypes=Fr,Hr.defaultProps={tag:"li"};var Wr={tag:i.a.oneOfType([i.a.func,i.a.string]),className:i.a.any,cssModule:i.a.object},Vr=function(e){var t=e.className,n=e.cssModule,r=e.tag,a=ge(e,["className","cssModule","tag"]),i=W(u()(t,"list-group-item-heading"),n);return o.a.createElement(r,pe({},a,{className:i}))};Vr.propTypes=Wr,Vr.defaultProps={tag:"h5"};var Gr={tag:i.a.oneOfType([i.a.func,i.a.string]),className:i.a.any,cssModule:i.a.object},qr=function(e){var t=e.className,n=e.cssModule,r=e.tag,a=ge(e,["className","cssModule","tag"]),i=W(u()(t,"list-group-item-text"),n);return o.a.createElement(r,pe({},a,{className:i}))};qr.propTypes=Gr,qr.defaultProps={tag:"p"};var Xr=function(e){function t(e){ce(this,t);var n=ve(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.state={isOpen:!0},n.toggle=n.toggle.bind(n),n}return he(t,e),fe(t,[{key:"toggle",value:function(){this.setState({isOpen:!this.state.isOpen})}},{key:"render",value:function(){return o.a.createElement(Rr,pe({isOpen:this.state.isOpen,toggle:this.toggle},this.props))}}]),t}(r.Component),Kr=function(e){function t(e){ce(this,t);var n=ve(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.state={isOpen:!1},n.toggle=n.toggle.bind(n),n}return he(t,e),fe(t,[{key:"toggle",value:function(){this.setState({isOpen:!this.state.isOpen})}},{key:"render",value:function(){return o.a.createElement(Qe,pe({isOpen:this.state.isOpen,toggle:this.toggle},this.props))}}]),t}(r.Component),Yr={toggler:i.a.string.isRequired,toggleEvents:i.a.arrayOf(i.a.string)},Zr={toggleEvents:ae},Qr=function(e){function t(e){ce(this,t);var n=ve(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.togglers=null,n.removeEventListeners=null,n.toggle=n.toggle.bind(n),n.state={isOpen:!1},n}return he(t,e),fe(t,[{key:"componentDidMount",value:function(){this.togglers=ne(this.props.toggler),this.togglers.length&&(this.removeEventListeners=ie(this.togglers,this.toggle,this.props.toggleEvents))}},{key:"componentWillUnmount",value:function(){this.togglers.length&&this.removeEventListeners&&this.removeEventListeners()}},{key:"toggle",value:function(e){this.setState(function(e){return{isOpen:!e.isOpen}}),e.preventDefault()}},{key:"render",value:function(){var e=this.props,t=(e.toggleEvents,ge(e,["toggleEvents"]));return o.a.createElement(Ur,pe({isOpen:this.state.isOpen},t))}}]),t}(r.Component);Qr.propTypes=Yr,Qr.defaultProps=Zr;var $r=function(e){function t(e){ce(this,t);var n=ve(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.state={isOpen:!1},n.toggle=n.toggle.bind(n),n}return he(t,e),fe(t,[{key:"toggle",value:function(){this.setState({isOpen:!this.state.isOpen})}},{key:"render",value:function(){return o.a.createElement(Fe,pe({isOpen:this.state.isOpen,toggle:this.toggle},this.props))}}]),t}(r.Component),Jr=function(e){return X('The "UncontrolledNavDropdown" component has been deprecated.\nPlease use component "UncontrolledDropdown" with nav prop.'),o.a.createElement($r,pe({nav:!0},e))},eo=function(e){function t(e){ce(this,t);var n=ve(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.state={isOpen:!1},n.toggle=n.toggle.bind(n),n}return he(t,e),fe(t,[{key:"toggle",value:function(){this.setState({isOpen:!this.state.isOpen})}},{key:"render",value:function(){return o.a.createElement(jn,pe({isOpen:this.state.isOpen,toggle:this.toggle},this.props))}}]),t}(r.Component)},function(e,t,n){"use strict";function r(e){var t,n=e.Symbol;return"function"==typeof n?n.observable?t=n.observable:(t=n("observable"),n.observable=t):t="@@observable",t}n.d(t,"a",function(){return r})},function(e,t,n){"use strict";var r={childContextTypes:!0,contextTypes:!0,defaultProps:!0,displayName:!0,getDefaultProps:!0,getDerivedStateFromProps:!0,mixins:!0,propTypes:!0,type:!0},o={name:!0,length:!0,prototype:!0,caller:!0,callee:!0,arguments:!0,arity:!0},a=Object.defineProperty,i=Object.getOwnPropertyNames,s=Object.getOwnPropertySymbols,u=Object.getOwnPropertyDescriptor,l=Object.getPrototypeOf,c=l&&l(Object);e.exports=function e(t,n,f){if("string"!=typeof n){if(c){var d=l(n);d&&d!==c&&e(t,d,f)}var p=i(n);s&&(p=p.concat(s(n)));for(var h=0;h<p.length;++h){var g=p[h];if(!(r[g]||o[g]||f&&f[g])){var v=u(n,g);try{a(t,g,v)}catch(e){}}}return t}return t}},function(e,t,n){"use strict";(function(e){var n="object"==typeof e&&e&&e.Object===Object&&e;t.a=n}).call(this,n(26))},function(e,t,n){e.exports=n(96)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),n(97);var r=n(1),o=n(91),a=n(105),i=n(52),s=n(58),u=n(107),l=n(17),c=n(113),f=n(115),d=n(90),p=n(116),h=n(117),g=n(66),v=u.default();v.location,v.listen(function(e,t){console.log(t,e.pathname,e.state)});v.push("/home",{some:"state",complex:{list:["this","is","a","complex","state"]}}),v.push("/home2",{some:"state",simple:"this is a simple state"});var m=window;m.h=v,m.values={};var y=("object"==typeof window&&m.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__?m.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__({}):i.compose)(i.applyMiddleware(p.default)),w=i.createStore(s.default,y);w.dispatch(function(e){console.log("try dispatch fetch response");var t=h.default.get("forms/projects");return t.then(function(t){console.log("the response",t.data),e({type:s.Type[s.Type.LOAD_FORM],form:t.data})},function(e){return console.log(e)}),t});var b=document.querySelector("body");function E(e){switch(e.keyCode){case 38:w.dispatch({type:s.Type[s.Type.NAVIGATE_UP]});break;case 40:w.dispatch({type:s.Type[s.Type.NAVIGATE_DOWN]});break;case 37:w.dispatch({type:s.Type[s.Type.NAVIGATE_LEFT]});break;case 39:w.dispatch({type:s.Type[s.Type.NAVIGATE_RIGHT]});break;case 13:w.dispatch({type:s.Type[s.Type.NAVIGATE_ENTER]});break;default:console.log(e.keyCode)}}var _=[],C=new g.BrowserQRCodeReader;C.getVideoInputDevices().then(function(e){_=e.map(function(e){return r.createElement("div",{onClick:function(){return function(e){console.log("device selected",e),C.decodeFromInputVideoDevice(e,"video").then(function(e){return console.log(e)}).catch(function(e){return console.error(e)})}(e.deviceId)}},e.label,": ",e.deviceId)}),O(),C.decodeFromInputVideoDevice(void 0,"video").then(function(e){return console.log(e)}).catch(function(e){return console.error(e)})}).catch(function(e){return console.error(e)});var T=r.createElement("video",{id:"video",width:"300",height:"200",style:{border:"1px solid gray"}});function O(){var e=s.fromPath(w.getState().value,w.getState().selectionPath),t=r.createElement(d.Provider,{store:w},r.createElement(o.Container,null,r.createElement(o.Row,null,r.createElement(o.Col,{sm:12},r.createElement("h1",null,"Vertest"))),r.createElement(o.Row,null,r.createElement(o.Col,{sm:3},r.createElement(a.default,{tabIndex:0,navigationPath:w.getState().navigationPath,selectionPath:w.getState().selectionPath,value:w.getState().value,onExpand:function(e){return w.dispatch({type:s.Type[s.Type.EXPAND_TOGGLE],path:e})},onSelect:function(e){return w.dispatch({type:s.Type[s.Type.SELECT_TOGGLE],path:e})},onKeyboardDown:E})),r.createElement(o.Col,{sm:9},r.createElement(c.default,null,r.createElement(o.CardHeader,null,e.name),r.createElement(o.CardBody,null,"Link:",e.link,r.createElement(f.default,null))),T,_))));l.render(t,b)}O(),w.subscribe(O),console.log(T)},function(e,t,n){},,function(e,t,n){"use strict";
/** @license React v16.5.0
 * react.production.min.js
 *
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r=n(57),o="function"==typeof Symbol&&Symbol.for,a=o?Symbol.for("react.element"):60103,i=o?Symbol.for("react.portal"):60106,s=o?Symbol.for("react.fragment"):60107,u=o?Symbol.for("react.strict_mode"):60108,l=o?Symbol.for("react.profiler"):60114,c=o?Symbol.for("react.provider"):60109,f=o?Symbol.for("react.context"):60110,d=o?Symbol.for("react.async_mode"):60111,p=o?Symbol.for("react.forward_ref"):60112;o&&Symbol.for("react.placeholder");var h="function"==typeof Symbol&&Symbol.iterator;function g(e){for(var t=arguments.length-1,n="https://reactjs.org/docs/error-decoder.html?invariant="+e,r=0;r<t;r++)n+="&args[]="+encodeURIComponent(arguments[r+1]);!function(e,t,n,r,o,a,i,s){if(!e){if(e=void 0,void 0===t)e=Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else{var u=[n,r,o,a,i,s],l=0;(e=Error(t.replace(/%s/g,function(){return u[l++]}))).name="Invariant Violation"}throw e.framesToPop=1,e}}(!1,"Minified React error #"+e+"; visit %s for the full message or use the non-minified dev environment for full errors and additional helpful warnings. ",n)}var v={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},m={};function y(e,t,n){this.props=e,this.context=t,this.refs=m,this.updater=n||v}function w(){}function b(e,t,n){this.props=e,this.context=t,this.refs=m,this.updater=n||v}y.prototype.isReactComponent={},y.prototype.setState=function(e,t){"object"!=typeof e&&"function"!=typeof e&&null!=e&&g("85"),this.updater.enqueueSetState(this,e,t,"setState")},y.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},w.prototype=y.prototype;var E=b.prototype=new w;E.constructor=b,r(E,y.prototype),E.isPureReactComponent=!0;var _={current:null,currentDispatcher:null},C=Object.prototype.hasOwnProperty,T={key:!0,ref:!0,__self:!0,__source:!0};function O(e,t,n){var r=void 0,o={},i=null,s=null;if(null!=t)for(r in void 0!==t.ref&&(s=t.ref),void 0!==t.key&&(i=""+t.key),t)C.call(t,r)&&!T.hasOwnProperty(r)&&(o[r]=t[r]);var u=arguments.length-2;if(1===u)o.children=n;else if(1<u){for(var l=Array(u),c=0;c<u;c++)l[c]=arguments[c+2];o.children=l}if(e&&e.defaultProps)for(r in u=e.defaultProps)void 0===o[r]&&(o[r]=u[r]);return{$$typeof:a,type:e,key:i,ref:s,props:o,_owner:_.current}}function S(e){return"object"==typeof e&&null!==e&&e.$$typeof===a}var N=/\/+/g,A=[];function P(e,t,n,r){if(A.length){var o=A.pop();return o.result=e,o.keyPrefix=t,o.func=n,o.context=r,o.count=0,o}return{result:e,keyPrefix:t,func:n,context:r,count:0}}function I(e){e.result=null,e.keyPrefix=null,e.func=null,e.context=null,e.count=0,10>A.length&&A.push(e)}function M(e,t,n){return null==e?0:function e(t,n,r,o){var s=typeof t;"undefined"!==s&&"boolean"!==s||(t=null);var u=!1;if(null===t)u=!0;else switch(s){case"string":case"number":u=!0;break;case"object":switch(t.$$typeof){case a:case i:u=!0}}if(u)return r(o,t,""===n?"."+k(t,0):n),1;if(u=0,n=""===n?".":n+":",Array.isArray(t))for(var l=0;l<t.length;l++){var c=n+k(s=t[l],l);u+=e(s,c,r,o)}else if(c=null===t||"object"!=typeof t?null:"function"==typeof(c=h&&t[h]||t["@@iterator"])?c:null,"function"==typeof c)for(t=c.call(t),l=0;!(s=t.next()).done;)u+=e(s=s.value,c=n+k(s,l++),r,o);else"object"===s&&g("31","[object Object]"==(r=""+t)?"object with keys {"+Object.keys(t).join(", ")+"}":r,"");return u}(e,"",t,n)}function k(e,t){return"object"==typeof e&&null!==e&&null!=e.key?function(e){var t={"=":"=0",":":"=2"};return"$"+(""+e).replace(/[=:]/g,function(e){return t[e]})}(e.key):t.toString(36)}function x(e,t){e.func.call(e.context,t,e.count++)}function R(e,t,n){var r=e.result,o=e.keyPrefix;e=e.func.call(e.context,t,e.count++),Array.isArray(e)?D(e,r,n,function(e){return e}):null!=e&&(S(e)&&(e=function(e,t){return{$$typeof:a,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}}(e,o+(!e.key||t&&t.key===e.key?"":(""+e.key).replace(N,"$&/")+"/")+n)),r.push(e))}function D(e,t,n,r,o){var a="";null!=n&&(a=(""+n).replace(N,"$&/")+"/"),M(e,R,t=P(t,a,r,o)),I(t)}var B={Children:{map:function(e,t,n){if(null==e)return e;var r=[];return D(e,r,null,t,n),r},forEach:function(e,t,n){if(null==e)return e;M(e,x,t=P(null,null,t,n)),I(t)},count:function(e){return M(e,function(){return null},null)},toArray:function(e){var t=[];return D(e,t,null,function(e){return e}),t},only:function(e){return S(e)||g("143"),e}},createRef:function(){return{current:null}},Component:y,PureComponent:b,createContext:function(e,t){return void 0===t&&(t=null),(e={$$typeof:f,_calculateChangedBits:t,_currentValue:e,_currentValue2:e,Provider:null,Consumer:null,unstable_read:null}).Provider={$$typeof:c,_context:e},e.Consumer=e,e.unstable_read=function(e,t){var n=_.currentDispatcher;return null===n&&g("277"),n.readContext(e,t)}.bind(null,e),e},forwardRef:function(e){return{$$typeof:p,render:e}},Fragment:s,StrictMode:u,unstable_AsyncMode:d,unstable_Profiler:l,createElement:O,cloneElement:function(e,t,n){(null===e||void 0===e)&&g("267",e);var o=void 0,i=r({},e.props),s=e.key,u=e.ref,l=e._owner;if(null!=t){void 0!==t.ref&&(u=t.ref,l=_.current),void 0!==t.key&&(s=""+t.key);var c=void 0;for(o in e.type&&e.type.defaultProps&&(c=e.type.defaultProps),t)C.call(t,o)&&!T.hasOwnProperty(o)&&(i[o]=void 0===t[o]&&void 0!==c?c[o]:t[o])}if(1===(o=arguments.length-2))i.children=n;else if(1<o){c=Array(o);for(var f=0;f<o;f++)c[f]=arguments[f+2];i.children=c}return{$$typeof:a,type:e.type,key:s,ref:u,props:i,_owner:l}},createFactory:function(e){var t=O.bind(null,e);return t.type=e,t},isValidElement:S,version:"16.5.0",__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED:{ReactCurrentOwner:_,assign:r}},j={default:B},L=j&&B||j;e.exports=L.default||L},function(e,t,n){"use strict";var r=n(101);function o(){}e.exports=function(){function e(e,t,n,o,a,i){if(i!==r){var s=new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types");throw s.name="Invariant Violation",s}}function t(){return e}e.isRequired=e;var n={array:e,bool:e,func:e,number:e,object:e,string:e,symbol:e,any:e,arrayOf:t,element:e,instanceOf:t,node:e,objectOf:t,oneOf:t,oneOfType:t,shape:t,exact:t};return n.checkPropTypes=o,n.PropTypes=n,n}},function(e,t,n){"use strict";e.exports="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"},function(e,t,n){"use strict";
/** @license React v16.5.0
 * react-dom.production.min.js
 *
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r=n(1),o=n(57),a=n(103);function i(e){for(var t=arguments.length-1,n="https://reactjs.org/docs/error-decoder.html?invariant="+e,r=0;r<t;r++)n+="&args[]="+encodeURIComponent(arguments[r+1]);!function(e,t,n,r,o,a,i,s){if(!e){if(e=void 0,void 0===t)e=Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else{var u=[n,r,o,a,i,s],l=0;(e=Error(t.replace(/%s/g,function(){return u[l++]}))).name="Invariant Violation"}throw e.framesToPop=1,e}}(!1,"Minified React error #"+e+"; visit %s for the full message or use the non-minified dev environment for full errors and additional helpful warnings. ",n)}r||i("227");var s=!1,u=null,l=!1,c=null,f={onError:function(e){s=!0,u=e}};function d(e,t,n,r,o,a,i,l,c){s=!1,u=null,function(e,t,n,r,o,a,i,s,u){var l=Array.prototype.slice.call(arguments,3);try{t.apply(n,l)}catch(e){this.onError(e)}}.apply(f,arguments)}var p=null,h={};function g(){if(p)for(var e in h){var t=h[e],n=p.indexOf(e);if(-1<n||i("96",e),!m[n])for(var r in t.extractEvents||i("97",e),m[n]=t,n=t.eventTypes){var o=void 0,a=n[r],s=t,u=r;y.hasOwnProperty(u)&&i("99",u),y[u]=a;var l=a.phasedRegistrationNames;if(l){for(o in l)l.hasOwnProperty(o)&&v(l[o],s,u);o=!0}else a.registrationName?(v(a.registrationName,s,u),o=!0):o=!1;o||i("98",r,e)}}}function v(e,t,n){w[e]&&i("100",e),w[e]=t,b[e]=t.eventTypes[n].dependencies}var m=[],y={},w={},b={},E=null,_=null,C=null;function T(e,t,n,r){t=e.type||"unknown-event",e.currentTarget=C(r),function(e,t,n,r,o,a,f,p,h){if(d.apply(this,arguments),s){if(s){var g=u;s=!1,u=null}else i("198"),g=void 0;l||(l=!0,c=g)}}(t,n,void 0,e),e.currentTarget=null}function O(e,t){return null==t&&i("30"),null==e?t:Array.isArray(e)?Array.isArray(t)?(e.push.apply(e,t),e):(e.push(t),e):Array.isArray(t)?[e].concat(t):[e,t]}function S(e,t,n){Array.isArray(e)?e.forEach(t,n):e&&t.call(n,e)}var N=null;function A(e,t){if(e){var n=e._dispatchListeners,r=e._dispatchInstances;if(Array.isArray(n))for(var o=0;o<n.length&&!e.isPropagationStopped();o++)T(e,t,n[o],r[o]);else n&&T(e,t,n,r);e._dispatchListeners=null,e._dispatchInstances=null,e.isPersistent()||e.constructor.release(e)}}function P(e){return A(e,!0)}function I(e){return A(e,!1)}var M=function(e){p&&i("101"),p=Array.prototype.slice.call(e),g()},k=function(e){var t,n=!1;for(t in e)if(e.hasOwnProperty(t)){var r=e[t];h.hasOwnProperty(t)&&h[t]===r||(h[t]&&i("102",t),h[t]=r,n=!0)}n&&g()};function x(e,t){var n=e.stateNode;if(!n)return null;var r=E(n);if(!r)return null;n=r[t];e:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":(r=!r.disabled)||(r=!("button"===(e=e.type)||"input"===e||"select"===e||"textarea"===e)),e=!r;break e;default:e=!1}return e?null:(n&&"function"!=typeof n&&i("231",t,typeof n),n)}function R(e,t){if(null!==e&&(N=O(N,e)),e=N,N=null,e&&(S(e,t?P:I),N&&i("95"),l))throw t=c,l=!1,c=null,t}var D=Math.random().toString(36).slice(2),B="__reactInternalInstance$"+D,j="__reactEventHandlers$"+D;function L(e){if(e[B])return e[B];for(;!e[B];){if(!e.parentNode)return null;e=e.parentNode}return 7===(e=e[B]).tag||8===e.tag?e:null}function U(e){return!(e=e[B])||7!==e.tag&&8!==e.tag?null:e}function F(e){if(7===e.tag||8===e.tag)return e.stateNode;i("33")}function z(e){return e[j]||null}function H(e){do{e=e.return}while(e&&7!==e.tag);return e||null}function W(e,t,n){(t=x(e,n.dispatchConfig.phasedRegistrationNames[t]))&&(n._dispatchListeners=O(n._dispatchListeners,t),n._dispatchInstances=O(n._dispatchInstances,e))}function V(e){if(e&&e.dispatchConfig.phasedRegistrationNames){for(var t=e._targetInst,n=[];t;)n.push(t),t=H(t);for(t=n.length;0<t--;)W(n[t],"captured",e);for(t=0;t<n.length;t++)W(n[t],"bubbled",e)}}function G(e,t,n){e&&n&&n.dispatchConfig.registrationName&&(t=x(e,n.dispatchConfig.registrationName))&&(n._dispatchListeners=O(n._dispatchListeners,t),n._dispatchInstances=O(n._dispatchInstances,e))}function q(e){e&&e.dispatchConfig.registrationName&&G(e._targetInst,null,e)}function X(e){S(e,V)}var K=!("undefined"==typeof window||!window.document||!window.document.createElement);function Y(e,t){var n={};return n[e.toLowerCase()]=t.toLowerCase(),n["Webkit"+e]="webkit"+t,n["Moz"+e]="moz"+t,n}var Z={animationend:Y("Animation","AnimationEnd"),animationiteration:Y("Animation","AnimationIteration"),animationstart:Y("Animation","AnimationStart"),transitionend:Y("Transition","TransitionEnd")},Q={},$={};function J(e){if(Q[e])return Q[e];if(!Z[e])return e;var t,n=Z[e];for(t in n)if(n.hasOwnProperty(t)&&t in $)return Q[e]=n[t];return e}K&&($=document.createElement("div").style,"AnimationEvent"in window||(delete Z.animationend.animation,delete Z.animationiteration.animation,delete Z.animationstart.animation),"TransitionEvent"in window||delete Z.transitionend.transition);var ee=J("animationend"),te=J("animationiteration"),ne=J("animationstart"),re=J("transitionend"),oe="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),ae=null,ie=null,se=null;function ue(){if(se)return se;var e,t,n=ie,r=n.length,o="value"in ae?ae.value:ae.textContent,a=o.length;for(e=0;e<r&&n[e]===o[e];e++);var i=r-e;for(t=1;t<=i&&n[r-t]===o[a-t];t++);return se=o.slice(e,1<t?1-t:void 0)}function le(){return!0}function ce(){return!1}function fe(e,t,n,r){for(var o in this.dispatchConfig=e,this._targetInst=t,this.nativeEvent=n,e=this.constructor.Interface)e.hasOwnProperty(o)&&((t=e[o])?this[o]=t(n):"target"===o?this.target=r:this[o]=n[o]);return this.isDefaultPrevented=(null!=n.defaultPrevented?n.defaultPrevented:!1===n.returnValue)?le:ce,this.isPropagationStopped=ce,this}function de(e,t,n,r){if(this.eventPool.length){var o=this.eventPool.pop();return this.call(o,e,t,n,r),o}return new this(e,t,n,r)}function pe(e){e instanceof this||i("279"),e.destructor(),10>this.eventPool.length&&this.eventPool.push(e)}function he(e){e.eventPool=[],e.getPooled=de,e.release=pe}o(fe.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=le)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=le)},persist:function(){this.isPersistent=le},isPersistent:ce,destructor:function(){var e,t=this.constructor.Interface;for(e in t)this[e]=null;this.nativeEvent=this._targetInst=this.dispatchConfig=null,this.isPropagationStopped=this.isDefaultPrevented=ce,this._dispatchInstances=this._dispatchListeners=null}}),fe.Interface={type:null,target:null,currentTarget:function(){return null},eventPhase:null,bubbles:null,cancelable:null,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:null,isTrusted:null},fe.extend=function(e){function t(){}function n(){return r.apply(this,arguments)}var r=this;t.prototype=r.prototype;var a=new t;return o(a,n.prototype),n.prototype=a,n.prototype.constructor=n,n.Interface=o({},r.Interface,e),n.extend=r.extend,he(n),n},he(fe);var ge=fe.extend({data:null}),ve=fe.extend({data:null}),me=[9,13,27,32],ye=K&&"CompositionEvent"in window,we=null;K&&"documentMode"in document&&(we=document.documentMode);var be=K&&"TextEvent"in window&&!we,Ee=K&&(!ye||we&&8<we&&11>=we),_e=String.fromCharCode(32),Ce={beforeInput:{phasedRegistrationNames:{bubbled:"onBeforeInput",captured:"onBeforeInputCapture"},dependencies:["compositionend","keypress","textInput","paste"]},compositionEnd:{phasedRegistrationNames:{bubbled:"onCompositionEnd",captured:"onCompositionEndCapture"},dependencies:"blur compositionend keydown keypress keyup mousedown".split(" ")},compositionStart:{phasedRegistrationNames:{bubbled:"onCompositionStart",captured:"onCompositionStartCapture"},dependencies:"blur compositionstart keydown keypress keyup mousedown".split(" ")},compositionUpdate:{phasedRegistrationNames:{bubbled:"onCompositionUpdate",captured:"onCompositionUpdateCapture"},dependencies:"blur compositionupdate keydown keypress keyup mousedown".split(" ")}},Te=!1;function Oe(e,t){switch(e){case"keyup":return-1!==me.indexOf(t.keyCode);case"keydown":return 229!==t.keyCode;case"keypress":case"mousedown":case"blur":return!0;default:return!1}}function Se(e){return"object"==typeof(e=e.detail)&&"data"in e?e.data:null}var Ne=!1;var Ae={eventTypes:Ce,extractEvents:function(e,t,n,r){var o=void 0,a=void 0;if(ye)e:{switch(e){case"compositionstart":o=Ce.compositionStart;break e;case"compositionend":o=Ce.compositionEnd;break e;case"compositionupdate":o=Ce.compositionUpdate;break e}o=void 0}else Ne?Oe(e,n)&&(o=Ce.compositionEnd):"keydown"===e&&229===n.keyCode&&(o=Ce.compositionStart);return o?(Ee&&"ko"!==n.locale&&(Ne||o!==Ce.compositionStart?o===Ce.compositionEnd&&Ne&&(a=ue()):(ie="value"in(ae=r)?ae.value:ae.textContent,Ne=!0)),o=ge.getPooled(o,t,n,r),a?o.data=a:null!==(a=Se(n))&&(o.data=a),X(o),a=o):a=null,(e=be?function(e,t){switch(e){case"compositionend":return Se(t);case"keypress":return 32!==t.which?null:(Te=!0,_e);case"textInput":return(e=t.data)===_e&&Te?null:e;default:return null}}(e,n):function(e,t){if(Ne)return"compositionend"===e||!ye&&Oe(e,t)?(e=ue(),se=ie=ae=null,Ne=!1,e):null;switch(e){case"paste":return null;case"keypress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"compositionend":return Ee&&"ko"!==t.locale?null:t.data;default:return null}}(e,n))?((t=ve.getPooled(Ce.beforeInput,t,n,r)).data=e,X(t)):t=null,null===a?t:null===t?a:[a,t]}},Pe=null,Ie=null,Me=null;function ke(e){if(e=_(e)){"function"!=typeof Pe&&i("280");var t=E(e.stateNode);Pe(e.stateNode,e.type,t)}}function xe(e){Ie?Me?Me.push(e):Me=[e]:Ie=e}function Re(){if(Ie){var e=Ie,t=Me;if(Me=Ie=null,ke(e),t)for(e=0;e<t.length;e++)ke(t[e])}}function De(e,t){return e(t)}function Be(e,t,n){return e(t,n)}function je(){}var Le=!1;function Ue(e,t){if(Le)return e(t);Le=!0;try{return De(e,t)}finally{Le=!1,(null!==Ie||null!==Me)&&(je(),Re())}}var Fe={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function ze(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===t?!!Fe[e.type]:"textarea"===t}function He(e){return(e=e.target||e.srcElement||window).correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}function We(e){if(!K)return!1;var t=(e="on"+e)in document;return t||((t=document.createElement("div")).setAttribute(e,"return;"),t="function"==typeof t[e]),t}function Ve(e){var t=e.type;return(e=e.nodeName)&&"input"===e.toLowerCase()&&("checkbox"===t||"radio"===t)}function Ge(e){e._valueTracker||(e._valueTracker=function(e){var t=Ve(e)?"checked":"value",n=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),r=""+e[t];if(!e.hasOwnProperty(t)&&void 0!==n&&"function"==typeof n.get&&"function"==typeof n.set){var o=n.get,a=n.set;return Object.defineProperty(e,t,{configurable:!0,get:function(){return o.call(this)},set:function(e){r=""+e,a.call(this,e)}}),Object.defineProperty(e,t,{enumerable:n.enumerable}),{getValue:function(){return r},setValue:function(e){r=""+e},stopTracking:function(){e._valueTracker=null,delete e[t]}}}}(e))}function qe(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var n=t.getValue(),r="";return e&&(r=Ve(e)?e.checked?"true":"false":e.value),(e=r)!==n&&(t.setValue(e),!0)}var Xe=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,Ke=/^(.*)[\\\/]/,Ye="function"==typeof Symbol&&Symbol.for,Ze=Ye?Symbol.for("react.element"):60103,Qe=Ye?Symbol.for("react.portal"):60106,$e=Ye?Symbol.for("react.fragment"):60107,Je=Ye?Symbol.for("react.strict_mode"):60108,et=Ye?Symbol.for("react.profiler"):60114,tt=Ye?Symbol.for("react.provider"):60109,nt=Ye?Symbol.for("react.context"):60110,rt=Ye?Symbol.for("react.async_mode"):60111,ot=Ye?Symbol.for("react.forward_ref"):60112,at=Ye?Symbol.for("react.placeholder"):60113,it="function"==typeof Symbol&&Symbol.iterator;function st(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=it&&e[it]||e["@@iterator"])?e:null}function ut(e){if(null==e)return null;if("function"==typeof e)return e.displayName||e.name||null;if("string"==typeof e)return e;switch(e){case rt:return"AsyncMode";case $e:return"Fragment";case Qe:return"Portal";case et:return"Profiler";case Je:return"StrictMode";case at:return"Placeholder"}if("object"==typeof e){switch(e.$$typeof){case nt:return"Context.Consumer";case tt:return"Context.Provider";case ot:return""!==(e=(e=e.render).displayName||e.name||"")?"ForwardRef("+e+")":"ForwardRef"}if("function"==typeof e.then&&(e=1===e._reactStatus?e._reactResult:null))return ut(e)}return null}function lt(e){var t="";do{e:switch(e.tag){case 4:case 0:case 1:case 2:case 3:case 7:case 10:var n=e._debugOwner,r=e._debugSource,o=ut(e.type),a=null;n&&(a=ut(n.type)),n=o,o="",r?o=" (at "+r.fileName.replace(Ke,"")+":"+r.lineNumber+")":a&&(o=" (created by "+a+")"),a="\n    in "+(n||"Unknown")+o;break e;default:a=""}t+=a,e=e.return}while(e);return t}var ct=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,ft=Object.prototype.hasOwnProperty,dt={},pt={};function ht(e,t,n,r,o){this.acceptsBooleans=2===t||3===t||4===t,this.attributeName=r,this.attributeNamespace=o,this.mustUseProperty=n,this.propertyName=e,this.type=t}var gt={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach(function(e){gt[e]=new ht(e,0,!1,e,null)}),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach(function(e){var t=e[0];gt[t]=new ht(t,1,!1,e[1],null)}),["contentEditable","draggable","spellCheck","value"].forEach(function(e){gt[e]=new ht(e,2,!1,e.toLowerCase(),null)}),["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach(function(e){gt[e]=new ht(e,2,!1,e,null)}),"allowFullScreen async autoFocus autoPlay controls default defer disabled formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach(function(e){gt[e]=new ht(e,3,!1,e.toLowerCase(),null)}),["checked","multiple","muted","selected"].forEach(function(e){gt[e]=new ht(e,3,!0,e,null)}),["capture","download"].forEach(function(e){gt[e]=new ht(e,4,!1,e,null)}),["cols","rows","size","span"].forEach(function(e){gt[e]=new ht(e,6,!1,e,null)}),["rowSpan","start"].forEach(function(e){gt[e]=new ht(e,5,!1,e.toLowerCase(),null)});var vt=/[\-:]([a-z])/g;function mt(e){return e[1].toUpperCase()}function yt(e,t,n,r){var o=gt.hasOwnProperty(t)?gt[t]:null;(null!==o?0===o.type:!r&&(2<t.length&&("o"===t[0]||"O"===t[0])&&("n"===t[1]||"N"===t[1])))||(function(e,t,n,r){if(null===t||void 0===t||function(e,t,n,r){if(null!==n&&0===n.type)return!1;switch(typeof t){case"function":case"symbol":return!0;case"boolean":return!r&&(null!==n?!n.acceptsBooleans:"data-"!==(e=e.toLowerCase().slice(0,5))&&"aria-"!==e);default:return!1}}(e,t,n,r))return!0;if(r)return!1;if(null!==n)switch(n.type){case 3:return!t;case 4:return!1===t;case 5:return isNaN(t);case 6:return isNaN(t)||1>t}return!1}(t,n,o,r)&&(n=null),r||null===o?function(e){return!!ft.call(pt,e)||!ft.call(dt,e)&&(ct.test(e)?pt[e]=!0:(dt[e]=!0,!1))}(t)&&(null===n?e.removeAttribute(t):e.setAttribute(t,""+n)):o.mustUseProperty?e[o.propertyName]=null===n?3!==o.type&&"":n:(t=o.attributeName,r=o.attributeNamespace,null===n?e.removeAttribute(t):(n=3===(o=o.type)||4===o&&!0===n?"":""+n,r?e.setAttributeNS(r,t,n):e.setAttribute(t,n))))}function wt(e){switch(typeof e){case"boolean":case"number":case"object":case"string":case"undefined":return e;default:return""}}function bt(e,t){var n=t.checked;return o({},t,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=n?n:e._wrapperState.initialChecked})}function Et(e,t){var n=null==t.defaultValue?"":t.defaultValue,r=null!=t.checked?t.checked:t.defaultChecked;n=wt(null!=t.value?t.value:n),e._wrapperState={initialChecked:r,initialValue:n,controlled:"checkbox"===t.type||"radio"===t.type?null!=t.checked:null!=t.value}}function _t(e,t){null!=(t=t.checked)&&yt(e,"checked",t,!1)}function Ct(e,t){_t(e,t);var n=wt(t.value),r=t.type;if(null!=n)"number"===r?(0===n&&""===e.value||e.value!=n)&&(e.value=""+n):e.value!==""+n&&(e.value=""+n);else if("submit"===r||"reset"===r)return void e.removeAttribute("value");t.hasOwnProperty("value")?Ot(e,t.type,n):t.hasOwnProperty("defaultValue")&&Ot(e,t.type,wt(t.defaultValue)),null==t.checked&&null!=t.defaultChecked&&(e.defaultChecked=!!t.defaultChecked)}function Tt(e,t,n){if(t.hasOwnProperty("value")||t.hasOwnProperty("defaultValue")){var r=t.type;if(!("submit"!==r&&"reset"!==r||void 0!==t.value&&null!==t.value))return;t=""+e._wrapperState.initialValue,r=e.value,n||t===r||(e.value=t),e.defaultValue=t}""!==(n=e.name)&&(e.name=""),e.defaultChecked=!e.defaultChecked,e.defaultChecked=!!e._wrapperState.initialChecked,""!==n&&(e.name=n)}function Ot(e,t,n){"number"===t&&e.ownerDocument.activeElement===e||(null==n?e.defaultValue=""+e._wrapperState.initialValue:e.defaultValue!==""+n&&(e.defaultValue=""+n))}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach(function(e){var t=e.replace(vt,mt);gt[t]=new ht(t,1,!1,e,null)}),"xlink:actuate xlink:arcrole xlink:href xlink:role xlink:show xlink:title xlink:type".split(" ").forEach(function(e){var t=e.replace(vt,mt);gt[t]=new ht(t,1,!1,e,"http://www.w3.org/1999/xlink")}),["xml:base","xml:lang","xml:space"].forEach(function(e){var t=e.replace(vt,mt);gt[t]=new ht(t,1,!1,e,"http://www.w3.org/XML/1998/namespace")}),gt.tabIndex=new ht("tabIndex",1,!1,"tabindex",null);var St={change:{phasedRegistrationNames:{bubbled:"onChange",captured:"onChangeCapture"},dependencies:"blur change click focus input keydown keyup selectionchange".split(" ")}};function Nt(e,t,n){return(e=fe.getPooled(St.change,e,t,n)).type="change",xe(n),X(e),e}var At=null,Pt=null;function It(e){R(e,!1)}function Mt(e){if(qe(F(e)))return e}function kt(e,t){if("change"===e)return t}var xt=!1;function Rt(){At&&(At.detachEvent("onpropertychange",Dt),Pt=At=null)}function Dt(e){"value"===e.propertyName&&Mt(Pt)&&Ue(It,e=Nt(Pt,e,He(e)))}function Bt(e,t,n){"focus"===e?(Rt(),Pt=n,(At=t).attachEvent("onpropertychange",Dt)):"blur"===e&&Rt()}function jt(e){if("selectionchange"===e||"keyup"===e||"keydown"===e)return Mt(Pt)}function Lt(e,t){if("click"===e)return Mt(t)}function Ut(e,t){if("input"===e||"change"===e)return Mt(t)}K&&(xt=We("input")&&(!document.documentMode||9<document.documentMode));var Ft={eventTypes:St,_isInputEventSupported:xt,extractEvents:function(e,t,n,r){var o=t?F(t):window,a=void 0,i=void 0,s=o.nodeName&&o.nodeName.toLowerCase();if("select"===s||"input"===s&&"file"===o.type?a=kt:ze(o)?xt?a=Ut:(a=jt,i=Bt):(s=o.nodeName)&&"input"===s.toLowerCase()&&("checkbox"===o.type||"radio"===o.type)&&(a=Lt),a&&(a=a(e,t)))return Nt(a,n,r);i&&i(e,o,t),"blur"===e&&(e=o._wrapperState)&&e.controlled&&"number"===o.type&&Ot(o,"number",o.value)}},zt=fe.extend({view:null,detail:null}),Ht={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function Wt(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):!!(e=Ht[e])&&!!t[e]}function Vt(){return Wt}var Gt=0,qt=0,Xt=!1,Kt=!1,Yt=zt.extend({screenX:null,screenY:null,clientX:null,clientY:null,pageX:null,pageY:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,getModifierState:Vt,button:null,buttons:null,relatedTarget:function(e){return e.relatedTarget||(e.fromElement===e.srcElement?e.toElement:e.fromElement)},movementX:function(e){if("movementX"in e)return e.movementX;var t=Gt;return Gt=e.screenX,Xt?"mousemove"===e.type?e.screenX-t:0:(Xt=!0,0)},movementY:function(e){if("movementY"in e)return e.movementY;var t=qt;return qt=e.screenY,Kt?"mousemove"===e.type?e.screenY-t:0:(Kt=!0,0)}}),Zt=Yt.extend({pointerId:null,width:null,height:null,pressure:null,tangentialPressure:null,tiltX:null,tiltY:null,twist:null,pointerType:null,isPrimary:null}),Qt={mouseEnter:{registrationName:"onMouseEnter",dependencies:["mouseout","mouseover"]},mouseLeave:{registrationName:"onMouseLeave",dependencies:["mouseout","mouseover"]},pointerEnter:{registrationName:"onPointerEnter",dependencies:["pointerout","pointerover"]},pointerLeave:{registrationName:"onPointerLeave",dependencies:["pointerout","pointerover"]}},$t={eventTypes:Qt,extractEvents:function(e,t,n,r){var o="mouseover"===e||"pointerover"===e,a="mouseout"===e||"pointerout"===e;if(o&&(n.relatedTarget||n.fromElement)||!a&&!o)return null;if(o=r.window===r?r:(o=r.ownerDocument)?o.defaultView||o.parentWindow:window,a?(a=t,t=(t=n.relatedTarget||n.toElement)?L(t):null):a=null,a===t)return null;var i=void 0,s=void 0,u=void 0,l=void 0;"mouseout"===e||"mouseover"===e?(i=Yt,s=Qt.mouseLeave,u=Qt.mouseEnter,l="mouse"):"pointerout"!==e&&"pointerover"!==e||(i=Zt,s=Qt.pointerLeave,u=Qt.pointerEnter,l="pointer");var c=null==a?o:F(a);if(o=null==t?o:F(t),(e=i.getPooled(s,a,n,r)).type=l+"leave",e.target=c,e.relatedTarget=o,(n=i.getPooled(u,t,n,r)).type=l+"enter",n.target=o,n.relatedTarget=c,r=t,a&&r)e:{for(o=r,l=0,i=t=a;i;i=H(i))l++;for(i=0,u=o;u;u=H(u))i++;for(;0<l-i;)t=H(t),l--;for(;0<i-l;)o=H(o),i--;for(;l--;){if(t===o||t===o.alternate)break e;t=H(t),o=H(o)}t=null}else t=null;for(o=t,t=[];a&&a!==o&&(null===(l=a.alternate)||l!==o);)t.push(a),a=H(a);for(a=[];r&&r!==o&&(null===(l=r.alternate)||l!==o);)a.push(r),r=H(r);for(r=0;r<t.length;r++)G(t[r],"bubbled",e);for(r=a.length;0<r--;)G(a[r],"captured",n);return[e,n]}},Jt=Object.prototype.hasOwnProperty;function en(e,t){return e===t?0!==e||0!==t||1/e==1/t:e!=e&&t!=t}function tn(e,t){if(en(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(r=0;r<n.length;r++)if(!Jt.call(t,n[r])||!en(e[n[r]],t[n[r]]))return!1;return!0}function nn(e){var t=e;if(e.alternate)for(;t.return;)t=t.return;else{if(0!=(2&t.effectTag))return 1;for(;t.return;)if(0!=(2&(t=t.return).effectTag))return 1}return 5===t.tag?2:3}function rn(e){2!==nn(e)&&i("188")}function on(e){if(!(e=function(e){var t=e.alternate;if(!t)return 3===(t=nn(e))&&i("188"),1===t?null:e;for(var n=e,r=t;;){var o=n.return,a=o?o.alternate:null;if(!o||!a)break;if(o.child===a.child){for(var s=o.child;s;){if(s===n)return rn(o),e;if(s===r)return rn(o),t;s=s.sibling}i("188")}if(n.return!==r.return)n=o,r=a;else{s=!1;for(var u=o.child;u;){if(u===n){s=!0,n=o,r=a;break}if(u===r){s=!0,r=o,n=a;break}u=u.sibling}if(!s){for(u=a.child;u;){if(u===n){s=!0,n=a,r=o;break}if(u===r){s=!0,r=a,n=o;break}u=u.sibling}s||i("189")}}n.alternate!==r&&i("190")}return 5!==n.tag&&i("188"),n.stateNode.current===n?e:t}(e)))return null;for(var t=e;;){if(7===t.tag||8===t.tag)return t;if(t.child)t.child.return=t,t=t.child;else{if(t===e)break;for(;!t.sibling;){if(!t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}}return null}var an=fe.extend({animationName:null,elapsedTime:null,pseudoElement:null}),sn=fe.extend({clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}}),un=zt.extend({relatedTarget:null});function ln(e){var t=e.keyCode;return"charCode"in e?0===(e=e.charCode)&&13===t&&(e=13):e=t,10===e&&(e=13),32<=e||13===e?e:0}var cn={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},fn={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},dn=zt.extend({key:function(e){if(e.key){var t=cn[e.key]||e.key;if("Unidentified"!==t)return t}return"keypress"===e.type?13===(e=ln(e))?"Enter":String.fromCharCode(e):"keydown"===e.type||"keyup"===e.type?fn[e.keyCode]||"Unidentified":""},location:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,repeat:null,locale:null,getModifierState:Vt,charCode:function(e){return"keypress"===e.type?ln(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?ln(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}}),pn=Yt.extend({dataTransfer:null}),hn=zt.extend({touches:null,targetTouches:null,changedTouches:null,altKey:null,metaKey:null,ctrlKey:null,shiftKey:null,getModifierState:Vt}),gn=fe.extend({propertyName:null,elapsedTime:null,pseudoElement:null}),vn=Yt.extend({deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:null,deltaMode:null}),mn=[["abort","abort"],[ee,"animationEnd"],[te,"animationIteration"],[ne,"animationStart"],["canplay","canPlay"],["canplaythrough","canPlayThrough"],["drag","drag"],["dragenter","dragEnter"],["dragexit","dragExit"],["dragleave","dragLeave"],["dragover","dragOver"],["durationchange","durationChange"],["emptied","emptied"],["encrypted","encrypted"],["ended","ended"],["error","error"],["gotpointercapture","gotPointerCapture"],["load","load"],["loadeddata","loadedData"],["loadedmetadata","loadedMetadata"],["loadstart","loadStart"],["lostpointercapture","lostPointerCapture"],["mousemove","mouseMove"],["mouseout","mouseOut"],["mouseover","mouseOver"],["playing","playing"],["pointermove","pointerMove"],["pointerout","pointerOut"],["pointerover","pointerOver"],["progress","progress"],["scroll","scroll"],["seeking","seeking"],["stalled","stalled"],["suspend","suspend"],["timeupdate","timeUpdate"],["toggle","toggle"],["touchmove","touchMove"],[re,"transitionEnd"],["waiting","waiting"],["wheel","wheel"]],yn={},wn={};function bn(e,t){var n=e[0],r="on"+((e=e[1])[0].toUpperCase()+e.slice(1));t={phasedRegistrationNames:{bubbled:r,captured:r+"Capture"},dependencies:[n],isInteractive:t},yn[e]=t,wn[n]=t}[["blur","blur"],["cancel","cancel"],["click","click"],["close","close"],["contextmenu","contextMenu"],["copy","copy"],["cut","cut"],["auxclick","auxClick"],["dblclick","doubleClick"],["dragend","dragEnd"],["dragstart","dragStart"],["drop","drop"],["focus","focus"],["input","input"],["invalid","invalid"],["keydown","keyDown"],["keypress","keyPress"],["keyup","keyUp"],["mousedown","mouseDown"],["mouseup","mouseUp"],["paste","paste"],["pause","pause"],["play","play"],["pointercancel","pointerCancel"],["pointerdown","pointerDown"],["pointerup","pointerUp"],["ratechange","rateChange"],["reset","reset"],["seeked","seeked"],["submit","submit"],["touchcancel","touchCancel"],["touchend","touchEnd"],["touchstart","touchStart"],["volumechange","volumeChange"]].forEach(function(e){bn(e,!0)}),mn.forEach(function(e){bn(e,!1)});var En={eventTypes:yn,isInteractiveTopLevelEventType:function(e){return void 0!==(e=wn[e])&&!0===e.isInteractive},extractEvents:function(e,t,n,r){var o=wn[e];if(!o)return null;switch(e){case"keypress":if(0===ln(n))return null;case"keydown":case"keyup":e=dn;break;case"blur":case"focus":e=un;break;case"click":if(2===n.button)return null;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":e=Yt;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":e=pn;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":e=hn;break;case ee:case te:case ne:e=an;break;case re:e=gn;break;case"scroll":e=zt;break;case"wheel":e=vn;break;case"copy":case"cut":case"paste":e=sn;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":e=Zt;break;default:e=fe}return X(t=e.getPooled(o,t,n,r)),t}},_n=En.isInteractiveTopLevelEventType,Cn=[];function Tn(e){var t=e.targetInst,n=t;do{if(!n){e.ancestors.push(n);break}var r;for(r=n;r.return;)r=r.return;if(!(r=5!==r.tag?null:r.stateNode.containerInfo))break;e.ancestors.push(n),n=L(r)}while(n);for(n=0;n<e.ancestors.length;n++){t=e.ancestors[n];var o=He(e.nativeEvent);r=e.topLevelType;for(var a=e.nativeEvent,i=null,s=0;s<m.length;s++){var u=m[s];u&&(u=u.extractEvents(r,t,a,o))&&(i=O(i,u))}R(i,!1)}}var On=!0;function Sn(e,t){if(!t)return null;var n=(_n(e)?An:Pn).bind(null,e);t.addEventListener(e,n,!1)}function Nn(e,t){if(!t)return null;var n=(_n(e)?An:Pn).bind(null,e);t.addEventListener(e,n,!0)}function An(e,t){Be(Pn,e,t)}function Pn(e,t){if(On){var n=He(t);if(null===(n=L(n))||"number"!=typeof n.tag||2===nn(n)||(n=null),Cn.length){var r=Cn.pop();r.topLevelType=e,r.nativeEvent=t,r.targetInst=n,e=r}else e={topLevelType:e,nativeEvent:t,targetInst:n,ancestors:[]};try{Ue(Tn,e)}finally{e.topLevelType=null,e.nativeEvent=null,e.targetInst=null,e.ancestors.length=0,10>Cn.length&&Cn.push(e)}}}var In={},Mn=0,kn="_reactListenersID"+(""+Math.random()).slice(2);function xn(e){return Object.prototype.hasOwnProperty.call(e,kn)||(e[kn]=Mn++,In[e[kn]]={}),In[e[kn]]}function Rn(e){if(void 0===(e=e||("undefined"!=typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(t){return e.body}}function Dn(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function Bn(e,t){var n,r=Dn(e);for(e=0;r;){if(3===r.nodeType){if(n=e+r.textContent.length,e<=t&&n>=t)return{node:r,offset:t-e};e=n}e:{for(;r;){if(r.nextSibling){r=r.nextSibling;break e}r=r.parentNode}r=void 0}r=Dn(r)}}function jn(){for(var e=window,t=Rn();t instanceof e.HTMLIFrameElement;){try{e=t.contentDocument.defaultView}catch(e){break}t=Rn(e.document)}return t}function Ln(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&("input"===t&&("text"===e.type||"search"===e.type||"tel"===e.type||"url"===e.type||"password"===e.type)||"textarea"===t||"true"===e.contentEditable)}var Un=K&&"documentMode"in document&&11>=document.documentMode,Fn={select:{phasedRegistrationNames:{bubbled:"onSelect",captured:"onSelectCapture"},dependencies:"blur contextmenu dragend focus keydown keyup mousedown mouseup selectionchange".split(" ")}},zn=null,Hn=null,Wn=null,Vn=!1;function Gn(e,t){var n=t.window===t?t.document:9===t.nodeType?t:t.ownerDocument;return Vn||null==zn||zn!==Rn(n)?null:("selectionStart"in(n=zn)&&Ln(n)?n={start:n.selectionStart,end:n.selectionEnd}:n={anchorNode:(n=(n.ownerDocument&&n.ownerDocument.defaultView||window).getSelection()).anchorNode,anchorOffset:n.anchorOffset,focusNode:n.focusNode,focusOffset:n.focusOffset},Wn&&tn(Wn,n)?null:(Wn=n,(e=fe.getPooled(Fn.select,Hn,e,t)).type="select",e.target=zn,X(e),e))}var qn={eventTypes:Fn,extractEvents:function(e,t,n,r){var o,a=r.window===r?r.document:9===r.nodeType?r:r.ownerDocument;if(!(o=!a)){e:{a=xn(a),o=b.onSelect;for(var i=0;i<o.length;i++){var s=o[i];if(!a.hasOwnProperty(s)||!a[s]){a=!1;break e}}a=!0}o=!a}if(o)return null;switch(a=t?F(t):window,e){case"focus":(ze(a)||"true"===a.contentEditable)&&(zn=a,Hn=t,Wn=null);break;case"blur":Wn=Hn=zn=null;break;case"mousedown":Vn=!0;break;case"contextmenu":case"mouseup":case"dragend":return Vn=!1,Gn(n,r);case"selectionchange":if(Un)break;case"keydown":case"keyup":return Gn(n,r)}return null}};function Xn(e,t){return e=o({children:void 0},t),(t=function(e){var t="";return r.Children.forEach(e,function(e){null!=e&&(t+=e)}),t}(t.children))&&(e.children=t),e}function Kn(e,t,n,r){if(e=e.options,t){t={};for(var o=0;o<n.length;o++)t["$"+n[o]]=!0;for(n=0;n<e.length;n++)o=t.hasOwnProperty("$"+e[n].value),e[n].selected!==o&&(e[n].selected=o),o&&r&&(e[n].defaultSelected=!0)}else{for(n=""+wt(n),t=null,o=0;o<e.length;o++){if(e[o].value===n)return e[o].selected=!0,void(r&&(e[o].defaultSelected=!0));null!==t||e[o].disabled||(t=e[o])}null!==t&&(t.selected=!0)}}function Yn(e,t){return null!=t.dangerouslySetInnerHTML&&i("91"),o({},t,{value:void 0,defaultValue:void 0,children:""+e._wrapperState.initialValue})}function Zn(e,t){var n=t.value;null==n&&(n=t.defaultValue,null!=(t=t.children)&&(null!=n&&i("92"),Array.isArray(t)&&(1>=t.length||i("93"),t=t[0]),n=t),null==n&&(n="")),e._wrapperState={initialValue:wt(n)}}function Qn(e,t){var n=wt(t.value);null!=n&&((n=""+n)!==e.value&&(e.value=n),null==t.defaultValue&&(e.defaultValue=n)),null!=t.defaultValue&&(e.defaultValue=""+wt(t.defaultValue))}function $n(e){var t=e.textContent;t===e._wrapperState.initialValue&&(e.value=t)}M("ResponderEventPlugin SimpleEventPlugin TapEventPlugin EnterLeaveEventPlugin ChangeEventPlugin SelectEventPlugin BeforeInputEventPlugin".split(" ")),E=z,_=U,C=F,k({SimpleEventPlugin:En,EnterLeaveEventPlugin:$t,ChangeEventPlugin:Ft,SelectEventPlugin:qn,BeforeInputEventPlugin:Ae});var Jn={html:"http://www.w3.org/1999/xhtml",mathml:"http://www.w3.org/1998/Math/MathML",svg:"http://www.w3.org/2000/svg"};function er(e){switch(e){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function tr(e,t){return null==e||"http://www.w3.org/1999/xhtml"===e?er(t):"http://www.w3.org/2000/svg"===e&&"foreignObject"===t?"http://www.w3.org/1999/xhtml":e}var nr=void 0,rr=function(e){return"undefined"!=typeof MSApp&&MSApp.execUnsafeLocalFunction?function(t,n,r,o){MSApp.execUnsafeLocalFunction(function(){return e(t,n)})}:e}(function(e,t){if(e.namespaceURI!==Jn.svg||"innerHTML"in e)e.innerHTML=t;else{for((nr=nr||document.createElement("div")).innerHTML="<svg>"+t+"</svg>",t=nr.firstChild;e.firstChild;)e.removeChild(e.firstChild);for(;t.firstChild;)e.appendChild(t.firstChild)}});function or(e,t){if(t){var n=e.firstChild;if(n&&n===e.lastChild&&3===n.nodeType)return void(n.nodeValue=t)}e.textContent=t}var ar={animationIterationCount:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},ir=["Webkit","ms","Moz","O"];function sr(e,t){for(var n in e=e.style,t)if(t.hasOwnProperty(n)){var r=0===n.indexOf("--"),o=n,a=t[n];o=null==a||"boolean"==typeof a||""===a?"":r||"number"!=typeof a||0===a||ar.hasOwnProperty(o)&&ar[o]?(""+a).trim():a+"px","float"===n&&(n="cssFloat"),r?e.setProperty(n,o):e[n]=o}}Object.keys(ar).forEach(function(e){ir.forEach(function(t){t=t+e.charAt(0).toUpperCase()+e.substring(1),ar[t]=ar[e]})});var ur=o({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function lr(e,t){t&&(ur[e]&&(null!=t.children||null!=t.dangerouslySetInnerHTML)&&i("137",e,""),null!=t.dangerouslySetInnerHTML&&(null!=t.children&&i("60"),"object"==typeof t.dangerouslySetInnerHTML&&"__html"in t.dangerouslySetInnerHTML||i("61")),null!=t.style&&"object"!=typeof t.style&&i("62",""))}function cr(e,t){if(-1===e.indexOf("-"))return"string"==typeof t.is;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}function fr(e,t){var n=xn(e=9===e.nodeType||11===e.nodeType?e:e.ownerDocument);t=b[t];for(var r=0;r<t.length;r++){var o=t[r];if(!n.hasOwnProperty(o)||!n[o]){switch(o){case"scroll":Nn("scroll",e);break;case"focus":case"blur":Nn("focus",e),Nn("blur",e),n.blur=!0,n.focus=!0;break;case"cancel":case"close":We(o)&&Nn(o,e);break;case"invalid":case"submit":case"reset":break;default:-1===oe.indexOf(o)&&Sn(o,e)}n[o]=!0}}}function dr(){}var pr=null,hr=null;function gr(e,t){switch(e){case"button":case"input":case"select":case"textarea":return!!t.autoFocus}return!1}function vr(e,t){return"textarea"===e||"option"===e||"noscript"===e||"string"==typeof t.children||"number"==typeof t.children||"object"==typeof t.dangerouslySetInnerHTML&&null!==t.dangerouslySetInnerHTML&&null!=t.dangerouslySetInnerHTML.__html}function mr(e){for(e=e.nextSibling;e&&1!==e.nodeType&&3!==e.nodeType;)e=e.nextSibling;return e}function yr(e){for(e=e.firstChild;e&&1!==e.nodeType&&3!==e.nodeType;)e=e.nextSibling;return e}new Set;var wr=[],br=-1;function Er(e){0>br||(e.current=wr[br],wr[br]=null,br--)}function _r(e,t){wr[++br]=e.current,e.current=t}var Cr={},Tr={current:Cr},Or={current:!1},Sr=Cr;function Nr(e,t){var n=e.type.contextTypes;if(!n)return Cr;var r=e.stateNode;if(r&&r.__reactInternalMemoizedUnmaskedChildContext===t)return r.__reactInternalMemoizedMaskedChildContext;var o,a={};for(o in n)a[o]=t[o];return r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=t,e.__reactInternalMemoizedMaskedChildContext=a),a}function Ar(e){return null!==(e=e.childContextTypes)&&void 0!==e}function Pr(e){Er(Or),Er(Tr)}function Ir(e){Er(Or),Er(Tr)}function Mr(e,t,n){Tr.current!==Cr&&i("168"),_r(Tr,t),_r(Or,n)}function kr(e,t,n){var r=e.stateNode;if(e=t.childContextTypes,"function"!=typeof r.getChildContext)return n;for(var a in r=r.getChildContext())a in e||i("108",ut(t)||"Unknown",a);return o({},n,r)}function xr(e){var t=e.stateNode;return t=t&&t.__reactInternalMemoizedMergedChildContext||Cr,Sr=Tr.current,_r(Tr,t),_r(Or,Or.current),!0}function Rr(e,t,n){var r=e.stateNode;r||i("169"),n?(t=kr(e,t,Sr),r.__reactInternalMemoizedMergedChildContext=t,Er(Or),Er(Tr),_r(Tr,t)):Er(Or),_r(Or,n)}var Dr=null,Br=null;function jr(e){return function(t){try{return e(t)}catch(e){}}}function Lr(e,t,n,r){this.tag=e,this.key=n,this.sibling=this.child=this.return=this.stateNode=this.type=null,this.index=0,this.ref=null,this.pendingProps=t,this.firstContextDependency=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=r,this.effectTag=0,this.lastEffect=this.firstEffect=this.nextEffect=null,this.childExpirationTime=this.expirationTime=0,this.alternate=null}function Ur(e){return"object"==typeof(e=e.prototype)&&null!==e&&"object"==typeof e.isReactComponent&&null!==e.isReactComponent}function Fr(e,t,n){var r=e.alternate;return null===r?((r=new Lr(e.tag,t,e.key,e.mode)).type=e.type,r.stateNode=e.stateNode,r.alternate=e,e.alternate=r):(r.pendingProps=t,r.effectTag=0,r.nextEffect=null,r.firstEffect=null,r.lastEffect=null),r.childExpirationTime=e.childExpirationTime,r.expirationTime=t!==e.pendingProps?n:e.expirationTime,r.child=e.child,r.memoizedProps=e.memoizedProps,r.memoizedState=e.memoizedState,r.updateQueue=e.updateQueue,r.firstContextDependency=e.firstContextDependency,r.sibling=e.sibling,r.index=e.index,r.ref=e.ref,r}function zr(e,t,n){var r=e.type,o=e.key;e=e.props;var a=void 0;if("function"==typeof r)a=Ur(r)?2:4;else if("string"==typeof r)a=7;else e:switch(r){case $e:return Hr(e.children,t,n,o);case rt:a=10,t|=3;break;case Je:a=10,t|=2;break;case et:return(r=new Lr(15,e,o,4|t)).type=et,r.expirationTime=n,r;case at:a=16;break;default:if("object"==typeof r&&null!==r)switch(r.$$typeof){case tt:a=12;break e;case nt:a=11;break e;case ot:a=13;break e;default:if("function"==typeof r.then){a=4;break e}}i("130",null==r?r:typeof r,"")}return(t=new Lr(a,e,o,t)).type=r,t.expirationTime=n,t}function Hr(e,t,n,r){return(e=new Lr(9,e,r,t)).expirationTime=n,e}function Wr(e,t,n){return(e=new Lr(8,e,null,t)).expirationTime=n,e}function Vr(e,t,n){return(t=new Lr(6,null!==e.children?e.children:[],e.key,t)).expirationTime=n,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}function Gr(e,t){e.didError=!1;var n=e.earliestPendingTime;0===n?e.earliestPendingTime=e.latestPendingTime=t:n>t?e.earliestPendingTime=t:e.latestPendingTime<t&&(e.latestPendingTime=t),qr(t,e)}function qr(e,t){var n=t.earliestSuspendedTime,r=t.latestSuspendedTime,o=t.earliestPendingTime,a=t.latestPingedTime;0===(o=0!==o?o:a)&&(0===e||r>e)&&(o=r),0!==(e=o)&&0!==n&&n<e&&(e=n),t.nextExpirationTimeToWorkOn=o,t.expirationTime=e}var Xr=!1;function Kr(e){return{baseState:e,firstUpdate:null,lastUpdate:null,firstCapturedUpdate:null,lastCapturedUpdate:null,firstEffect:null,lastEffect:null,firstCapturedEffect:null,lastCapturedEffect:null}}function Yr(e){return{baseState:e.baseState,firstUpdate:e.firstUpdate,lastUpdate:e.lastUpdate,firstCapturedUpdate:null,lastCapturedUpdate:null,firstEffect:null,lastEffect:null,firstCapturedEffect:null,lastCapturedEffect:null}}function Zr(e){return{expirationTime:e,tag:0,payload:null,callback:null,next:null,nextEffect:null}}function Qr(e,t){null===e.lastUpdate?e.firstUpdate=e.lastUpdate=t:(e.lastUpdate.next=t,e.lastUpdate=t)}function $r(e,t){var n=e.alternate;if(null===n){var r=e.updateQueue,o=null;null===r&&(r=e.updateQueue=Kr(e.memoizedState))}else r=e.updateQueue,o=n.updateQueue,null===r?null===o?(r=e.updateQueue=Kr(e.memoizedState),o=n.updateQueue=Kr(n.memoizedState)):r=e.updateQueue=Yr(o):null===o&&(o=n.updateQueue=Yr(r));null===o||r===o?Qr(r,t):null===r.lastUpdate||null===o.lastUpdate?(Qr(r,t),Qr(o,t)):(Qr(r,t),o.lastUpdate=t)}function Jr(e,t){var n=e.updateQueue;null===(n=null===n?e.updateQueue=Kr(e.memoizedState):eo(e,n)).lastCapturedUpdate?n.firstCapturedUpdate=n.lastCapturedUpdate=t:(n.lastCapturedUpdate.next=t,n.lastCapturedUpdate=t)}function eo(e,t){var n=e.alternate;return null!==n&&t===n.updateQueue&&(t=e.updateQueue=Yr(t)),t}function to(e,t,n,r,a,i){switch(n.tag){case 1:return"function"==typeof(e=n.payload)?e.call(i,r,a):e;case 3:e.effectTag=-1025&e.effectTag|64;case 0:if(null===(a="function"==typeof(e=n.payload)?e.call(i,r,a):e)||void 0===a)break;return o({},r,a);case 2:Xr=!0}return r}function no(e,t,n,r,o){Xr=!1;for(var a=(t=eo(e,t)).baseState,i=null,s=0,u=t.firstUpdate,l=a;null!==u;){var c=u.expirationTime;c>o?(null===i&&(i=u,a=l),(0===s||s>c)&&(s=c)):(l=to(e,0,u,l,n,r),null!==u.callback&&(e.effectTag|=32,u.nextEffect=null,null===t.lastEffect?t.firstEffect=t.lastEffect=u:(t.lastEffect.nextEffect=u,t.lastEffect=u))),u=u.next}for(c=null,u=t.firstCapturedUpdate;null!==u;){var f=u.expirationTime;f>o?(null===c&&(c=u,null===i&&(a=l)),(0===s||s>f)&&(s=f)):(l=to(e,0,u,l,n,r),null!==u.callback&&(e.effectTag|=32,u.nextEffect=null,null===t.lastCapturedEffect?t.firstCapturedEffect=t.lastCapturedEffect=u:(t.lastCapturedEffect.nextEffect=u,t.lastCapturedEffect=u))),u=u.next}null===i&&(t.lastUpdate=null),null===c?t.lastCapturedUpdate=null:e.effectTag|=32,null===i&&null===c&&(a=l),t.baseState=a,t.firstUpdate=i,t.firstCapturedUpdate=c,e.expirationTime=s,e.memoizedState=l}function ro(e,t,n){null!==t.firstCapturedUpdate&&(null!==t.lastUpdate&&(t.lastUpdate.next=t.firstCapturedUpdate,t.lastUpdate=t.lastCapturedUpdate),t.firstCapturedUpdate=t.lastCapturedUpdate=null),oo(t.firstEffect,n),t.firstEffect=t.lastEffect=null,oo(t.firstCapturedEffect,n),t.firstCapturedEffect=t.lastCapturedEffect=null}function oo(e,t){for(;null!==e;){var n=e.callback;if(null!==n){e.callback=null;var r=t;"function"!=typeof n&&i("191",n),n.call(r)}e=e.nextEffect}}function ao(e,t){return{value:e,source:t,stack:lt(t)}}var io={current:null},so=null,uo=null,lo=null;function co(e,t){var n=e.type._context;_r(io,n._currentValue),n._currentValue=t}function fo(e){var t=io.current;Er(io),e.type._context._currentValue=t}function po(e){so=e,lo=uo=null,e.firstContextDependency=null}function ho(e,t){return lo!==e&&!1!==t&&0!==t&&("number"==typeof t&&1073741823!==t||(lo=e,t=1073741823),t={context:e,observedBits:t,next:null},null===uo?(null===so&&i("277"),so.firstContextDependency=uo=t):uo=uo.next=t),e._currentValue}var go={},vo={current:go},mo={current:go},yo={current:go};function wo(e){return e===go&&i("174"),e}function bo(e,t){_r(yo,t),_r(mo,e),_r(vo,go);var n=t.nodeType;switch(n){case 9:case 11:t=(t=t.documentElement)?t.namespaceURI:tr(null,"");break;default:t=tr(t=(n=8===n?t.parentNode:t).namespaceURI||null,n=n.tagName)}Er(vo),_r(vo,t)}function Eo(e){Er(vo),Er(mo),Er(yo)}function _o(e){wo(yo.current);var t=wo(vo.current),n=tr(t,e.type);t!==n&&(_r(mo,e),_r(vo,n))}function Co(e){mo.current===e&&(Er(vo),Er(mo))}var To=(new r.Component).refs;function Oo(e,t,n,r){n=null===(n=n(r,t=e.memoizedState))||void 0===n?t:o({},t,n),e.memoizedState=n,null!==(r=e.updateQueue)&&0===e.expirationTime&&(r.baseState=n)}var So={isMounted:function(e){return!!(e=e._reactInternalFiber)&&2===nn(e)},enqueueSetState:function(e,t,n){e=e._reactInternalFiber;var r=si(),o=Zr(r=xa(r,e));o.payload=t,void 0!==n&&null!==n&&(o.callback=n),$r(e,o),Ra(e,r)},enqueueReplaceState:function(e,t,n){e=e._reactInternalFiber;var r=si(),o=Zr(r=xa(r,e));o.tag=1,o.payload=t,void 0!==n&&null!==n&&(o.callback=n),$r(e,o),Ra(e,r)},enqueueForceUpdate:function(e,t){e=e._reactInternalFiber;var n=si(),r=Zr(n=xa(n,e));r.tag=2,void 0!==t&&null!==t&&(r.callback=t),$r(e,r),Ra(e,n)}};function No(e,t,n,r,o,a,i){return"function"==typeof(e=e.stateNode).shouldComponentUpdate?e.shouldComponentUpdate(r,a,i):!t.prototype||!t.prototype.isPureReactComponent||(!tn(n,r)||!tn(o,a))}function Ao(e,t,n,r){e=t.state,"function"==typeof t.componentWillReceiveProps&&t.componentWillReceiveProps(n,r),"function"==typeof t.UNSAFE_componentWillReceiveProps&&t.UNSAFE_componentWillReceiveProps(n,r),t.state!==e&&So.enqueueReplaceState(t,t.state,null)}function Po(e,t,n,r){var o=e.stateNode,a=Ar(t)?Sr:Tr.current;o.props=n,o.state=e.memoizedState,o.refs=To,o.context=Nr(e,a),null!==(a=e.updateQueue)&&(no(e,a,n,o,r),o.state=e.memoizedState),"function"==typeof(a=t.getDerivedStateFromProps)&&(Oo(e,t,a,n),o.state=e.memoizedState),"function"==typeof t.getDerivedStateFromProps||"function"==typeof o.getSnapshotBeforeUpdate||"function"!=typeof o.UNSAFE_componentWillMount&&"function"!=typeof o.componentWillMount||(t=o.state,"function"==typeof o.componentWillMount&&o.componentWillMount(),"function"==typeof o.UNSAFE_componentWillMount&&o.UNSAFE_componentWillMount(),t!==o.state&&So.enqueueReplaceState(o,o.state,null),null!==(a=e.updateQueue)&&(no(e,a,n,o,r),o.state=e.memoizedState)),"function"==typeof o.componentDidMount&&(e.effectTag|=4)}var Io=Array.isArray;function Mo(e,t,n){if(null!==(e=n.ref)&&"function"!=typeof e&&"object"!=typeof e){if(n._owner){var r=void 0;(n=n._owner)&&(2!==n.tag&&3!==n.tag&&i("110"),r=n.stateNode),r||i("147",e);var o=""+e;return null!==t&&null!==t.ref&&"function"==typeof t.ref&&t.ref._stringRef===o?t.ref:((t=function(e){var t=r.refs;t===To&&(t=r.refs={}),null===e?delete t[o]:t[o]=e})._stringRef=o,t)}"string"!=typeof e&&i("284"),n._owner||i("254",e)}return e}function ko(e,t){"textarea"!==e.type&&i("31","[object Object]"===Object.prototype.toString.call(t)?"object with keys {"+Object.keys(t).join(", ")+"}":t,"")}function xo(e){function t(t,n){if(e){var r=t.lastEffect;null!==r?(r.nextEffect=n,t.lastEffect=n):t.firstEffect=t.lastEffect=n,n.nextEffect=null,n.effectTag=8}}function n(n,r){if(!e)return null;for(;null!==r;)t(n,r),r=r.sibling;return null}function r(e,t){for(e=new Map;null!==t;)null!==t.key?e.set(t.key,t):e.set(t.index,t),t=t.sibling;return e}function o(e,t,n){return(e=Fr(e,t,n)).index=0,e.sibling=null,e}function a(t,n,r){return t.index=r,e?null!==(r=t.alternate)?(r=r.index)<n?(t.effectTag=2,n):r:(t.effectTag=2,n):n}function s(t){return e&&null===t.alternate&&(t.effectTag=2),t}function u(e,t,n,r){return null===t||8!==t.tag?((t=Wr(n,e.mode,r)).return=e,t):((t=o(t,n,r)).return=e,t)}function l(e,t,n,r){return null!==t&&t.type===n.type?((r=o(t,n.props,r)).ref=Mo(e,t,n),r.return=e,r):((r=zr(n,e.mode,r)).ref=Mo(e,t,n),r.return=e,r)}function c(e,t,n,r){return null===t||6!==t.tag||t.stateNode.containerInfo!==n.containerInfo||t.stateNode.implementation!==n.implementation?((t=Vr(n,e.mode,r)).return=e,t):((t=o(t,n.children||[],r)).return=e,t)}function f(e,t,n,r,a){return null===t||9!==t.tag?((t=Hr(n,e.mode,r,a)).return=e,t):((t=o(t,n,r)).return=e,t)}function d(e,t,n){if("string"==typeof t||"number"==typeof t)return(t=Wr(""+t,e.mode,n)).return=e,t;if("object"==typeof t&&null!==t){switch(t.$$typeof){case Ze:return(n=zr(t,e.mode,n)).ref=Mo(e,null,t),n.return=e,n;case Qe:return(t=Vr(t,e.mode,n)).return=e,t}if(Io(t)||st(t))return(t=Hr(t,e.mode,n,null)).return=e,t;ko(e,t)}return null}function p(e,t,n,r){var o=null!==t?t.key:null;if("string"==typeof n||"number"==typeof n)return null!==o?null:u(e,t,""+n,r);if("object"==typeof n&&null!==n){switch(n.$$typeof){case Ze:return n.key===o?n.type===$e?f(e,t,n.props.children,r,o):l(e,t,n,r):null;case Qe:return n.key===o?c(e,t,n,r):null}if(Io(n)||st(n))return null!==o?null:f(e,t,n,r,null);ko(e,n)}return null}function h(e,t,n,r,o){if("string"==typeof r||"number"==typeof r)return u(t,e=e.get(n)||null,""+r,o);if("object"==typeof r&&null!==r){switch(r.$$typeof){case Ze:return e=e.get(null===r.key?n:r.key)||null,r.type===$e?f(t,e,r.props.children,o,r.key):l(t,e,r,o);case Qe:return c(t,e=e.get(null===r.key?n:r.key)||null,r,o)}if(Io(r)||st(r))return f(t,e=e.get(n)||null,r,o,null);ko(t,r)}return null}function g(o,i,s,u){for(var l=null,c=null,f=i,g=i=0,v=null;null!==f&&g<s.length;g++){f.index>g?(v=f,f=null):v=f.sibling;var m=p(o,f,s[g],u);if(null===m){null===f&&(f=v);break}e&&f&&null===m.alternate&&t(o,f),i=a(m,i,g),null===c?l=m:c.sibling=m,c=m,f=v}if(g===s.length)return n(o,f),l;if(null===f){for(;g<s.length;g++)(f=d(o,s[g],u))&&(i=a(f,i,g),null===c?l=f:c.sibling=f,c=f);return l}for(f=r(o,f);g<s.length;g++)(v=h(f,o,g,s[g],u))&&(e&&null!==v.alternate&&f.delete(null===v.key?g:v.key),i=a(v,i,g),null===c?l=v:c.sibling=v,c=v);return e&&f.forEach(function(e){return t(o,e)}),l}function v(o,s,u,l){var c=st(u);"function"!=typeof c&&i("150"),null==(u=c.call(u))&&i("151");for(var f=c=null,g=s,v=s=0,m=null,y=u.next();null!==g&&!y.done;v++,y=u.next()){g.index>v?(m=g,g=null):m=g.sibling;var w=p(o,g,y.value,l);if(null===w){g||(g=m);break}e&&g&&null===w.alternate&&t(o,g),s=a(w,s,v),null===f?c=w:f.sibling=w,f=w,g=m}if(y.done)return n(o,g),c;if(null===g){for(;!y.done;v++,y=u.next())null!==(y=d(o,y.value,l))&&(s=a(y,s,v),null===f?c=y:f.sibling=y,f=y);return c}for(g=r(o,g);!y.done;v++,y=u.next())null!==(y=h(g,o,v,y.value,l))&&(e&&null!==y.alternate&&g.delete(null===y.key?v:y.key),s=a(y,s,v),null===f?c=y:f.sibling=y,f=y);return e&&g.forEach(function(e){return t(o,e)}),c}return function(e,r,a,u){var l="object"==typeof a&&null!==a&&a.type===$e&&null===a.key;l&&(a=a.props.children);var c="object"==typeof a&&null!==a;if(c)switch(a.$$typeof){case Ze:e:{for(c=a.key,l=r;null!==l;){if(l.key===c){if(9===l.tag?a.type===$e:l.type===a.type){n(e,l.sibling),(r=o(l,a.type===$e?a.props.children:a.props,u)).ref=Mo(e,l,a),r.return=e,e=r;break e}n(e,l);break}t(e,l),l=l.sibling}a.type===$e?((r=Hr(a.props.children,e.mode,u,a.key)).return=e,e=r):((u=zr(a,e.mode,u)).ref=Mo(e,r,a),u.return=e,e=u)}return s(e);case Qe:e:{for(l=a.key;null!==r;){if(r.key===l){if(6===r.tag&&r.stateNode.containerInfo===a.containerInfo&&r.stateNode.implementation===a.implementation){n(e,r.sibling),(r=o(r,a.children||[],u)).return=e,e=r;break e}n(e,r);break}t(e,r),r=r.sibling}(r=Vr(a,e.mode,u)).return=e,e=r}return s(e)}if("string"==typeof a||"number"==typeof a)return a=""+a,null!==r&&8===r.tag?(n(e,r.sibling),(r=o(r,a,u)).return=e,e=r):(n(e,r),(r=Wr(a,e.mode,u)).return=e,e=r),s(e);if(Io(a))return g(e,r,a,u);if(st(a))return v(e,r,a,u);if(c&&ko(e,a),void 0===a&&!l)switch(e.tag){case 2:case 3:case 0:i("152",(u=e.type).displayName||u.name||"Component")}return n(e,r)}}var Ro=xo(!0),Do=xo(!1),Bo=null,jo=null,Lo=!1;function Uo(e,t){var n=new Lr(7,null,null,0);n.type="DELETED",n.stateNode=t,n.return=e,n.effectTag=8,null!==e.lastEffect?(e.lastEffect.nextEffect=n,e.lastEffect=n):e.firstEffect=e.lastEffect=n}function Fo(e,t){switch(e.tag){case 7:var n=e.type;return null!==(t=1!==t.nodeType||n.toLowerCase()!==t.nodeName.toLowerCase()?null:t)&&(e.stateNode=t,!0);case 8:return null!==(t=""===e.pendingProps||3!==t.nodeType?null:t)&&(e.stateNode=t,!0);default:return!1}}function zo(e){if(Lo){var t=jo;if(t){var n=t;if(!Fo(e,t)){if(!(t=mr(n))||!Fo(e,t))return e.effectTag|=2,Lo=!1,void(Bo=e);Uo(Bo,n)}Bo=e,jo=yr(t)}else e.effectTag|=2,Lo=!1,Bo=e}}function Ho(e){for(e=e.return;null!==e&&7!==e.tag&&5!==e.tag;)e=e.return;Bo=e}function Wo(e){if(e!==Bo)return!1;if(!Lo)return Ho(e),Lo=!0,!1;var t=e.type;if(7!==e.tag||"head"!==t&&"body"!==t&&!vr(t,e.memoizedProps))for(t=jo;t;)Uo(e,t),t=mr(t);return Ho(e),jo=Bo?mr(e.stateNode):null,!0}function Vo(){jo=Bo=null,Lo=!1}var Go=Xe.ReactCurrentOwner;function qo(e,t,n,r){t.child=null===e?Do(t,null,n,r):Ro(t,e.child,n,r)}function Xo(e,t,n,r,o){n=n.render;var a=t.ref;return Or.current||t.memoizedProps!==r||a!==(null!==e?e.ref:null)?(qo(e,t,n=n(r,a),o),t.memoizedProps=r,t.child):ea(e,t,o)}function Ko(e,t){var n=t.ref;(null===e&&null!==n||null!==e&&e.ref!==n)&&(t.effectTag|=128)}function Yo(e,t,n,r,o){var a=Ar(n)?Sr:Tr.current;return a=Nr(t,a),po(t),n=n(r,a),t.effectTag|=1,qo(e,t,n,o),t.memoizedProps=r,t.child}function Zo(e,t,n,r,o){if(Ar(n)){var a=!0;xr(t)}else a=!1;if(po(t),null===e)if(null===t.stateNode){var i=Ar(n)?Sr:Tr.current,s=n.contextTypes,u=null!==s&&void 0!==s,l=new n(r,s=u?Nr(t,i):Cr);t.memoizedState=null!==l.state&&void 0!==l.state?l.state:null,l.updater=So,t.stateNode=l,l._reactInternalFiber=t,u&&((u=t.stateNode).__reactInternalMemoizedUnmaskedChildContext=i,u.__reactInternalMemoizedMaskedChildContext=s),Po(t,n,r,o),r=!0}else{i=t.stateNode,s=t.memoizedProps,i.props=s;var c=i.context;u=Nr(t,u=Ar(n)?Sr:Tr.current);var f=n.getDerivedStateFromProps;(l="function"==typeof f||"function"==typeof i.getSnapshotBeforeUpdate)||"function"!=typeof i.UNSAFE_componentWillReceiveProps&&"function"!=typeof i.componentWillReceiveProps||(s!==r||c!==u)&&Ao(t,i,r,u),Xr=!1;var d=t.memoizedState;c=i.state=d;var p=t.updateQueue;null!==p&&(no(t,p,r,i,o),c=t.memoizedState),s!==r||d!==c||Or.current||Xr?("function"==typeof f&&(Oo(t,n,f,r),c=t.memoizedState),(s=Xr||No(t,n,s,r,d,c,u))?(l||"function"!=typeof i.UNSAFE_componentWillMount&&"function"!=typeof i.componentWillMount||("function"==typeof i.componentWillMount&&i.componentWillMount(),"function"==typeof i.UNSAFE_componentWillMount&&i.UNSAFE_componentWillMount()),"function"==typeof i.componentDidMount&&(t.effectTag|=4)):("function"==typeof i.componentDidMount&&(t.effectTag|=4),t.memoizedProps=r,t.memoizedState=c),i.props=r,i.state=c,i.context=u,r=s):("function"==typeof i.componentDidMount&&(t.effectTag|=4),r=!1)}else i=t.stateNode,s=t.memoizedProps,i.props=s,c=i.context,u=Nr(t,u=Ar(n)?Sr:Tr.current),(l="function"==typeof(f=n.getDerivedStateFromProps)||"function"==typeof i.getSnapshotBeforeUpdate)||"function"!=typeof i.UNSAFE_componentWillReceiveProps&&"function"!=typeof i.componentWillReceiveProps||(s!==r||c!==u)&&Ao(t,i,r,u),Xr=!1,c=t.memoizedState,d=i.state=c,null!==(p=t.updateQueue)&&(no(t,p,r,i,o),d=t.memoizedState),s!==r||c!==d||Or.current||Xr?("function"==typeof f&&(Oo(t,n,f,r),d=t.memoizedState),(f=Xr||No(t,n,s,r,c,d,u))?(l||"function"!=typeof i.UNSAFE_componentWillUpdate&&"function"!=typeof i.componentWillUpdate||("function"==typeof i.componentWillUpdate&&i.componentWillUpdate(r,d,u),"function"==typeof i.UNSAFE_componentWillUpdate&&i.UNSAFE_componentWillUpdate(r,d,u)),"function"==typeof i.componentDidUpdate&&(t.effectTag|=4),"function"==typeof i.getSnapshotBeforeUpdate&&(t.effectTag|=256)):("function"!=typeof i.componentDidUpdate||s===e.memoizedProps&&c===e.memoizedState||(t.effectTag|=4),"function"!=typeof i.getSnapshotBeforeUpdate||s===e.memoizedProps&&c===e.memoizedState||(t.effectTag|=256),t.memoizedProps=r,t.memoizedState=d),i.props=r,i.state=d,i.context=u,r=f):("function"!=typeof i.componentDidUpdate||s===e.memoizedProps&&c===e.memoizedState||(t.effectTag|=4),"function"!=typeof i.getSnapshotBeforeUpdate||s===e.memoizedProps&&c===e.memoizedState||(t.effectTag|=256),r=!1);return Qo(e,t,n,r,a,o)}function Qo(e,t,n,r,o,a){Ko(e,t);var i=0!=(64&t.effectTag);if(!r&&!i)return o&&Rr(t,n,!1),ea(e,t,a);r=t.stateNode,Go.current=t;var s=i?null:r.render();return t.effectTag|=1,null!==e&&i&&(qo(e,t,null,a),t.child=null),qo(e,t,s,a),t.memoizedState=r.state,t.memoizedProps=r.props,o&&Rr(t,n,!0),t.child}function $o(e){var t=e.stateNode;t.pendingContext?Mr(0,t.pendingContext,t.pendingContext!==t.context):t.context&&Mr(0,t.context,!1),bo(e,t.containerInfo)}function Jo(e,t){if(e&&e.defaultProps)for(var n in t=o({},t),e=e.defaultProps)void 0===t[n]&&(t[n]=e[n]);return t}function ea(e,t,n){null!==e&&(t.firstContextDependency=e.firstContextDependency);var r=t.childExpirationTime;if(0===r||r>n)return null;if(null!==e&&t.child!==e.child&&i("153"),null!==t.child){for(n=Fr(e=t.child,e.pendingProps,e.expirationTime),t.child=n,n.return=t;null!==e.sibling;)e=e.sibling,(n=n.sibling=Fr(e,e.pendingProps,e.expirationTime)).return=t;n.sibling=null}return t.child}function ta(e,t,n){var r=t.expirationTime;if(!Or.current&&(0===r||r>n)){switch(t.tag){case 5:$o(t),Vo();break;case 7:_o(t);break;case 2:Ar(t.type)&&xr(t);break;case 3:Ar(t.type._reactResult)&&xr(t);break;case 6:bo(t,t.stateNode.containerInfo);break;case 12:co(t,t.memoizedProps.value)}return ea(e,t,n)}switch(t.expirationTime=0,t.tag){case 4:return function(e,t,n,r){null!==e&&i("155");var o=t.pendingProps;if("object"==typeof n&&null!==n&&"function"==typeof n.then){var a=n=function(e){switch(e._reactStatus){case 1:return e._reactResult;case 2:throw e._reactResult;case 0:throw e;default:throw e._reactStatus=0,e.then(function(t){if(0===e._reactStatus){if(e._reactStatus=1,"object"==typeof t&&null!==t){var n=t.default;t=void 0!==n&&null!==n?n:t}e._reactResult=t}},function(t){0===e._reactStatus&&(e._reactStatus=2,e._reactResult=t)}),e}}(n);a="function"==typeof a?Ur(a)?3:1:void 0!==a&&null!==a&&a.$$typeof?14:4,a=t.tag=a;var s=Jo(n,o);switch(a){case 1:return Yo(e,t,n,s,r);case 3:return Zo(e,t,n,s,r);case 14:return Xo(e,t,n,s,r);default:i("283",n)}}if(a=Nr(t,Tr.current),po(t),a=n(o,a),t.effectTag|=1,"object"==typeof a&&null!==a&&"function"==typeof a.render&&void 0===a.$$typeof){t.tag=2,Ar(n)?(s=!0,xr(t)):s=!1,t.memoizedState=null!==a.state&&void 0!==a.state?a.state:null;var u=n.getDerivedStateFromProps;return"function"==typeof u&&Oo(t,n,u,o),a.updater=So,t.stateNode=a,a._reactInternalFiber=t,Po(t,n,o,r),Qo(e,t,n,!0,s,r)}return t.tag=0,qo(e,t,a,r),t.memoizedProps=o,t.child}(e,t,t.type,n);case 0:return Yo(e,t,t.type,t.pendingProps,n);case 1:var o=t.type._reactResult;return e=Yo(e,t,o,Jo(o,r=t.pendingProps),n),t.memoizedProps=r,e;case 2:return Zo(e,t,t.type,t.pendingProps,n);case 3:return e=Zo(e,t,o=t.type._reactResult,Jo(o,r=t.pendingProps),n),t.memoizedProps=r,e;case 5:return $o(t),null===(r=t.updateQueue)&&i("282"),o=null!==(o=t.memoizedState)?o.element:null,no(t,r,t.pendingProps,null,n),(r=t.memoizedState.element)===o?(Vo(),t=ea(e,t,n)):(o=t.stateNode,(o=(null===e||null===e.child)&&o.hydrate)&&(jo=yr(t.stateNode.containerInfo),Bo=t,o=Lo=!0),o?(t.effectTag|=2,t.child=Do(t,null,r,n)):(qo(e,t,r,n),Vo()),t=t.child),t;case 7:_o(t),null===e&&zo(t),r=t.type,o=t.pendingProps;var a=null!==e?e.memoizedProps:null,s=o.children;return vr(r,o)?s=null:null!==a&&vr(r,a)&&(t.effectTag|=16),Ko(e,t),1073741823!==n&&1&t.mode&&o.hidden?(t.expirationTime=1073741823,t.memoizedProps=o,t=null):(qo(e,t,s,n),t.memoizedProps=o,t=t.child),t;case 8:return null===e&&zo(t),t.memoizedProps=t.pendingProps,null;case 16:return null;case 6:return bo(t,t.stateNode.containerInfo),r=t.pendingProps,null===e?t.child=Ro(t,null,r,n):qo(e,t,r,n),t.memoizedProps=r,t.child;case 13:return Xo(e,t,t.type,t.pendingProps,n);case 14:return e=Xo(e,t,o=t.type._reactResult,Jo(o,r=t.pendingProps),n),t.memoizedProps=r,e;case 9:return qo(e,t,r=t.pendingProps,n),t.memoizedProps=r,t.child;case 10:return qo(e,t,r=t.pendingProps.children,n),t.memoizedProps=r,t.child;case 15:return qo(e,t,(r=t.pendingProps).children,n),t.memoizedProps=r,t.child;case 12:e:{if(r=t.type._context,o=t.pendingProps,s=t.memoizedProps,a=o.value,t.memoizedProps=o,co(t,a),null!==s){var u=s.value;if(0===(a=u===a&&(0!==u||1/u==1/a)||u!=u&&a!=a?0:0|("function"==typeof r._calculateChangedBits?r._calculateChangedBits(u,a):1073741823))){if(s.children===o.children&&!Or.current){t=ea(e,t,n);break e}}else for(null!==(s=t.child)&&(s.return=t);null!==s;){if(null!==(u=s.firstContextDependency))do{if(u.context===r&&0!=(u.observedBits&a)){if(2===s.tag||3===s.tag){var l=Zr(n);l.tag=2,$r(s,l)}(0===s.expirationTime||s.expirationTime>n)&&(s.expirationTime=n),null!==(l=s.alternate)&&(0===l.expirationTime||l.expirationTime>n)&&(l.expirationTime=n);for(var c=s.return;null!==c;){if(l=c.alternate,0===c.childExpirationTime||c.childExpirationTime>n)c.childExpirationTime=n,null!==l&&(0===l.childExpirationTime||l.childExpirationTime>n)&&(l.childExpirationTime=n);else{if(null===l||!(0===l.childExpirationTime||l.childExpirationTime>n))break;l.childExpirationTime=n}c=c.return}}l=s.child,u=u.next}while(null!==u);else l=12===s.tag&&s.type===t.type?null:s.child;if(null!==l)l.return=s;else for(l=s;null!==l;){if(l===t){l=null;break}if(null!==(s=l.sibling)){s.return=l.return,l=s;break}l=l.return}s=l}}qo(e,t,o.children,n),t=t.child}return t;case 11:return a=t.type,o=(r=t.pendingProps).children,po(t),o=o(a=ho(a,r.unstable_observedBits)),t.effectTag|=1,qo(e,t,o,n),t.memoizedProps=r,t.child;default:i("156")}}function na(e){e.effectTag|=4}var ra=void 0,oa=void 0,aa=void 0;function ia(e,t){var n=t.source,r=t.stack;null===r&&null!==n&&(r=lt(n)),null!==n&&ut(n.type),t=t.value,null!==e&&2===e.tag&&ut(e.type);try{console.error(t)}catch(e){setTimeout(function(){throw e})}}function sa(e){var t=e.ref;if(null!==t)if("function"==typeof t)try{t(null)}catch(t){ka(e,t)}else t.current=null}function ua(e){switch("function"==typeof Br&&Br(e),e.tag){case 2:case 3:sa(e);var t=e.stateNode;if("function"==typeof t.componentWillUnmount)try{t.props=e.memoizedProps,t.state=e.memoizedState,t.componentWillUnmount()}catch(t){ka(e,t)}break;case 7:sa(e);break;case 6:fa(e)}}function la(e){return 7===e.tag||5===e.tag||6===e.tag}function ca(e){e:{for(var t=e.return;null!==t;){if(la(t)){var n=t;break e}t=t.return}i("160"),n=void 0}var r=t=void 0;switch(n.tag){case 7:t=n.stateNode,r=!1;break;case 5:case 6:t=n.stateNode.containerInfo,r=!0;break;default:i("161")}16&n.effectTag&&(or(t,""),n.effectTag&=-17);e:t:for(n=e;;){for(;null===n.sibling;){if(null===n.return||la(n.return)){n=null;break e}n=n.return}for(n.sibling.return=n.return,n=n.sibling;7!==n.tag&&8!==n.tag;){if(2&n.effectTag)continue t;if(null===n.child||6===n.tag)continue t;n.child.return=n,n=n.child}if(!(2&n.effectTag)){n=n.stateNode;break e}}for(var o=e;;){if(7===o.tag||8===o.tag)if(n)if(r){var a=t,s=o.stateNode,u=n;8===a.nodeType?a.parentNode.insertBefore(s,u):a.insertBefore(s,u)}else t.insertBefore(o.stateNode,n);else r?(a=t,s=o.stateNode,8===a.nodeType?(u=a.parentNode).insertBefore(s,a):(u=a).appendChild(s),null===u.onclick&&(u.onclick=dr)):t.appendChild(o.stateNode);else if(6!==o.tag&&null!==o.child){o.child.return=o,o=o.child;continue}if(o===e)break;for(;null===o.sibling;){if(null===o.return||o.return===e)return;o=o.return}o.sibling.return=o.return,o=o.sibling}}function fa(e){for(var t=e,n=!1,r=void 0,o=void 0;;){if(!n){n=t.return;e:for(;;){switch(null===n&&i("160"),n.tag){case 7:r=n.stateNode,o=!1;break e;case 5:case 6:r=n.stateNode.containerInfo,o=!0;break e}n=n.return}n=!0}if(7===t.tag||8===t.tag){e:for(var a=t,s=a;;)if(ua(s),null!==s.child&&6!==s.tag)s.child.return=s,s=s.child;else{if(s===a)break;for(;null===s.sibling;){if(null===s.return||s.return===a)break e;s=s.return}s.sibling.return=s.return,s=s.sibling}o?(a=r,s=t.stateNode,8===a.nodeType?a.parentNode.removeChild(s):a.removeChild(s)):r.removeChild(t.stateNode)}else if(6===t.tag?(r=t.stateNode.containerInfo,o=!0):ua(t),null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return;6===(t=t.return).tag&&(n=!1)}t.sibling.return=t.return,t=t.sibling}}function da(e,t){switch(t.tag){case 2:case 3:break;case 7:var n=t.stateNode;if(null!=n){var r=t.memoizedProps,o=null!==e?e.memoizedProps:r;e=t.type;var a=t.updateQueue;if(t.updateQueue=null,null!==a){for(n[j]=r,"input"===e&&"radio"===r.type&&null!=r.name&&_t(n,r),cr(e,o),t=cr(e,r),o=0;o<a.length;o+=2){var s=a[o],u=a[o+1];"style"===s?sr(n,u):"dangerouslySetInnerHTML"===s?rr(n,u):"children"===s?or(n,u):yt(n,s,u,t)}switch(e){case"input":Ct(n,r);break;case"textarea":Qn(n,r);break;case"select":e=n._wrapperState.wasMultiple,n._wrapperState.wasMultiple=!!r.multiple,null!=(a=r.value)?Kn(n,!!r.multiple,a,!1):e!==!!r.multiple&&(null!=r.defaultValue?Kn(n,!!r.multiple,r.defaultValue,!0):Kn(n,!!r.multiple,r.multiple?[]:"",!1))}}}break;case 8:null===t.stateNode&&i("162"),t.stateNode.nodeValue=t.memoizedProps;break;case 5:case 15:case 16:break;default:i("163")}}function pa(e,t,n){(n=Zr(n)).tag=3,n.payload={element:null};var r=t.value;return n.callback=function(){hi(r),ia(e,t)},n}function ha(e,t,n){(n=Zr(n)).tag=3;var r=e.stateNode;return null!==r&&"function"==typeof r.componentDidCatch&&(n.callback=function(){null===Na?Na=new Set([this]):Na.add(this);var n=t.value,r=t.stack;ia(e,t),this.componentDidCatch(n,{componentStack:null!==r?r:""})}),n}function ga(e){switch(e.tag){case 2:Ar(e.type)&&Pr();var t=e.effectTag;return 1024&t?(e.effectTag=-1025&t|64,e):null;case 3:return Ar(e.type._reactResult)&&Pr(),1024&(t=e.effectTag)?(e.effectTag=-1025&t|64,e):null;case 5:return Eo(),Ir(),0!=(64&(t=e.effectTag))&&i("285"),e.effectTag=-1025&t|64,e;case 7:return Co(e),null;case 16:return 1024&(t=e.effectTag)?(e.effectTag=-1025&t|64,e):null;case 6:return Eo(),null;case 12:return fo(e),null;default:return null}}ra=function(){},oa=function(e,t,n){(t.updateQueue=n)&&na(t)},aa=function(e,t,n,r){n!==r&&na(t)};var va={readContext:ho},ma=Xe.ReactCurrentOwner,ya=0,wa=0,ba=!1,Ea=null,_a=null,Ca=0,Ta=!1,Oa=null,Sa=!1,Na=null;function Aa(){if(null!==Ea)for(var e=Ea.return;null!==e;){var t=e;switch(t.tag){case 2:var n=t.type.childContextTypes;null!==n&&void 0!==n&&Pr();break;case 3:null!==(n=t.type._reactResult.childContextTypes)&&void 0!==n&&Pr();break;case 5:Eo(),Ir();break;case 7:Co(t);break;case 6:Eo();break;case 12:fo(t)}e=e.return}_a=null,Ca=0,Ta=!1,Ea=null}function Pa(e){for(;;){var t=e.alternate,n=e.return,r=e.sibling;if(0==(512&e.effectTag)){var a=t,s=(t=e).pendingProps;switch(t.tag){case 0:case 1:break;case 2:Ar(t.type)&&Pr();break;case 3:Ar(t.type._reactResult)&&Pr();break;case 5:Eo(),Ir(),(s=t.stateNode).pendingContext&&(s.context=s.pendingContext,s.pendingContext=null),null!==a&&null!==a.child||(Wo(t),t.effectTag&=-3),ra(t);break;case 7:Co(t);var u=wo(yo.current),l=t.type;if(null!==a&&null!=t.stateNode){var c=a.memoizedProps;if(c!==s){var f=t.stateNode,d=wo(vo.current),p=f,h=l,g=c,v=s;f=u;var m=null;switch(h){case"input":g=bt(p,g),v=bt(p,v),m=[];break;case"option":g=Xn(p,g),v=Xn(p,v),m=[];break;case"select":g=o({},g,{value:void 0}),v=o({},v,{value:void 0}),m=[];break;case"textarea":g=Yn(p,g),v=Yn(p,v),m=[];break;default:"function"!=typeof g.onClick&&"function"==typeof v.onClick&&(p.onclick=dr)}lr(h,v),h=p=void 0;var y=null;for(p in g)if(!v.hasOwnProperty(p)&&g.hasOwnProperty(p)&&null!=g[p])if("style"===p){var b=g[p];for(h in b)b.hasOwnProperty(h)&&(y||(y={}),y[h]="")}else"dangerouslySetInnerHTML"!==p&&"children"!==p&&"suppressContentEditableWarning"!==p&&"suppressHydrationWarning"!==p&&"autoFocus"!==p&&(w.hasOwnProperty(p)?m||(m=[]):(m=m||[]).push(p,null));for(p in v){var E=v[p];if(b=null!=g?g[p]:void 0,v.hasOwnProperty(p)&&E!==b&&(null!=E||null!=b))if("style"===p)if(b){for(h in b)!b.hasOwnProperty(h)||E&&E.hasOwnProperty(h)||(y||(y={}),y[h]="");for(h in E)E.hasOwnProperty(h)&&b[h]!==E[h]&&(y||(y={}),y[h]=E[h])}else y||(m||(m=[]),m.push(p,y)),y=E;else"dangerouslySetInnerHTML"===p?(E=E?E.__html:void 0,b=b?b.__html:void 0,null!=E&&b!==E&&(m=m||[]).push(p,""+E)):"children"===p?b===E||"string"!=typeof E&&"number"!=typeof E||(m=m||[]).push(p,""+E):"suppressContentEditableWarning"!==p&&"suppressHydrationWarning"!==p&&(w.hasOwnProperty(p)?(null!=E&&fr(f,p),m||b===E||(m=[])):(m=m||[]).push(p,E))}y&&(m=m||[]).push("style",y),oa(a,t,m,l,c,s,u,d)}a.ref!==t.ref&&(t.effectTag|=128)}else if(s){if(m=wo(vo.current),Wo(t)){switch(f=(s=t).stateNode,a=s.type,c=s.memoizedProps,d=u,f[B]=s,f[j]=c,l=void 0,u=f,a){case"iframe":case"object":Sn("load",u);break;case"video":case"audio":for(f=0;f<oe.length;f++)Sn(oe[f],u);break;case"source":Sn("error",u);break;case"img":case"image":case"link":Sn("error",u),Sn("load",u);break;case"form":Sn("reset",u),Sn("submit",u);break;case"details":Sn("toggle",u);break;case"input":Et(u,c),Sn("invalid",u),fr(d,"onChange");break;case"select":u._wrapperState={wasMultiple:!!c.multiple},Sn("invalid",u),fr(d,"onChange");break;case"textarea":Zn(u,c),Sn("invalid",u),fr(d,"onChange")}for(l in lr(a,c),f=null,c)c.hasOwnProperty(l)&&(m=c[l],"children"===l?"string"==typeof m?u.textContent!==m&&(f=["children",m]):"number"==typeof m&&u.textContent!==""+m&&(f=["children",""+m]):w.hasOwnProperty(l)&&null!=m&&fr(d,l));switch(a){case"input":Ge(u),Tt(u,c,!0);break;case"textarea":Ge(u),$n(u);break;case"select":case"option":break;default:"function"==typeof c.onClick&&(u.onclick=dr)}l=f,s.updateQueue=l,(s=null!==l)&&na(t)}else{c=t,a=l,d=s,f=9===u.nodeType?u:u.ownerDocument,m===Jn.html&&(m=er(a)),m===Jn.html?"script"===a?((a=f.createElement("div")).innerHTML="<script><\/script>",f=a.removeChild(a.firstChild)):"string"==typeof d.is?f=f.createElement(a,{is:d.is}):(f=f.createElement(a),"select"===a&&d.multiple&&(f.multiple=!0)):f=f.createElementNS(m,a),(a=f)[B]=c,a[j]=s;e:for(c=a,d=t,f=d.child;null!==f;){if(7===f.tag||8===f.tag)c.appendChild(f.stateNode);else if(6!==f.tag&&null!==f.child){f.child.return=f,f=f.child;continue}if(f===d)break;for(;null===f.sibling;){if(null===f.return||f.return===d)break e;f=f.return}f.sibling.return=f.return,f=f.sibling}switch(d=a,p=u,y=cr(f=l,c=s),f){case"iframe":case"object":Sn("load",d),u=c;break;case"video":case"audio":for(u=0;u<oe.length;u++)Sn(oe[u],d);u=c;break;case"source":Sn("error",d),u=c;break;case"img":case"image":case"link":Sn("error",d),Sn("load",d),u=c;break;case"form":Sn("reset",d),Sn("submit",d),u=c;break;case"details":Sn("toggle",d),u=c;break;case"input":Et(d,c),u=bt(d,c),Sn("invalid",d),fr(p,"onChange");break;case"option":u=Xn(d,c);break;case"select":d._wrapperState={wasMultiple:!!c.multiple},u=o({},c,{value:void 0}),Sn("invalid",d),fr(p,"onChange");break;case"textarea":Zn(d,c),u=Yn(d,c),Sn("invalid",d),fr(p,"onChange");break;default:u=c}for(m in lr(f,u),m=void 0,g=f,v=d,h=u)h.hasOwnProperty(m)&&(b=h[m],"style"===m?sr(v,b):"dangerouslySetInnerHTML"===m?null!=(b=b?b.__html:void 0)&&rr(v,b):"children"===m?"string"==typeof b?("textarea"!==g||""!==b)&&or(v,b):"number"==typeof b&&or(v,""+b):"suppressContentEditableWarning"!==m&&"suppressHydrationWarning"!==m&&"autoFocus"!==m&&(w.hasOwnProperty(m)?null!=b&&fr(p,m):null!=b&&yt(v,m,b,y)));switch(f){case"input":Ge(d),Tt(d,c,!1);break;case"textarea":Ge(d),$n(d);break;case"option":null!=c.value&&d.setAttribute("value",""+wt(c.value));break;case"select":(u=d).multiple=!!c.multiple,null!=(d=c.value)?Kn(u,!!c.multiple,d,!1):null!=c.defaultValue&&Kn(u,!!c.multiple,c.defaultValue,!0);break;default:"function"==typeof u.onClick&&(d.onclick=dr)}(s=gr(l,s))&&na(t),t.stateNode=a}null!==t.ref&&(t.effectTag|=128)}else null===t.stateNode&&i("166");break;case 8:a&&null!=t.stateNode?aa(a,t,a.memoizedProps,s):("string"!=typeof s&&(null===t.stateNode&&i("166")),u=wo(yo.current),wo(vo.current),Wo(t)?(l=(s=t).stateNode,u=s.memoizedProps,l[B]=s,(s=l.nodeValue!==u)&&na(t)):(l=t,(s=(9===u.nodeType?u:u.ownerDocument).createTextNode(s))[B]=l,t.stateNode=s));break;case 13:case 14:case 16:case 9:case 10:case 15:break;case 6:Eo(),ra(t);break;case 12:fo(t);break;case 11:break;case 4:i("167");default:i("156")}if(t=Ea=null,s=e,1073741823===Ca||1073741823!==s.childExpirationTime){for(l=0,u=s.child;null!==u;)a=u.expirationTime,c=u.childExpirationTime,(0===l||0!==a&&a<l)&&(l=a),(0===l||0!==c&&c<l)&&(l=c),u=u.sibling;s.childExpirationTime=l}if(null!==t)return t;null!==n&&0==(512&n.effectTag)&&(null===n.firstEffect&&(n.firstEffect=e.firstEffect),null!==e.lastEffect&&(null!==n.lastEffect&&(n.lastEffect.nextEffect=e.firstEffect),n.lastEffect=e.lastEffect),1<e.effectTag&&(null!==n.lastEffect?n.lastEffect.nextEffect=e:n.firstEffect=e,n.lastEffect=e))}else{if(null!==(e=ga(e)))return e.effectTag&=511,e;null!==n&&(n.firstEffect=n.lastEffect=null,n.effectTag|=512)}if(null!==r)return r;if(null===n)break;e=n}return null}function Ia(e){var t=ta(e.alternate,e,Ca);return null===t&&(t=Pa(e)),ma.current=null,t}function Ma(e,t,n){ba&&i("243"),ba=!0,ma.currentDispatcher=va;var r=e.nextExpirationTimeToWorkOn;r===Ca&&e===_a&&null!==Ea||(Aa(),Ca=r,Ea=Fr((_a=e).current,null,Ca),e.pendingCommitExpirationTime=0);for(var o=!1;;){try{if(t)for(;null!==Ea&&!pi();)Ea=Ia(Ea);else for(;null!==Ea;)Ea=Ia(Ea)}catch(e){if(null===Ea)o=!0,hi(e);else{null===Ea&&i("271");var a=Ea,s=a.return;if(null!==s){e:{var u=s,l=a,c=e;s=Ca,l.effectTag|=512,l.firstEffect=l.lastEffect=null,Ta=!0,c=ao(c,l);do{switch(u.tag){case 5:u.effectTag|=1024,u.expirationTime=s,Jr(u,s=pa(u,c,s));break e;case 2:case 3:l=c;var f=u.stateNode;if(0==(64&u.effectTag)&&null!==f&&"function"==typeof f.componentDidCatch&&(null===Na||!Na.has(f))){u.effectTag|=1024,u.expirationTime=s,Jr(u,s=ha(u,l,s));break e}}u=u.return}while(null!==u)}Ea=Pa(a);continue}o=!0,hi(e)}}break}if(ba=!1,lo=uo=so=ma.currentDispatcher=null,o)_a=null,e.finishedWork=null;else if(null!==Ea)e.finishedWork=null;else{if(null===(t=e.current.alternate)&&i("281"),_a=null,Ta){if(o=e.latestPendingTime,a=e.latestSuspendedTime,s=e.latestPingedTime,0!==o&&o>r||0!==a&&a>r||0!==s&&s>r)return e.didError=!1,0!==(n=e.latestPingedTime)&&n<=r&&(e.latestPingedTime=0),n=e.earliestPendingTime,t=e.latestPendingTime,n===r?e.earliestPendingTime=t===r?e.latestPendingTime=0:t:t===r&&(e.latestPendingTime=n),n=e.earliestSuspendedTime,t=e.latestSuspendedTime,0===n?e.earliestSuspendedTime=e.latestSuspendedTime=r:n>r?e.earliestSuspendedTime=r:t<r&&(e.latestSuspendedTime=r),qr(r,e),void(e.expirationTime=e.expirationTime);if(!e.didError&&!n)return e.didError=!0,e.nextExpirationTimeToWorkOn=r,r=e.expirationTime=1,void(e.expirationTime=r)}e.pendingCommitExpirationTime=r,e.finishedWork=t}}function ka(e,t){var n;e:{for(ba&&!Sa&&i("263"),n=e.return;null!==n;){switch(n.tag){case 2:case 3:var r=n.stateNode;if("function"==typeof n.type.getDerivedStateFromCatch||"function"==typeof r.componentDidCatch&&(null===Na||!Na.has(r))){$r(n,e=ha(n,e=ao(t,e),1)),Ra(n,1),n=void 0;break e}break;case 5:$r(n,e=pa(n,e=ao(t,e),1)),Ra(n,1),n=void 0;break e}n=n.return}5===e.tag&&($r(e,n=pa(e,n=ao(t,e),1)),Ra(e,1)),n=void 0}return n}function xa(e,t){return 0!==wa?e=wa:ba?e=Sa?1:Ca:1&t.mode?(e=Za?2+10*(1+((e-2+15)/10|0)):2+25*(1+((e-2+500)/25|0)),null!==_a&&e===Ca&&(e+=1)):e=1,Za&&(0===Wa||e>Wa)&&(Wa=e),e}function Ra(e,t){e:{(0===e.expirationTime||e.expirationTime>t)&&(e.expirationTime=t);var n=e.alternate;null!==n&&(0===n.expirationTime||n.expirationTime>t)&&(n.expirationTime=t);var r=e.return;if(null===r&&5===e.tag)e=e.stateNode;else{for(;null!==r;){if(n=r.alternate,(0===r.childExpirationTime||r.childExpirationTime>t)&&(r.childExpirationTime=t),null!==n&&(0===n.childExpirationTime||n.childExpirationTime>t)&&(n.childExpirationTime=t),null===r.return&&5===r.tag){e=r.stateNode;break e}r=r.return}e=null}}null!==e&&(!ba&&0!==Ca&&t<Ca&&Aa(),Gr(e,t),ba&&!Sa&&_a===e||(t=e,e=e.expirationTime,null===t.nextScheduledRoot?(t.expirationTime=e,null===ja?(Ba=ja=t,t.nextScheduledRoot=t):(ja=ja.nextScheduledRoot=t).nextScheduledRoot=Ba):(0===(n=t.expirationTime)||e<n)&&(t.expirationTime=e),Fa||(Ka?Ya&&(za=t,Ha=1,fi(t,1,!0)):1===e?ci(1,null):ii(t,e))),ni>ti&&(ni=0,i("185")))}function Da(e,t,n,r,o){var a=wa;wa=1;try{return e(t,n,r,o)}finally{wa=a}}var Ba=null,ja=null,La=0,Ua=void 0,Fa=!1,za=null,Ha=0,Wa=0,Va=!1,Ga=!1,qa=null,Xa=null,Ka=!1,Ya=!1,Za=!1,Qa=null,$a=a.unstable_now(),Ja=2+($a/10|0),ei=Ja,ti=50,ni=0,ri=null,oi=1;function ai(){Ja=2+((a.unstable_now()-$a)/10|0)}function ii(e,t){if(0!==La){if(t>La)return;null!==Ua&&a.unstable_cancelScheduledWork(Ua)}La=t,e=a.unstable_now()-$a,Ua=a.unstable_scheduleWork(li,{timeout:10*(t-2)-e})}function si(){return Fa?ei:(ui(),0!==Ha&&1073741823!==Ha||(ai(),ei=Ja),ei)}function ui(){var e=0,t=null;if(null!==ja)for(var n=ja,r=Ba;null!==r;){var o=r.expirationTime;if(0===o){if((null===n||null===ja)&&i("244"),r===r.nextScheduledRoot){Ba=ja=r.nextScheduledRoot=null;break}if(r===Ba)Ba=o=r.nextScheduledRoot,ja.nextScheduledRoot=o,r.nextScheduledRoot=null;else{if(r===ja){(ja=n).nextScheduledRoot=Ba,r.nextScheduledRoot=null;break}n.nextScheduledRoot=r.nextScheduledRoot,r.nextScheduledRoot=null}r=n.nextScheduledRoot}else{if((0===e||o<e)&&(e=o,t=r),r===ja)break;if(1===e)break;n=r,r=r.nextScheduledRoot}}za=t,Ha=e}function li(e){if(e.didTimeout&&null!==Ba){ai();var t=Ba;do{var n=t.expirationTime;0!==n&&Ja>=n&&(t.nextExpirationTimeToWorkOn=Ja),t=t.nextScheduledRoot}while(t!==Ba)}ci(0,e)}function ci(e,t){if(Xa=t,ui(),null!==Xa)for(ai(),ei=Ja;null!==za&&0!==Ha&&(0===e||e>=Ha)&&(!Va||Ja>=Ha);)fi(za,Ha,Ja>=Ha),ui(),ai(),ei=Ja;else for(;null!==za&&0!==Ha&&(0===e||e>=Ha);)fi(za,Ha,!0),ui();if(null!==Xa&&(La=0,Ua=null),0!==Ha&&ii(za,Ha),Xa=null,Va=!1,ni=0,ri=null,null!==Qa)for(e=Qa,Qa=null,t=0;t<e.length;t++){var n=e[t];try{n._onComplete()}catch(e){Ga||(Ga=!0,qa=e)}}if(Ga)throw e=qa,qa=null,Ga=!1,e}function fi(e,t,n){if(Fa&&i("245"),Fa=!0,null===Xa||n){var r=e.finishedWork;null!==r?di(e,r,t):(e.finishedWork=null,Ma(e,!1,n),null!==(r=e.finishedWork)&&di(e,r,t))}else null!==(r=e.finishedWork)?di(e,r,t):(e.finishedWork=null,Ma(e,!0,n),null!==(r=e.finishedWork)&&(pi()?e.finishedWork=r:di(e,r,t)));Fa=!1}function di(e,t,n){var r=e.firstBatch;if(null!==r&&r._expirationTime<=n&&(null===Qa?Qa=[r]:Qa.push(r),r._defer))return e.finishedWork=t,void(e.expirationTime=0);e.finishedWork=null,e===ri?ni++:(ri=e,ni=0),Sa=ba=!0,e.current===t&&i("177"),0===(n=e.pendingCommitExpirationTime)&&i("261"),e.pendingCommitExpirationTime=0,r=t.expirationTime;var o=t.childExpirationTime;if(r=0===r||0!==o&&o<r?o:r,e.didError=!1,0===r?(e.earliestPendingTime=0,e.latestPendingTime=0,e.earliestSuspendedTime=0,e.latestSuspendedTime=0,e.latestPingedTime=0):(0!==(o=e.latestPendingTime)&&(o<r?e.earliestPendingTime=e.latestPendingTime=0:e.earliestPendingTime<r&&(e.earliestPendingTime=e.latestPendingTime)),0===(o=e.earliestSuspendedTime)?Gr(e,r):r>e.latestSuspendedTime?(e.earliestSuspendedTime=0,e.latestSuspendedTime=0,e.latestPingedTime=0,Gr(e,r)):r<o&&Gr(e,r)),qr(0,e),ma.current=null,1<t.effectTag?null!==t.lastEffect?(t.lastEffect.nextEffect=t,r=t.firstEffect):r=t:r=t.firstEffect,pr=On,Ln(o=jn())){if("selectionStart"in o)var a={start:o.selectionStart,end:o.selectionEnd};else e:{var s=(a=(a=o.ownerDocument)&&a.defaultView||window).getSelection&&a.getSelection();if(s&&0!==s.rangeCount){a=s.anchorNode;var u=s.anchorOffset,l=s.focusNode;s=s.focusOffset;try{a.nodeType,l.nodeType}catch(e){a=null;break e}var c=0,f=-1,d=-1,p=0,h=0,g=o,v=null;t:for(;;){for(var m;g!==a||0!==u&&3!==g.nodeType||(f=c+u),g!==l||0!==s&&3!==g.nodeType||(d=c+s),3===g.nodeType&&(c+=g.nodeValue.length),null!==(m=g.firstChild);)v=g,g=m;for(;;){if(g===o)break t;if(v===a&&++p===u&&(f=c),v===l&&++h===s&&(d=c),null!==(m=g.nextSibling))break;v=(g=v).parentNode}g=m}a=-1===f||-1===d?null:{start:f,end:d}}else a=null}a=a||{start:0,end:0}}else a=null;for(hr={focusedElem:o,selectionRange:a},On=!1,Oa=r;null!==Oa;){o=!1,a=void 0;try{for(;null!==Oa;){if(256&Oa.effectTag){var y=Oa.alternate;e:switch(u=Oa,u.tag){case 2:case 3:if(256&u.effectTag&&null!==y){var w=y.memoizedProps,b=y.memoizedState,E=u.stateNode;E.props=u.memoizedProps,E.state=u.memoizedState;var _=E.getSnapshotBeforeUpdate(w,b);E.__reactInternalSnapshotBeforeUpdate=_}break e;case 5:case 7:case 8:case 6:break e;default:i("163")}}Oa=Oa.nextEffect}}catch(e){o=!0,a=e}o&&(null===Oa&&i("178"),ka(Oa,a),null!==Oa&&(Oa=Oa.nextEffect))}for(Oa=r;null!==Oa;){y=!1,w=void 0;try{for(;null!==Oa;){var C=Oa.effectTag;if(16&C&&or(Oa.stateNode,""),128&C){var T=Oa.alternate;if(null!==T){var O=T.ref;null!==O&&("function"==typeof O?O(null):O.current=null)}}switch(14&C){case 2:ca(Oa),Oa.effectTag&=-3;break;case 6:ca(Oa),Oa.effectTag&=-3,da(Oa.alternate,Oa);break;case 4:da(Oa.alternate,Oa);break;case 8:fa(b=Oa),b.return=null,b.child=null,b.alternate&&(b.alternate.child=null,b.alternate.return=null)}Oa=Oa.nextEffect}}catch(e){y=!0,w=e}y&&(null===Oa&&i("178"),ka(Oa,w),null!==Oa&&(Oa=Oa.nextEffect))}if(O=hr,T=jn(),C=O.focusedElem,w=O.selectionRange,T!==C&&C&&C.ownerDocument&&function e(t,n){return!(!t||!n)&&(t===n||(!t||3!==t.nodeType)&&(n&&3===n.nodeType?e(t,n.parentNode):"contains"in t?t.contains(n):!!t.compareDocumentPosition&&!!(16&t.compareDocumentPosition(n))))}(C.ownerDocument.documentElement,C)){null!==w&&Ln(C)&&(T=w.start,void 0===(O=w.end)&&(O=T),"selectionStart"in C?(C.selectionStart=T,C.selectionEnd=Math.min(O,C.value.length)):(T=((y=C.ownerDocument||document)?y.defaultView:window).getSelection(),b=C.textContent.length,O=Math.min(w.start,b),w=void 0===w.end?O:Math.min(w.end,b),!T.extend&&O>w&&(b=w,w=O,O=b),b=Bn(C,O),E=Bn(C,w),b&&E&&(1!==T.rangeCount||T.anchorNode!==b.node||T.anchorOffset!==b.offset||T.focusNode!==E.node||T.focusOffset!==E.offset)&&((y=y.createRange()).setStart(b.node,b.offset),T.removeAllRanges(),O>w?(T.addRange(y),T.extend(E.node,E.offset)):(y.setEnd(E.node,E.offset),T.addRange(y))))),T=[];for(O=C;O=O.parentNode;)1===O.nodeType&&T.push({element:O,left:O.scrollLeft,top:O.scrollTop});for("function"==typeof C.focus&&C.focus(),C=0;C<T.length;C++)(O=T[C]).element.scrollLeft=O.left,O.element.scrollTop=O.top}for(hr=null,On=!!pr,pr=null,e.current=t,Oa=r;null!==Oa;){r=!1,C=void 0;try{for(T=n;null!==Oa;){var S=Oa.effectTag;if(36&S){var N=Oa.alternate;switch(y=T,(O=Oa).tag){case 2:case 3:var A=O.stateNode;if(4&O.effectTag)if(null===N)A.props=O.memoizedProps,A.state=O.memoizedState,A.componentDidMount();else{var P=N.memoizedProps,I=N.memoizedState;A.props=O.memoizedProps,A.state=O.memoizedState,A.componentDidUpdate(P,I,A.__reactInternalSnapshotBeforeUpdate)}var M=O.updateQueue;null!==M&&(A.props=O.memoizedProps,A.state=O.memoizedState,ro(0,M,A));break;case 5:var k=O.updateQueue;if(null!==k){if(w=null,null!==O.child)switch(O.child.tag){case 7:w=O.child.stateNode;break;case 2:case 3:w=O.child.stateNode}ro(0,k,w)}break;case 7:var x=O.stateNode;null===N&&4&O.effectTag&&gr(O.type,O.memoizedProps)&&x.focus();break;case 8:case 6:case 15:case 16:break;default:i("163")}}if(128&S){var R=Oa.ref;if(null!==R){var D=Oa.stateNode;switch(Oa.tag){case 7:var B=D;break;default:B=D}"function"==typeof R?R(B):R.current=B}}var j=Oa.nextEffect;Oa.nextEffect=null,Oa=j}}catch(e){r=!0,C=e}r&&(null===Oa&&i("178"),ka(Oa,C),null!==Oa&&(Oa=Oa.nextEffect))}ba=Sa=!1,"function"==typeof Dr&&Dr(t.stateNode),S=t.expirationTime,t=t.childExpirationTime,0===(t=0===S||0!==t&&t<S?t:S)&&(Na=null),e.expirationTime=t,e.finishedWork=null}function pi(){return!!Va||!(null===Xa||Xa.timeRemaining()>oi)&&(Va=!0)}function hi(e){null===za&&i("246"),za.expirationTime=0,Ga||(Ga=!0,qa=e)}function gi(e,t){var n=Ka;Ka=!0;try{return e(t)}finally{(Ka=n)||Fa||ci(1,null)}}function vi(e,t){if(Ka&&!Ya){Ya=!0;try{return e(t)}finally{Ya=!1}}return e(t)}function mi(e,t,n){if(Za)return e(t,n);Ka||Fa||0===Wa||(ci(Wa,null),Wa=0);var r=Za,o=Ka;Ka=Za=!0;try{return e(t,n)}finally{Za=r,(Ka=o)||Fa||ci(1,null)}}function yi(e,t,n,r,o){var a=t.current;return n=function(e){if(!e)return Cr;e=e._reactInternalFiber;e:{(2!==nn(e)||2!==e.tag&&3!==e.tag)&&i("170");var t=e;do{switch(t.tag){case 5:t=t.stateNode.context;break e;case 2:if(Ar(t.type)){t=t.stateNode.__reactInternalMemoizedMergedChildContext;break e}break;case 3:if(Ar(t.type._reactResult)){t=t.stateNode.__reactInternalMemoizedMergedChildContext;break e}}t=t.return}while(null!==t);i("171"),t=void 0}if(2===e.tag){var n=e.type;if(Ar(n))return kr(e,n,t)}else if(3===e.tag&&Ar(n=e.type._reactResult))return kr(e,n,t);return t}(n),null===t.context?t.context=n:t.pendingContext=n,t=o,(o=Zr(r)).payload={element:e},null!==(t=void 0===t?null:t)&&(o.callback=t),$r(a,o),Ra(a,r),r}function wi(e,t,n,r){var o=t.current;return yi(e,t,n,o=xa(si(),o),r)}function bi(e){if(!(e=e.current).child)return null;switch(e.child.tag){case 7:default:return e.child.stateNode}}function Ei(e){var t=2+25*(1+((si()-2+500)/25|0));t<=ya&&(t=ya+1),this._expirationTime=ya=t,this._root=e,this._callbacks=this._next=null,this._hasChildren=this._didComplete=!1,this._children=null,this._defer=!0}function _i(){this._callbacks=null,this._didCommit=!1,this._onCommit=this._onCommit.bind(this)}function Ci(e,t,n){e={current:t=new Lr(5,null,null,t?3:0),containerInfo:e,pendingChildren:null,earliestPendingTime:0,latestPendingTime:0,earliestSuspendedTime:0,latestSuspendedTime:0,latestPingedTime:0,didError:!1,pendingCommitExpirationTime:0,finishedWork:null,timeoutHandle:-1,context:null,pendingContext:null,hydrate:n,nextExpirationTimeToWorkOn:0,expirationTime:0,firstBatch:null,nextScheduledRoot:null},this._internalRoot=t.stateNode=e}function Ti(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType&&(8!==e.nodeType||" react-mount-point-unstable "!==e.nodeValue))}function Oi(e,t,n,r,o){Ti(n)||i("200");var a=n._reactRootContainer;if(a){if("function"==typeof o){var s=o;o=function(){var e=bi(a._internalRoot);s.call(e)}}null!=e?a.legacy_renderSubtreeIntoContainer(e,t,o):a.render(t,o)}else{if(a=n._reactRootContainer=function(e,t){if(t||(t=!(!(t=e?9===e.nodeType?e.documentElement:e.firstChild:null)||1!==t.nodeType||!t.hasAttribute("data-reactroot"))),!t)for(var n;n=e.lastChild;)e.removeChild(n);return new Ci(e,!1,t)}(n,r),"function"==typeof o){var u=o;o=function(){var e=bi(a._internalRoot);u.call(e)}}vi(function(){null!=e?a.legacy_renderSubtreeIntoContainer(e,t,o):a.render(t,o)})}return bi(a._internalRoot)}function Si(e,t){var n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;return Ti(t)||i("200"),function(e,t,n){var r=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:Qe,key:null==r?null:""+r,children:e,containerInfo:t,implementation:n}}(e,t,null,n)}Pe=function(e,t,n){switch(t){case"input":if(Ct(e,n),t=n.name,"radio"===n.type&&null!=t){for(n=e;n.parentNode;)n=n.parentNode;for(n=n.querySelectorAll("input[name="+JSON.stringify(""+t)+'][type="radio"]'),t=0;t<n.length;t++){var r=n[t];if(r!==e&&r.form===e.form){var o=z(r);o||i("90"),qe(r),Ct(r,o)}}}break;case"textarea":Qn(e,n);break;case"select":null!=(t=n.value)&&Kn(e,!!n.multiple,t,!1)}},Ei.prototype.render=function(e){this._defer||i("250"),this._hasChildren=!0,this._children=e;var t=this._root._internalRoot,n=this._expirationTime,r=new _i;return yi(e,t,null,n,r._onCommit),r},Ei.prototype.then=function(e){if(this._didComplete)e();else{var t=this._callbacks;null===t&&(t=this._callbacks=[]),t.push(e)}},Ei.prototype.commit=function(){var e=this._root._internalRoot,t=e.firstBatch;if(this._defer&&null!==t||i("251"),this._hasChildren){var n=this._expirationTime;if(t!==this){this._hasChildren&&(n=this._expirationTime=t._expirationTime,this.render(this._children));for(var r=null,o=t;o!==this;)r=o,o=o._next;null===r&&i("251"),r._next=o._next,this._next=t,e.firstBatch=this}this._defer=!1,t=n,Fa&&i("253"),za=e,Ha=t,fi(e,t,!0),ci(1,null),t=this._next,this._next=null,null!==(t=e.firstBatch=t)&&t._hasChildren&&t.render(t._children)}else this._next=null,this._defer=!1},Ei.prototype._onComplete=function(){if(!this._didComplete){this._didComplete=!0;var e=this._callbacks;if(null!==e)for(var t=0;t<e.length;t++)(0,e[t])()}},_i.prototype.then=function(e){if(this._didCommit)e();else{var t=this._callbacks;null===t&&(t=this._callbacks=[]),t.push(e)}},_i.prototype._onCommit=function(){if(!this._didCommit){this._didCommit=!0;var e=this._callbacks;if(null!==e)for(var t=0;t<e.length;t++){var n=e[t];"function"!=typeof n&&i("191",n),n()}}},Ci.prototype.render=function(e,t){var n=this._internalRoot,r=new _i;return null!==(t=void 0===t?null:t)&&r.then(t),wi(e,n,null,r._onCommit),r},Ci.prototype.unmount=function(e){var t=this._internalRoot,n=new _i;return null!==(e=void 0===e?null:e)&&n.then(e),wi(null,t,null,n._onCommit),n},Ci.prototype.legacy_renderSubtreeIntoContainer=function(e,t,n){var r=this._internalRoot,o=new _i;return null!==(n=void 0===n?null:n)&&o.then(n),wi(t,r,e,o._onCommit),o},Ci.prototype.createBatch=function(){var e=new Ei(this),t=e._expirationTime,n=this._internalRoot,r=n.firstBatch;if(null===r)n.firstBatch=e,e._next=null;else{for(n=null;null!==r&&r._expirationTime<=t;)n=r,r=r._next;e._next=r,null!==n&&(n._next=e)}return e},De=gi,Be=mi,je=function(){Fa||0===Wa||(ci(Wa,null),Wa=0)};var Ni={createPortal:Si,findDOMNode:function(e){if(null==e)return null;if(1===e.nodeType)return e;var t=e._reactInternalFiber;return void 0===t&&("function"==typeof e.render?i("188"):i("268",Object.keys(e))),e=null===(e=on(t))?null:e.stateNode},hydrate:function(e,t,n){return Oi(null,e,t,!0,n)},render:function(e,t,n){return Oi(null,e,t,!1,n)},unstable_renderSubtreeIntoContainer:function(e,t,n,r){return(null==e||void 0===e._reactInternalFiber)&&i("38"),Oi(e,t,n,!1,r)},unmountComponentAtNode:function(e){return Ti(e)||i("40"),!!e._reactRootContainer&&(vi(function(){Oi(null,null,e,!1,function(){e._reactRootContainer=null})}),!0)},unstable_createPortal:function(){return Si.apply(void 0,arguments)},unstable_batchedUpdates:gi,unstable_interactiveUpdates:mi,flushSync:function(e,t){Fa&&i("187");var n=Ka;Ka=!0;try{return Da(e,t)}finally{Ka=n,ci(1,null)}},unstable_flushControlled:function(e){var t=Ka;Ka=!0;try{Da(e)}finally{(Ka=t)||Fa||ci(1,null)}},__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED:{Events:[U,F,z,y,X,function(e){S(e,q)},xe,Re,Pn,R]},unstable_createRoot:function(e,t){return Ti(e)||i("278"),new Ci(e,!0,null!=t&&!0===t.hydrate)}};!function(e){var t=e.findFiberByHostInstance;(function(e){if("undefined"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__)return!1;var t=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(t.isDisabled||!t.supportsFiber)return!0;try{var n=t.inject(e);Dr=jr(function(e){return t.onCommitFiberRoot(n,e)}),Br=jr(function(e){return t.onCommitFiberUnmount(n,e)})}catch(e){}})(o({},e,{findHostInstanceByFiber:function(e){return null===(e=on(e))?null:e.stateNode},findFiberByHostInstance:function(e){return t?t(e):null}}))}({findFiberByHostInstance:L,bundleType:0,version:"16.5.0",rendererPackageName:"react-dom"});var Ai={default:Ni},Pi=Ai&&Ni||Ai;e.exports=Pi.default||Pi},function(e,t,n){"use strict";e.exports=n(104)},function(e,t,n){"use strict";
/** @license React v16.5.0
 * schedule.production.min.js
 *
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */Object.defineProperty(t,"__esModule",{value:!0});var r=!("undefined"==typeof window||!window.document||!window.document.createElement),o=Date,a="function"==typeof setTimeout?setTimeout:void 0,i="function"==typeof clearTimeout?clearTimeout:void 0,s="function"==typeof requestAnimationFrame?requestAnimationFrame:void 0,u="function"==typeof cancelAnimationFrame?cancelAnimationFrame:void 0,l="object"==typeof performance&&"function"==typeof performance.now;if(t.unstable_now=void 0,l){var c=performance;t.unstable_now=function(){return c.now()}}else t.unstable_now=function(){return o.now()};if(t.unstable_scheduleWork=void 0,t.unstable_cancelScheduledWork=void 0,r){var f=null,d=null,p=-1,h=!1,g=!1,v=void 0,m=void 0,y=function(e){v=s(function(t){i(m),e(t)}),m=a(function(){u(v),e(t.unstable_now())},100)},w=0,b=33,E=33,_={didTimeout:!1,timeRemaining:function(){var e=w-t.unstable_now();return 0<e?e:0}},C=function(e,n){var r=e.scheduledCallback,o=!1;try{r(n),o=!0}finally{t.unstable_cancelScheduledWork(e),o||(h=!0,window.postMessage(T,"*"))}},T="__reactIdleCallback$"+Math.random().toString(36).slice(2);window.addEventListener("message",function(e){if(e.source===window&&e.data===T&&(h=!1,null!==f)){if(null!==f){var n=t.unstable_now();if(!(-1===p||p>n)){e=-1;for(var r=[],o=f;null!==o;){var a=o.timeoutTime;-1!==a&&a<=n?r.push(o):-1!==a&&(-1===e||a<e)&&(e=a),o=o.next}if(0<r.length)for(_.didTimeout=!0,n=0,o=r.length;n<o;n++)C(r[n],_);p=e}}for(e=t.unstable_now();0<w-e&&null!==f;)e=f,_.didTimeout=!1,C(e,_),e=t.unstable_now();null===f||g||(g=!0,y(O))}},!1);var O=function(e){g=!1;var t=e-w+E;t<E&&b<E?(8>t&&(t=8),E=t<b?b:t):b=t,w=e+E,h||(h=!0,window.postMessage(T,"*"))};t.unstable_scheduleWork=function(e,n){var r=-1;return null!=n&&"number"==typeof n.timeout&&(r=t.unstable_now()+n.timeout),(-1===p||-1!==r&&r<p)&&(p=r),e={scheduledCallback:e,timeoutTime:r,prev:null,next:null},null===f?f=e:null!==(n=e.prev=d)&&(n.next=e),d=e,g||(g=!0,y(O)),e},t.unstable_cancelScheduledWork=function(e){if(null!==e.prev||f===e){var t=e.next,n=e.prev;e.next=null,e.prev=null,null!==t?null!==n?(n.next=t,t.prev=n):(t.prev=null,f=t):null!==n?(n.next=null,d=n):d=f=null}}}else{var S=new Map;t.unstable_scheduleWork=function(e){var t={scheduledCallback:e,timeoutTime:0,next:null,prev:null},n=a(function(){e({timeRemaining:function(){return 1/0},didTimeout:!1})});return S.set(e,n),t},t.unstable_cancelScheduledWork=function(e){var t=S.get(e.scheduledCallback);S.delete(e),i(t)}}},function(e,t,n){"use strict";var r=this&&this.__extends||function(){var e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])};return function(t,n){function r(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),o=this&&this.__assign||Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e};Object.defineProperty(t,"__esModule",{value:!0});var a=n(1),i=n(2);function s(e,t){if(e.length!==t.length)return!1;for(var n in e)if(e[n]!==t[n])return!1;return!0}var u=function(e){function t(t){var n=e.call(this,t)||this;return n.rootNode=a.createRef(),n}return r(t,e),t.prototype.componentDidMount=function(){this.rootNode.current.focus()},t.prototype.render=function(){var e={onKeyboardDown:this.props.onKeyboardDown,navigationPath:this.props.navigationPath,selectionPath:this.props.selectionPath,value:this.props.value,onExpand:this.props.onExpand,onSelect:this.props.onSelect,tabIndex:this.props.tabIndex,path:[]};return a.createElement("div",{ref:this.rootNode,onKeyDown:this.props.onKeyboardDown,tabIndex:this.props.tabIndex,className:"react-tree"},function e(t){if(0!==t.value.length){var n=t.path,r=t.onExpand,u=t.onSelect,l={borderStyle:"solid",borderColor:"#ccc",borderRadius:"5px",paddingLeft:"5px"};return t.value.map(function(c,f){var d=s(t.selectionPath,t.path.concat([f])),p=s(t.navigationPath,t.path.concat([f])),h={"rct-selected":d,"rct-text":!0,node:!0,selectable:c.selectable};if(c.children.length>0){var g={value:c.children,selectionPath:t.selectionPath,navigationPath:t.navigationPath,onKeyboardDown:t.onKeyboardDown,tabIndex:t.tabIndex,onSelect:u,onExpand:r,path:n.concat([f])};return v=void 0,p&&(v=l),function(t,n){var o={"rt-icon":!0,"rct-icon-expand-open":c.expanded,"rct-icon-expand-close":!c.expanded};return a.createElement("div",null,a.createElement("ol",null,a.createElement("li",{className:"rct-node rct-node-parent"},a.createElement("span",{className:i.default(h),onClick:function(e){e.stopPropagation(),u(n.path)},style:t},a.createElement("span",{className:"rct-collapse rct-collapse-btn"},a.createElement("span",{className:i.default(o),onClick:function(e){e.stopPropagation(),r(n.path)}})),a.createElement("span",{className:"rct-title"},c.name)))),a.createElement("div",{style:{marginLeft:"20px"}},c.expanded&&e(n)))}(v,g)}var v={marginLeft:"9px"};return p&&(v=o({style:v},l)),function(e){return a.createElement("span",{className:i.default(h),onClick:function(e){e.stopPropagation(),u(n.concat([f]))},style:e},c.name)}(v)})}}(e))},t}(a.Component);t.default=u},function(e,t){e.exports=function(e){if(!e.webpackPolyfill){var t=Object.create(e);t.children||(t.children=[]),Object.defineProperty(t,"loaded",{enumerable:!0,get:function(){return t.l}}),Object.defineProperty(t,"id",{enumerable:!0,get:function(){return t.i}}),Object.defineProperty(t,"exports",{enumerable:!0}),t.webpackPolyfill=1}return t}},function(e,t,n){"use strict";t.__esModule=!0;var r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},o=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},a=f(n(59)),i=f(n(25)),s=n(108),u=n(60),l=f(n(111)),c=n(112);function f(e){return e&&e.__esModule?e:{default:e}}var d=function(){try{return window.history.state||{}}catch(e){return{}}};t.default=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};(0,i.default)(c.canUseDOM,"Browser history needs a DOM");var t=window.history,n=(0,c.supportsHistory)(),f=!(0,c.supportsPopStateOnHashChange)(),p=e.forceRefresh,h=void 0!==p&&p,g=e.getUserConfirmation,v=void 0===g?c.getConfirmation:g,m=e.keyLength,y=void 0===m?6:m,w=e.basename?(0,u.stripTrailingSlash)((0,u.addLeadingSlash)(e.basename)):"",b=function(e){var t=e||{},n=t.key,r=t.state,o=window.location,i=o.pathname+o.search+o.hash;return(0,a.default)(!w||(0,u.hasBasename)(i,w),'You are attempting to use a basename on a page whose URL path does not begin with the basename. Expected path "'+i+'" to begin with "'+w+'".'),w&&(i=(0,u.stripBasename)(i,w)),(0,s.createLocation)(i,r,n)},E=function(){return Math.random().toString(36).substr(2,y)},_=(0,l.default)(),C=function(e){o(B,e),B.length=t.length,_.notifyListeners(B.location,B.action)},T=function(e){(0,c.isExtraneousPopstateEvent)(e)||N(b(e.state))},O=function(){N(b(d()))},S=!1,N=function(e){S?(S=!1,C()):_.confirmTransitionTo(e,"POP",v,function(t){t?C({action:"POP",location:e}):A(e)})},A=function(e){var t=B.location,n=I.indexOf(t.key);-1===n&&(n=0);var r=I.indexOf(e.key);-1===r&&(r=0);var o=n-r;o&&(S=!0,k(o))},P=b(d()),I=[P.key],M=function(e){return w+(0,u.createPath)(e)},k=function(e){t.go(e)},x=0,R=function(e){1===(x+=e)?((0,c.addEventListener)(window,"popstate",T),f&&(0,c.addEventListener)(window,"hashchange",O)):0===x&&((0,c.removeEventListener)(window,"popstate",T),f&&(0,c.removeEventListener)(window,"hashchange",O))},D=!1,B={length:t.length,action:"POP",location:P,createHref:M,push:function(e,o){(0,a.default)(!("object"===(void 0===e?"undefined":r(e))&&void 0!==e.state&&void 0!==o),"You should avoid providing a 2nd state argument to push when the 1st argument is a location-like object that already has state; it is ignored");var i=(0,s.createLocation)(e,o,E(),B.location);_.confirmTransitionTo(i,"PUSH",v,function(e){if(e){var r=M(i),o=i.key,s=i.state;if(n)if(t.pushState({key:o,state:s},null,r),h)window.location.href=r;else{var u=I.indexOf(B.location.key),l=I.slice(0,-1===u?0:u+1);l.push(i.key),I=l,C({action:"PUSH",location:i})}else(0,a.default)(void 0===s,"Browser history cannot push state in browsers that do not support HTML5 history"),window.location.href=r}})},replace:function(e,o){(0,a.default)(!("object"===(void 0===e?"undefined":r(e))&&void 0!==e.state&&void 0!==o),"You should avoid providing a 2nd state argument to replace when the 1st argument is a location-like object that already has state; it is ignored");var i=(0,s.createLocation)(e,o,E(),B.location);_.confirmTransitionTo(i,"REPLACE",v,function(e){if(e){var r=M(i),o=i.key,s=i.state;if(n)if(t.replaceState({key:o,state:s},null,r),h)window.location.replace(r);else{var u=I.indexOf(B.location.key);-1!==u&&(I[u]=i.key),C({action:"REPLACE",location:i})}else(0,a.default)(void 0===s,"Browser history cannot replace state in browsers that do not support HTML5 history"),window.location.replace(r)}})},go:k,goBack:function(){return k(-1)},goForward:function(){return k(1)},block:function(){var e=arguments.length>0&&void 0!==arguments[0]&&arguments[0],t=_.setPrompt(e);return D||(R(1),D=!0),function(){return D&&(D=!1,R(-1)),t()}},listen:function(e){var t=_.appendListener(e);return R(1),function(){R(-1),t()}}};return B}},function(e,t,n){"use strict";t.__esModule=!0,t.locationsAreEqual=t.createLocation=void 0;var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},o=s(n(109)),a=s(n(110)),i=n(60);function s(e){return e&&e.__esModule?e:{default:e}}t.createLocation=function(e,t,n,a){var s=void 0;"string"==typeof e?(s=(0,i.parsePath)(e)).state=t:(void 0===(s=r({},e)).pathname&&(s.pathname=""),s.search?"?"!==s.search.charAt(0)&&(s.search="?"+s.search):s.search="",s.hash?"#"!==s.hash.charAt(0)&&(s.hash="#"+s.hash):s.hash="",void 0!==t&&void 0===s.state&&(s.state=t));try{s.pathname=decodeURI(s.pathname)}catch(e){throw e instanceof URIError?new URIError('Pathname "'+s.pathname+'" could not be decoded. This is likely caused by an invalid percent-encoding.'):e}return n&&(s.key=n),a?s.pathname?"/"!==s.pathname.charAt(0)&&(s.pathname=(0,o.default)(s.pathname,a.pathname)):s.pathname=a.pathname:s.pathname||(s.pathname="/"),s},t.locationsAreEqual=function(e,t){return e.pathname===t.pathname&&e.search===t.search&&e.hash===t.hash&&e.key===t.key&&(0,a.default)(e.state,t.state)}},function(e,t,n){"use strict";function r(e){return"/"===e.charAt(0)}function o(e,t){for(var n=t,r=n+1,o=e.length;r<o;n+=1,r+=1)e[n]=e[r];e.pop()}n.r(t),t.default=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"",n=e&&e.split("/")||[],a=t&&t.split("/")||[],i=e&&r(e),s=t&&r(t),u=i||s;if(e&&r(e)?a=n:n.length&&(a.pop(),a=a.concat(n)),!a.length)return"/";var l=void 0;if(a.length){var c=a[a.length-1];l="."===c||".."===c||""===c}else l=!1;for(var f=0,d=a.length;d>=0;d--){var p=a[d];"."===p?o(a,d):".."===p?(o(a,d),f++):f&&(o(a,d),f--)}if(!u)for(;f--;f)a.unshift("..");!u||""===a[0]||a[0]&&r(a[0])||a.unshift("");var h=a.join("/");return l&&"/"!==h.substr(-1)&&(h+="/"),h}},function(e,t,n){"use strict";n.r(t);var r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};t.default=function e(t,n){if(t===n)return!0;if(null==t||null==n)return!1;if(Array.isArray(t))return Array.isArray(n)&&t.length===n.length&&t.every(function(t,r){return e(t,n[r])});var o=void 0===t?"undefined":r(t);if(o!==(void 0===n?"undefined":r(n)))return!1;if("object"===o){var a=t.valueOf(),i=n.valueOf();if(a!==t||i!==n)return e(a,i);var s=Object.keys(t),u=Object.keys(n);return s.length===u.length&&s.every(function(r){return e(t[r],n[r])})}return!1}},function(e,t,n){"use strict";t.__esModule=!0;var r=function(e){return e&&e.__esModule?e:{default:e}}(n(59));t.default=function(){var e=null,t=[];return{setPrompt:function(t){return(0,r.default)(null==e,"A history supports only one prompt at a time"),e=t,function(){e===t&&(e=null)}},confirmTransitionTo:function(t,n,o,a){if(null!=e){var i="function"==typeof e?e(t,n):e;"string"==typeof i?"function"==typeof o?o(i,a):((0,r.default)(!1,"A history needs a getUserConfirmation function in order to use a prompt message"),a(!0)):a(!1!==i)}else a(!0)},appendListener:function(e){var n=!0,r=function(){n&&e.apply(void 0,arguments)};return t.push(r),function(){n=!1,t=t.filter(function(e){return e!==r})}},notifyListeners:function(){for(var e=arguments.length,n=Array(e),r=0;r<e;r++)n[r]=arguments[r];t.forEach(function(e){return e.apply(void 0,n)})}}}},function(e,t,n){"use strict";t.__esModule=!0;t.canUseDOM=!("undefined"==typeof window||!window.document||!window.document.createElement),t.addEventListener=function(e,t,n){return e.addEventListener?e.addEventListener(t,n,!1):e.attachEvent("on"+t,n)},t.removeEventListener=function(e,t,n){return e.removeEventListener?e.removeEventListener(t,n,!1):e.detachEvent("on"+t,n)},t.getConfirmation=function(e,t){return t(window.confirm(e))},t.supportsHistory=function(){var e=window.navigator.userAgent;return(-1===e.indexOf("Android 2.")&&-1===e.indexOf("Android 4.0")||-1===e.indexOf("Mobile Safari")||-1!==e.indexOf("Chrome")||-1!==e.indexOf("Windows Phone"))&&(window.history&&"pushState"in window.history)},t.supportsPopStateOnHashChange=function(){return-1===window.navigator.userAgent.indexOf("Trident")},t.supportsGoWithoutReloadUsingHash=function(){return-1===window.navigator.userAgent.indexOf("Firefox")},t.isExtraneousPopstateEvent=function(e){return void 0===e.state&&-1===navigator.userAgent.indexOf("CriOS")}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},o=u(n(1)),a=u(n(0)),i=u(n(2)),s=n(114);function u(e){return e&&e.__esModule?e:{default:e}}var l={tag:a.default.oneOfType([a.default.func,a.default.string]),inverse:a.default.bool,color:a.default.string,block:(0,s.deprecated)(a.default.bool,'Please use the props "body"'),body:a.default.bool,outline:a.default.bool,className:a.default.string,cssModule:a.default.object,innerRef:a.default.oneOfType([a.default.object,a.default.string,a.default.func])},c=function(e){var t=e.className,n=e.cssModule,a=e.color,u=e.block,l=e.body,c=e.inverse,f=e.outline,d=e.tag,p=e.innerRef,h=function(e,t){var n={};for(var r in e)t.indexOf(r)>=0||Object.prototype.hasOwnProperty.call(e,r)&&(n[r]=e[r]);return n}(e,["className","cssModule","color","block","body","inverse","outline","tag","innerRef"]),g=(0,s.mapToCssModules)((0,i.default)(t,"card",!!c&&"text-white",!(!u&&!l)&&"card-body",!!a&&(f?"border":"bg")+"-"+a),n);return o.default.createElement(d,r({},h,{className:g,ref:p}))};c.propTypes=l,c.defaultProps={tag:"div"},t.default=c},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.focusableElements=t.defaultToggleEvents=t.canUseDOM=t.PopperPlacements=t.keyCodes=t.TransitionStatuses=t.TransitionPropTypeKeys=t.TransitionTimeouts=void 0,t.getScrollbarWidth=o,t.setScrollbarWidth=a,t.isBodyOverflowing=i,t.getOriginalBodyPadding=function(){var e=window.getComputedStyle(document.body,null);return parseInt(e&&e.getPropertyValue("padding-right")||0,10)},t.conditionallyUpdateScrollbar=function(){var e=o(),t=document.querySelectorAll(".fixed-top, .fixed-bottom, .is-fixed, .sticky-top")[0],n=t?parseInt(t.style.paddingRight||0,10):0;i()&&a(n+e)},t.setGlobalCssModule=function(e){s=e},t.mapToCssModules=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"",t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:s;return t?e.split(" ").map(function(e){return t[e]||e}).join(" "):e},t.omit=function(e,t){var n={};return Object.keys(e).forEach(function(r){-1===t.indexOf(r)&&(n[r]=e[r])}),n},t.pick=function(e,t){var n=Array.isArray(t)?t:[t],r=n.length,o=void 0,a={};for(;r>0;)o=n[r-=1],a[o]=e[o];return a},t.warnOnce=l,t.deprecated=function(e,t){return function(n,r,o){null!==n[r]&&void 0!==n[r]&&l('"'+r+'" property of "'+o+'" has been deprecated.\n'+t);for(var a=arguments.length,i=Array(a>3?a-3:0),s=3;s<a;s++)i[s-3]=arguments[s];return e.apply(void 0,[n,r,o].concat(i))}},t.DOMElement=function(e,t,n){if(!(e[t]instanceof Element))return new Error("Invalid prop `"+t+"` supplied to `"+n+"`. Expected prop to be an instance of Element. Validation failed.")},t.findDOMElements=f,t.isArrayOrNodeList=d,t.getTarget=function(e){var t=f(e);if(d(t))return t[0];return t},t.addMultipleEventListeners=function(e,t,n){var r=e;d(r)||(r=[r]);var o=n;"string"==typeof o&&(o=o.split(/\s+/));if(!d(r)||"function"!=typeof t||!Array.isArray(o))throw new Error("\n      The first argument of this function must be DOM node or an array on DOM nodes or NodeList.\n      The second must be a function.\n      The third is a string or an array of strings that represents DOM events\n    ");return o.forEach(function(e){r.forEach(function(n){n.addEventListener(e,t)})}),function(){o.forEach(function(e){r.forEach(function(n){n.removeEventListener(e,t)})})}};var r=function(e){return e&&e.__esModule?e:{default:e}}(n(51));function o(){var e=document.createElement("div");e.style.position="absolute",e.style.top="-9999px",e.style.width="50px",e.style.height="50px",e.style.overflow="scroll",document.body.appendChild(e);var t=e.offsetWidth-e.clientWidth;return document.body.removeChild(e),t}function a(e){document.body.style.paddingRight=e>0?e+"px":null}function i(){return document.body.clientWidth<window.innerWidth}var s=void 0;var u={};function l(e){u[e]||("undefined"!=typeof console&&console.error(e),u[e]=!0)}t.TransitionTimeouts={Fade:150,Collapse:350,Modal:300,Carousel:600},t.TransitionPropTypeKeys=["in","mountOnEnter","unmountOnExit","appear","enter","exit","timeout","onEnter","onEntering","onEntered","onExit","onExiting","onExited"],t.TransitionStatuses={ENTERING:"entering",ENTERED:"entered",EXITING:"exiting",EXITED:"exited"},t.keyCodes={esc:27,space:32,tab:9,up:38,down:40},t.PopperPlacements=["auto-start","auto","auto-end","top-start","top","top-end","right-start","right","right-end","bottom-end","bottom","bottom-start","left-end","left","left-start"];var c=t.canUseDOM=!("undefined"==typeof window||!window.document||!window.document.createElement);function f(e){if((0,r.default)(e))return e();if("string"==typeof e&&c){var t=document.querySelectorAll(e);if(t.length||(t=document.querySelectorAll("#"+e)),!t.length)throw new Error("The target '"+e+"' could not be identified in the dom, tip: check spelling");return t}return e}function d(e){return Array.isArray(e)||c&&"number"==typeof e.length}t.defaultToggleEvents=["touchstart","click"];t.focusableElements=["a[href]","area[href]","input:not([disabled]):not([type=hidden])","select:not([disabled])","textarea:not([disabled])","button:not([disabled])","object","embed","[tabindex]:not(.modal)","audio[controls]","video[controls]",'[contenteditable]:not([contenteditable="false"])']},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(91),o=n(1),a=n(90),i=n(58);t.default=a.connect(function(e){return void 0===e.form.projects?{isLoading:!0,isEmptyName:null,name:null,isInvalidName:null}:{isLoading:!1,isEmptyName:0===e.form.projects.value.length,name:e.form.projects.value,isInvalidName:e.form.projects.value.lenght>3}},function(e){return{nameChange:function(t){e({type:i.Type[i.Type.TYPE_DATA],content:t.target.value,component:"projects"})}}})(function(e){return e.isLoading?o.createElement("div",null,"is loading..."):function(e){return o.createElement(r.Form,{onSubmit:function(e){console.log("prevent",e),e.preventDefault()}},o.createElement(r.FormGroup,{controlId:"projectName",validationState:e.isInvalidName},o.createElement(r.Label,null,"Add project name"),!e.isInvalidName&&o.createElement(r.FormText,null,"Example help text that remains empty."),o.createElement(r.Input,{invalid:e.isInvalidName,placeholder:"nice placeholder",onChange:e.nameChange,value:e.name}),o.createElement(r.FormFeedback,null,"that's right it's not valid")))}(e)})},function(e,t,n){"use strict";function r(e){return function(t){var n=t.dispatch,r=t.getState;return function(t){return function(o){return"function"==typeof o?o(n,r,e):t(o)}}}}n.r(t);var o=r();o.withExtraArgument=r,t.default=o},function(e,t,n){e.exports=n(118)},function(e,t,n){"use strict";var r=n(8),o=n(61),a=n(120),i=n(33);function s(e){var t=new a(e),n=o(a.prototype.request,t);return r.extend(n,a.prototype,t),r.extend(n,t),n}var u=s(i);u.Axios=a,u.create=function(e){return s(r.merge(i,e))},u.Cancel=n(65),u.CancelToken=n(135),u.isCancel=n(64),u.all=function(e){return Promise.all(e)},u.spread=n(136),e.exports=u,e.exports.default=u},function(e,t){function n(e){return!!e.constructor&&"function"==typeof e.constructor.isBuffer&&e.constructor.isBuffer(e)}
/*!
 * Determine if an object is a Buffer
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */
e.exports=function(e){return null!=e&&(n(e)||function(e){return"function"==typeof e.readFloatLE&&"function"==typeof e.slice&&n(e.slice(0,0))}(e)||!!e._isBuffer)}},function(e,t,n){"use strict";var r=n(33),o=n(8),a=n(130),i=n(131);function s(e){this.defaults=e,this.interceptors={request:new a,response:new a}}s.prototype.request=function(e){"string"==typeof e&&(e=o.merge({url:arguments[0]},arguments[1])),(e=o.merge(r,{method:"get"},this.defaults,e)).method=e.method.toLowerCase();var t=[i,void 0],n=Promise.resolve(e);for(this.interceptors.request.forEach(function(e){t.unshift(e.fulfilled,e.rejected)}),this.interceptors.response.forEach(function(e){t.push(e.fulfilled,e.rejected)});t.length;)n=n.then(t.shift(),t.shift());return n},o.forEach(["delete","get","head","options"],function(e){s.prototype[e]=function(t,n){return this.request(o.merge(n||{},{method:e,url:t}))}}),o.forEach(["post","put","patch"],function(e){s.prototype[e]=function(t,n,r){return this.request(o.merge(r||{},{method:e,url:t,data:n}))}}),e.exports=s},function(e,t){var n,r,o=e.exports={};function a(){throw new Error("setTimeout has not been defined")}function i(){throw new Error("clearTimeout has not been defined")}function s(e){if(n===setTimeout)return setTimeout(e,0);if((n===a||!n)&&setTimeout)return n=setTimeout,setTimeout(e,0);try{return n(e,0)}catch(t){try{return n.call(null,e,0)}catch(t){return n.call(this,e,0)}}}!function(){try{n="function"==typeof setTimeout?setTimeout:a}catch(e){n=a}try{r="function"==typeof clearTimeout?clearTimeout:i}catch(e){r=i}}();var u,l=[],c=!1,f=-1;function d(){c&&u&&(c=!1,u.length?l=u.concat(l):f=-1,l.length&&p())}function p(){if(!c){var e=s(d);c=!0;for(var t=l.length;t;){for(u=l,l=[];++f<t;)u&&u[f].run();f=-1,t=l.length}u=null,c=!1,function(e){if(r===clearTimeout)return clearTimeout(e);if((r===i||!r)&&clearTimeout)return r=clearTimeout,clearTimeout(e);try{r(e)}catch(t){try{return r.call(null,e)}catch(t){return r.call(this,e)}}}(e)}}function h(e,t){this.fun=e,this.array=t}function g(){}o.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)t[n-1]=arguments[n];l.push(new h(e,t)),1!==l.length||c||s(p)},h.prototype.run=function(){this.fun.apply(null,this.array)},o.title="browser",o.browser=!0,o.env={},o.argv=[],o.version="",o.versions={},o.on=g,o.addListener=g,o.once=g,o.off=g,o.removeListener=g,o.removeAllListeners=g,o.emit=g,o.prependListener=g,o.prependOnceListener=g,o.listeners=function(e){return[]},o.binding=function(e){throw new Error("process.binding is not supported")},o.cwd=function(){return"/"},o.chdir=function(e){throw new Error("process.chdir is not supported")},o.umask=function(){return 0}},function(e,t,n){"use strict";var r=n(8);e.exports=function(e,t){r.forEach(e,function(n,r){r!==t&&r.toUpperCase()===t.toUpperCase()&&(e[t]=n,delete e[r])})}},function(e,t,n){"use strict";var r=n(63);e.exports=function(e,t,n){var o=n.config.validateStatus;n.status&&o&&!o(n.status)?t(r("Request failed with status code "+n.status,n.config,null,n.request,n)):e(n)}},function(e,t,n){"use strict";e.exports=function(e,t,n,r,o){return e.config=t,n&&(e.code=n),e.request=r,e.response=o,e}},function(e,t,n){"use strict";var r=n(8);function o(e){return encodeURIComponent(e).replace(/%40/gi,"@").replace(/%3A/gi,":").replace(/%24/g,"$").replace(/%2C/gi,",").replace(/%20/g,"+").replace(/%5B/gi,"[").replace(/%5D/gi,"]")}e.exports=function(e,t,n){if(!t)return e;var a;if(n)a=n(t);else if(r.isURLSearchParams(t))a=t.toString();else{var i=[];r.forEach(t,function(e,t){null!==e&&void 0!==e&&(r.isArray(e)?t+="[]":e=[e],r.forEach(e,function(e){r.isDate(e)?e=e.toISOString():r.isObject(e)&&(e=JSON.stringify(e)),i.push(o(t)+"="+o(e))}))}),a=i.join("&")}return a&&(e+=(-1===e.indexOf("?")?"?":"&")+a),e}},function(e,t,n){"use strict";var r=n(8),o=["age","authorization","content-length","content-type","etag","expires","from","host","if-modified-since","if-unmodified-since","last-modified","location","max-forwards","proxy-authorization","referer","retry-after","user-agent"];e.exports=function(e){var t,n,a,i={};return e?(r.forEach(e.split("\n"),function(e){if(a=e.indexOf(":"),t=r.trim(e.substr(0,a)).toLowerCase(),n=r.trim(e.substr(a+1)),t){if(i[t]&&o.indexOf(t)>=0)return;i[t]="set-cookie"===t?(i[t]?i[t]:[]).concat([n]):i[t]?i[t]+", "+n:n}}),i):i}},function(e,t,n){"use strict";var r=n(8);e.exports=r.isStandardBrowserEnv()?function(){var e,t=/(msie|trident)/i.test(navigator.userAgent),n=document.createElement("a");function o(e){var r=e;return t&&(n.setAttribute("href",r),r=n.href),n.setAttribute("href",r),{href:n.href,protocol:n.protocol?n.protocol.replace(/:$/,""):"",host:n.host,search:n.search?n.search.replace(/^\?/,""):"",hash:n.hash?n.hash.replace(/^#/,""):"",hostname:n.hostname,port:n.port,pathname:"/"===n.pathname.charAt(0)?n.pathname:"/"+n.pathname}}return e=o(window.location.href),function(t){var n=r.isString(t)?o(t):t;return n.protocol===e.protocol&&n.host===e.host}}():function(){return!0}},function(e,t,n){"use strict";var r="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";function o(){this.message="String contains an invalid character"}o.prototype=new Error,o.prototype.code=5,o.prototype.name="InvalidCharacterError",e.exports=function(e){for(var t,n,a=String(e),i="",s=0,u=r;a.charAt(0|s)||(u="=",s%1);i+=u.charAt(63&t>>8-s%1*8)){if((n=a.charCodeAt(s+=.75))>255)throw new o;t=t<<8|n}return i}},function(e,t,n){"use strict";var r=n(8);e.exports=r.isStandardBrowserEnv()?{write:function(e,t,n,o,a,i){var s=[];s.push(e+"="+encodeURIComponent(t)),r.isNumber(n)&&s.push("expires="+new Date(n).toGMTString()),r.isString(o)&&s.push("path="+o),r.isString(a)&&s.push("domain="+a),!0===i&&s.push("secure"),document.cookie=s.join("; ")},read:function(e){var t=document.cookie.match(new RegExp("(^|;\\s*)("+e+")=([^;]*)"));return t?decodeURIComponent(t[3]):null},remove:function(e){this.write(e,"",Date.now()-864e5)}}:{write:function(){},read:function(){return null},remove:function(){}}},function(e,t,n){"use strict";var r=n(8);function o(){this.handlers=[]}o.prototype.use=function(e,t){return this.handlers.push({fulfilled:e,rejected:t}),this.handlers.length-1},o.prototype.eject=function(e){this.handlers[e]&&(this.handlers[e]=null)},o.prototype.forEach=function(e){r.forEach(this.handlers,function(t){null!==t&&e(t)})},e.exports=o},function(e,t,n){"use strict";var r=n(8),o=n(132),a=n(64),i=n(33),s=n(133),u=n(134);function l(e){e.cancelToken&&e.cancelToken.throwIfRequested()}e.exports=function(e){return l(e),e.baseURL&&!s(e.url)&&(e.url=u(e.baseURL,e.url)),e.headers=e.headers||{},e.data=o(e.data,e.headers,e.transformRequest),e.headers=r.merge(e.headers.common||{},e.headers[e.method]||{},e.headers||{}),r.forEach(["delete","get","head","post","put","patch","common"],function(t){delete e.headers[t]}),(e.adapter||i.adapter)(e).then(function(t){return l(e),t.data=o(t.data,t.headers,e.transformResponse),t},function(t){return a(t)||(l(e),t&&t.response&&(t.response.data=o(t.response.data,t.response.headers,e.transformResponse))),Promise.reject(t)})}},function(e,t,n){"use strict";var r=n(8);e.exports=function(e,t,n){return r.forEach(n,function(n){e=n(e,t)}),e}},function(e,t,n){"use strict";e.exports=function(e){return/^([a-z][a-z\d\+\-\.]*:)?\/\//i.test(e)}},function(e,t,n){"use strict";e.exports=function(e,t){return t?e.replace(/\/+$/,"")+"/"+t.replace(/^\/+/,""):e}},function(e,t,n){"use strict";var r=n(65);function o(e){if("function"!=typeof e)throw new TypeError("executor must be a function.");var t;this.promise=new Promise(function(e){t=e});var n=this;e(function(e){n.reason||(n.reason=new r(e),t(n.reason))})}o.prototype.throwIfRequested=function(){if(this.reason)throw this.reason},o.source=function(){var e;return{token:new o(function(t){e=t}),cancel:e}},e.exports=o},function(e,t,n){"use strict";e.exports=function(e){return function(t){return e.apply(null,t)}}},function(e,t,n){"use strict";var r=this&&this.__extends||function(){var e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])};return function(t,n){function r(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}();Object.defineProperty(t,"__esModule",{value:!0});var o=n(27),a=n(37),i=function(e){function t(t){return void 0===t&&(t=500),e.call(this,new a.default,t)||this}return r(t,e),t}(o.BrowserCodeReader);t.BrowserQRCodeReader=i},function(e,t,n){!function(e){
/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */
var t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])};function n(e,t){void 0===t&&(t=e.constructor);var n=Error.captureStackTrace;n&&n(e,t)}var r=function(e){function r(t){var r=this.constructor,o=e.call(this,t)||this;return o.name=r.name,function(e,t){var n=Object.setPrototypeOf;n?n(e,t):e.__proto__=t}(o,r.prototype),n(o),o}return function(e,n){function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}(r,e),r}(Error);e.CustomError=r,e.customErrorFactory=function(e,t){function r(){for(var o=[],a=0;a<arguments.length;a++)o[a]=arguments[a];if(!(this instanceof r))return new(r.bind.apply(r,[void 0].concat(o)));t.apply(this,o),e.apply(this,o),this.name=e.name||t.name,n(this,r)}return void 0===t&&(t=Error),Object.defineProperties(r,{prototype:{value:Object.create(t.prototype,{constructor:{value:r,writable:!0,configurable:!0}})}})}}(t)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(){}return e.floatToIntBits=function(e){return e},e}();t.default=r},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(11),o=n(19),a=n(38),i=n(141),s=n(76),u=n(145),l=n(146),c=n(14),f=function(){function e(){this.rsDecoder=new a.default(o.default.QR_CODE_FIELD_256)}return e.prototype.decodeBooleanArray=function(e,t){return this.decodeBitMatrix(r.default.parseFromBooleanArray(e),t)},e.prototype.decodeBitMatrix=function(e,t){var n=new i.default(e),r=null;try{return this.decodeBitMatrixParser(n,t)}catch(e){r=e}try{n.remask(),n.setMirror(!0),n.readVersion(),n.readFormatInformation(),n.mirror();var o=this.decodeBitMatrixParser(n,t);return o.setOther(new s.default(!0)),o}catch(e){if(null!==r)throw r;throw e}},e.prototype.decodeBitMatrixParser=function(e,t){for(var n=e.readVersion(),r=e.readFormatInformation().getErrorCorrectionLevel(),o=e.readCodewords(),a=u.default.getDataBlocks(o,n,r),i=0,s=0,c=a;s<c.length;s++){i+=(g=c[s]).getNumDataCodewords()}for(var f=new Uint8Array(i),d=0,p=0,h=a;p<h.length;p++){var g,v=(g=h[p]).getCodewords(),m=g.getNumDataCodewords();this.correctErrors(v,m);for(var y=0;y<m;y++)f[d++]=v[y]}return l.default.decode(f,n,r,t)},e.prototype.correctErrors=function(e,t){e.length;var n=new Int32Array(e);try{this.rsDecoder.decode(n,e.length-t)}catch(e){throw new c.default}for(var r=0;r<t;r++)e[r]=n[r]},e}();t.default=f},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(39),o=n(75),a=n(144),i=n(7),s=function(){function e(e){var t=e.getHeight();if(t<21||1!=(3&t))throw new i.default;this.bitMatrix=e}return e.prototype.readFormatInformation=function(){if(null!==this.parsedFormatInfo&&void 0!==this.parsedFormatInfo)return this.parsedFormatInfo;for(var e=0,t=0;t<6;t++)e=this.copyBit(t,8,e);e=this.copyBit(7,8,e),e=this.copyBit(8,8,e),e=this.copyBit(8,7,e);for(var n=5;n>=0;n--)e=this.copyBit(8,n,e);var r=this.bitMatrix.getHeight(),a=0,s=r-7;for(n=r-1;n>=s;n--)a=this.copyBit(8,n,a);for(t=r-8;t<r;t++)a=this.copyBit(t,8,a);if(this.parsedFormatInfo=o.default.decodeFormatInformation(e,a),null!==this.parsedFormatInfo)return this.parsedFormatInfo;throw new i.default},e.prototype.readVersion=function(){if(null!==this.parsedVersion&&void 0!==this.parsedVersion)return this.parsedVersion;var e=this.bitMatrix.getHeight(),t=Math.floor((e-17)/4);if(t<=6)return r.default.getVersionForNumber(t);for(var n=0,o=e-11,a=5;a>=0;a--)for(var s=e-9;s>=o;s--)n=this.copyBit(s,a,n);var u=r.default.decodeVersionInformation(n);if(null!==u&&u.getDimensionForVersion()===e)return this.parsedVersion=u,u;n=0;for(s=5;s>=0;s--)for(a=e-9;a>=o;a--)n=this.copyBit(s,a,n);if(null!==(u=r.default.decodeVersionInformation(n))&&u.getDimensionForVersion()===e)return this.parsedVersion=u,u;throw new i.default},e.prototype.copyBit=function(e,t,n){return(this.isMirror?this.bitMatrix.get(t,e):this.bitMatrix.get(e,t))?n<<1|1:n<<1},e.prototype.readCodewords=function(){var e=this.readFormatInformation(),t=this.readVersion(),n=a.default.values.get(e.getDataMask()),r=this.bitMatrix.getHeight();n.unmaskBitMatrix(this.bitMatrix,r);for(var o=t.buildFunctionPattern(),s=!0,u=new Uint8Array(t.getTotalCodewords()),l=0,c=0,f=0,d=r-1;d>0;d-=2){6===d&&d--;for(var p=0;p<r;p++)for(var h=s?r-1-p:p,g=0;g<2;g++)o.get(d-g,h)||(f++,c<<=1,this.bitMatrix.get(d-g,h)&&(c|=1),8===f&&(u[l++]=c,f=0,c=0));s=!s}if(l!==t.getTotalCodewords())throw new i.default;return u},e.prototype.remask=function(){if(null!==this.parsedFormatInfo){var e=a.default.values[this.parsedFormatInfo.getDataMask()],t=this.bitMatrix.getHeight();e.unmaskBitMatrix(this.bitMatrix,t)}},e.prototype.setMirror=function(e){this.parsedVersion=null,this.parsedFormatInfo=null,this.isMirror=e},e.prototype.mirror=function(){for(var e=this.bitMatrix,t=0,n=e.getWidth();t<n;t++)for(var r=t+1,o=e.getHeight();r<o;r++)e.get(t,r)!==e.get(r,t)&&(e.flip(r,t),e.flip(t,r))},e}();t.default=s},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e){for(var t=[],n=1;n<arguments.length;n++)t[n-1]=arguments[n];this.ecCodewordsPerBlock=e,this.ecBlocks=t}return e.prototype.getECCodewordsPerBlock=function(){return this.ecCodewordsPerBlock},e.prototype.getNumBlocks=function(){for(var e=0,t=0,n=this.ecBlocks;t<n.length;t++){e+=n[t].getCount()}return e},e.prototype.getTotalECCodewords=function(){return this.ecCodewordsPerBlock*this.getNumBlocks()},e.prototype.getECBlocks=function(){return this.ecBlocks},e}();t.default=r},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){this.count=e,this.dataCodewords=t}return e.prototype.getCount=function(){return this.count},e.prototype.getDataCodewords=function(){return this.dataCodewords},e}();t.default=r},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),function(e){e[e.DATA_MASK_000=0]="DATA_MASK_000",e[e.DATA_MASK_001=1]="DATA_MASK_001",e[e.DATA_MASK_010=2]="DATA_MASK_010",e[e.DATA_MASK_011=3]="DATA_MASK_011",e[e.DATA_MASK_100=4]="DATA_MASK_100",e[e.DATA_MASK_101=5]="DATA_MASK_101",e[e.DATA_MASK_110=6]="DATA_MASK_110",e[e.DATA_MASK_111=7]="DATA_MASK_111"}(t.DataMaskValues||(t.DataMaskValues={}));var r=function(){function e(e,t){this.value=e,this.isMasked=t}return e.prototype.unmaskBitMatrix=function(e,t){for(var n=0;n<t;n++)for(var r=0;r<t;r++)this.isMasked(n,r)&&e.flip(r,n)},e.values=new Map([[0,new e(0,function(e,t){return 0==(e+t&1)})],[1,new e(1,function(e,t){return 0==(1&e)})],[2,new e(2,function(e,t){return t%3==0})],[3,new e(3,function(e,t){return(e+t)%3==0})],[4,new e(4,function(e,t){return 0==(Math.floor(e/2)+Math.floor(t/3)&1)})],[5,new e(5,function(e,t){return e*t%6==0})],[6,new e(6,function(e,t){return e*t%6<3})],[7,new e(7,function(e,t){return 0==(e+t+e*t%3&1)})]]),e}();t.default=r},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(4),o=function(){function e(e,t){this.numDataCodewords=e,this.codewords=t}return e.getDataBlocks=function(t,n,o){if(t.length!==n.getTotalCodewords())throw new r.default;for(var a=n.getECBlocksForLevel(o),i=0,s=a.getECBlocks(),u=0,l=s;u<l.length;u++){i+=(h=l[u]).getCount()}for(var c=new Array(i),f=0,d=0,p=s;d<p.length;d++)for(var h=p[d],g=0;g<h.getCount();g++){var v=h.getDataCodewords(),m=a.getECCodewordsPerBlock()+v;c[f++]=new e(v,new Uint8Array(m))}for(var y=c[0].codewords.length,w=c.length-1;w>=0;){if(c[w].codewords.length===y)break;w--}w++;var b=y-a.getECCodewordsPerBlock(),E=0;for(g=0;g<b;g++)for(var _=0;_<f;_++)c[_].codewords[g]=t[E++];for(_=w;_<f;_++)c[_].codewords[b]=t[E++];var C=c[0].codewords.length;for(g=b;g<C;g++)for(_=0;_<f;_++){var T=_<w?g:g+1;c[_].codewords[T]=t[E++]}return c},e.prototype.getNumDataCodewords=function(){return this.numDataCodewords},e.prototype.getCodewords=function(){return this.codewords},e}();t.default=o},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(40),o=n(24),a=n(41),i=n(77),s=n(78),u=n(13),l=n(42),c=n(7),f=function(){function e(){}return e.decode=function(t,n,i,l){var f=new r.default(t),d=new u.default,p=new Array,h=-1,g=-1;try{var v=null,m=!1,y=void 0;do{if(f.available()<4)y=s.default.TERMINATOR;else{var w=f.readBits(4);y=s.default.forBits(w)}switch(y){case s.default.TERMINATOR:break;case s.default.FNC1_FIRST_POSITION:case s.default.FNC1_SECOND_POSITION:m=!0;break;case s.default.STRUCTURED_APPEND:if(f.available()<16)throw new c.default;h=f.readBits(8),g=f.readBits(8);break;case s.default.ECI:var b=e.parseECIValue(f);if(null===(v=o.default.getCharacterSetECIByValue(b)))throw new c.default;break;case s.default.HANZI:var E=f.readBits(4),_=f.readBits(y.getCharacterCountBits(n));E===e.GB2312_SUBSET&&e.decodeHanziSegment(f,d,_);break;default:var C=f.readBits(y.getCharacterCountBits(n));switch(y){case s.default.NUMERIC:e.decodeNumericSegment(f,d,C);break;case s.default.ALPHANUMERIC:e.decodeAlphanumericSegment(f,d,C,m);break;case s.default.BYTE:e.decodeByteSegment(f,d,C,v,p,l);break;case s.default.KANJI:e.decodeKanjiSegment(f,d,C);break;default:throw new c.default}}}while(y!==s.default.TERMINATOR)}catch(e){throw new c.default}return new a.default(t,d.toString(),0===p.length?null:p,null===i?null:i.toString(),h,g)},e.decodeHanziSegment=function(e,t,n){if(13*n>e.available())throw new c.default;for(var r=new Uint8Array(2*n),o=0;n>0;){var a=e.readBits(13),s=a/96<<8&4294967295|a%96;s+=s<959?41377:42657,r[o]=s>>8&255,r[o+1]=255&s,o+=2,n--}try{t.append(l.default.decode(r,i.default.GB2312))}catch(e){throw new c.default(e)}},e.decodeKanjiSegment=function(e,t,n){if(13*n>e.available())throw new c.default;for(var r=new Uint8Array(2*n),o=0;n>0;){var a=e.readBits(13),s=a/192<<8&4294967295|a%192;s+=s<7936?33088:49472,r[o]=s>>8,r[o+1]=s,o+=2,n--}try{t.append(l.default.decode(r,i.default.SHIFT_JIS))}catch(e){throw new c.default(e)}},e.decodeByteSegment=function(e,t,n,r,o,a){if(8*n>e.available())throw new c.default;for(var s,u=new Uint8Array(n),f=0;f<n;f++)u[f]=e.readBits(8);s=null===r?i.default.guessEncoding(u,a):r.getName();try{t.append(l.default.decode(u,s))}catch(e){throw new c.default(e)}o.push(u)},e.toAlphaNumericChar=function(t){if(t>=e.ALPHANUMERIC_CHARS.length)throw new c.default;return e.ALPHANUMERIC_CHARS[t]},e.decodeAlphanumericSegment=function(t,n,r,o){for(var a=n.length();r>1;){if(t.available()<11)throw new c.default;var i=t.readBits(11);n.append(e.toAlphaNumericChar(Math.floor(i/45))),n.append(e.toAlphaNumericChar(i%45)),r-=2}if(1===r){if(t.available()<6)throw new c.default;n.append(e.toAlphaNumericChar(t.readBits(6)))}if(o)for(var s=a;s<n.length();s++)"%"===n.charAt(s)&&(s<n.length()-1&&"%"===n.charAt(s+1)?n.deleteCharAt(s+1):n.setCharAt(s,String.fromCharCode(29)))},e.decodeNumericSegment=function(t,n,r){for(;r>=3;){if(t.available()<10)throw new c.default;var o=t.readBits(10);if(o>=1e3)throw new c.default;n.append(e.toAlphaNumericChar(Math.floor(o/100))),n.append(e.toAlphaNumericChar(Math.floor(o/10)%10)),n.append(e.toAlphaNumericChar(o%10)),r-=3}if(2===r){if(t.available()<7)throw new c.default;var a=t.readBits(7);if(a>=100)throw new c.default;n.append(e.toAlphaNumericChar(Math.floor(a/10))),n.append(e.toAlphaNumericChar(a%10))}else if(1===r){if(t.available()<4)throw new c.default;var i=t.readBits(4);if(i>=10)throw new c.default;n.append(e.toAlphaNumericChar(i))}},e.parseECIValue=function(e){var t=e.readBits(8);if(0==(128&t))return 127&t;if(128==(192&t))return(63&t)<<8&4294967295|e.readBits(8);if(192==(224&t))return(31&t)<<16&4294967295|e.readBits(16);throw new c.default},e.ALPHANUMERIC_CHARS="0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ $%*+-./:",e.GB2312_SUBSET=1,e}();t.default=f},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(6),o=n(43),a=n(44),i=n(45),s=n(22),u=n(39),l=n(148),c=n(151),f=n(3),d=function(){function e(e){this.image=e}return e.prototype.getImage=function(){return this.image},e.prototype.getResultPointCallback=function(){return this.resultPointCallback},e.prototype.detect=function(e){this.resultPointCallback=null===e||void 0===e?null:e.get(9);var t=new l.default(this.image,this.resultPointCallback).find(e);return this.processFinderPatternInfo(t)},e.prototype.processFinderPatternInfo=function(t){var n=t.getTopLeft(),r=t.getTopRight(),a=t.getBottomLeft(),i=this.calculateModuleSize(n,r,a);if(i<1)throw new f.default("No pattern found in proccess finder.");var s=e.computeDimension(n,r,a,i),l=u.default.getProvisionalVersionForDimension(s),c=l.getDimensionForVersion()-7,d=null;if(l.getAlignmentPatternCenters().length>0)for(var p=r.getX()-n.getX()+a.getX(),h=r.getY()-n.getY()+a.getY(),g=1-3/c,v=Math.floor(n.getX()+g*(p-n.getX())),m=Math.floor(n.getY()+g*(h-n.getY())),y=4;y<=16;y<<=1)try{d=this.findAlignmentInRegion(i,v,m,y);break}catch(e){if(!(e instanceof f.default))throw e}var w,b=e.createTransform(n,r,a,d,s),E=e.sampleGrid(this.image,b,s);return w=null===d?[a,n,r]:[a,n,r,d],new o.default(E,w)},e.createTransform=function(e,t,n,r,o){var a,s,u,l,c=o-3.5;return null!==r?(a=r.getX(),s=r.getY(),l=u=c-3):(a=t.getX()-e.getX()+n.getX(),s=t.getY()-e.getY()+n.getY(),u=c,l=c),i.default.quadrilateralToQuadrilateral(3.5,3.5,c,3.5,u,l,3.5,c,e.getX(),e.getY(),t.getX(),t.getY(),a,s,n.getX(),n.getY())},e.sampleGrid=function(e,t,n){return a.default.getInstance().sampleGridWithTransform(e,n,n,t)},e.computeDimension=function(e,t,n,o){var a=s.default.round(r.default.distance(e,t)/o),i=s.default.round(r.default.distance(e,n)/o),u=Math.floor((a+i)/2)+7;switch(3&u){case 0:u++;break;case 2:u--;break;case 3:throw new f.default("Dimensions could be not found.")}return u},e.prototype.calculateModuleSize=function(e,t,n){return(this.calculateModuleSizeOneWay(e,t)+this.calculateModuleSizeOneWay(e,n))/2},e.prototype.calculateModuleSizeOneWay=function(e,t){var n=this.sizeOfBlackWhiteBlackRunBothWays(Math.floor(e.getX()),Math.floor(e.getY()),Math.floor(t.getX()),Math.floor(t.getY())),r=this.sizeOfBlackWhiteBlackRunBothWays(Math.floor(t.getX()),Math.floor(t.getY()),Math.floor(e.getX()),Math.floor(e.getY()));return isNaN(n)?r/7:isNaN(r)?n/7:(n+r)/14},e.prototype.sizeOfBlackWhiteBlackRunBothWays=function(e,t,n,r){var o=this.sizeOfBlackWhiteBlackRun(e,t,n,r),a=1,i=e-(n-e);i<0?(a=e/(e-i),i=0):i>=this.image.getWidth()&&(a=(this.image.getWidth()-1-e)/(i-e),i=this.image.getWidth()-1);var s=Math.floor(t-(r-t)*a);return a=1,s<0?(a=t/(t-s),s=0):s>=this.image.getHeight()&&(a=(this.image.getHeight()-1-t)/(s-t),s=this.image.getHeight()-1),i=Math.floor(e+(i-e)*a),(o+=this.sizeOfBlackWhiteBlackRun(e,t,i,s))-1},e.prototype.sizeOfBlackWhiteBlackRun=function(e,t,n,r){var o=Math.abs(r-t)>Math.abs(n-e);if(o){var a=e;e=t,t=a,a=n,n=r,r=a}for(var i=Math.abs(n-e),u=Math.abs(r-t),l=-i/2,c=e<n?1:-1,f=t<r?1:-1,d=0,p=n+c,h=e,g=t;h!==p;h+=c){var v=o?g:h,m=o?h:g;if(1===d===this.image.get(v,m)){if(2===d)return s.default.distance(h,g,e,t);d++}if((l+=u)>0){if(g===r)break;g+=f,l-=i}}return 2===d?s.default.distance(n+c,r,e,t):NaN},e.prototype.findAlignmentInRegion=function(e,t,n,r){var o=Math.floor(r*e),a=Math.max(0,t-o),i=Math.min(this.image.getWidth()-1,t+o);if(i-a<3*e)throw new f.default("Alignment top exceeds estimated module size.");var s=Math.max(0,n-o),u=Math.min(this.image.getHeight()-1,n+o);if(u-s<3*e)throw new f.default("Alignment bottom exceeds estimated module size.");return new c.default(this.image,a,s,i-a,u-s,e,this.resultPointCallback).find()},e}();t.default=d},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(6),o=n(149),a=n(150),i=n(3),s=function(){function e(e,t){this.image=e,this.resultPointCallback=t,this.possibleCenters=[],this.crossCheckStateCount=new Int32Array(5),this.resultPointCallback=t}return e.prototype.getImage=function(){return this.image},e.prototype.getPossibleCenters=function(){return this.possibleCenters},e.prototype.find=function(t){var n=null!==t&&void 0!==t&&void 0!==t.get(3),o=null!==t&&void 0!==t&&void 0!==t.get(1),i=this.image,s=i.getHeight(),u=i.getWidth(),l=Math.floor(3*s/(4*e.MAX_MODULES));(l<e.MIN_SKIP||n)&&(l=e.MIN_SKIP);for(var c=!1,f=new Int32Array(5),d=l-1;d<s&&!c;d+=l){f[0]=0,f[1]=0,f[2]=0,f[3]=0,f[4]=0;for(var p=0,h=0;h<u;h++)if(i.get(h,d))1==(1&p)&&p++,f[p]++;else if(0==(1&p))if(4===p)if(e.foundPatternCross(f)){if(!0!==this.handlePossibleCenter(f,d,h,o)){f[0]=f[2],f[1]=f[3],f[2]=f[4],f[3]=1,f[4]=0,p=3;continue}if(l=2,!0===this.hasSkipped)c=this.haveMultiplyConfirmedCenters();else{var g=this.findRowSkip();g>f[2]&&(d+=g-f[2]-l,h=u-1)}p=0,f[0]=0,f[1]=0,f[2]=0,f[3]=0,f[4]=0}else f[0]=f[2],f[1]=f[3],f[2]=f[4],f[3]=1,f[4]=0,p=3;else f[++p]++;else f[p]++;if(e.foundPatternCross(f))!0===this.handlePossibleCenter(f,d,u,o)&&(l=f[0],this.hasSkipped&&(c=this.haveMultiplyConfirmedCenters()))}var v=this.selectBestPatterns();return r.default.orderBestPatterns(v),new a.default(v)},e.centerFromEnd=function(e,t){return t-e[4]-e[3]-e[2]/2},e.foundPatternCross=function(e){for(var t=0,n=0;n<5;n++){var r=e[n];if(0===r)return!1;t+=r}if(t<7)return!1;var o=t/7,a=o/2;return Math.abs(o-e[0])<a&&Math.abs(o-e[1])<a&&Math.abs(3*o-e[2])<3*a&&Math.abs(o-e[3])<a&&Math.abs(o-e[4])<a},e.prototype.getCrossCheckStateCount=function(){var e=this.crossCheckStateCount;return e[0]=0,e[1]=0,e[2]=0,e[3]=0,e[4]=0,e},e.prototype.crossCheckDiagonal=function(t,n,r,o){for(var a=this.getCrossCheckStateCount(),i=0,s=this.image;t>=i&&n>=i&&s.get(n-i,t-i);)a[2]++,i++;if(t<i||n<i)return!1;for(;t>=i&&n>=i&&!s.get(n-i,t-i)&&a[1]<=r;)a[1]++,i++;if(t<i||n<i||a[1]>r)return!1;for(;t>=i&&n>=i&&s.get(n-i,t-i)&&a[0]<=r;)a[0]++,i++;if(a[0]>r)return!1;var u=s.getHeight(),l=s.getWidth();for(i=1;t+i<u&&n+i<l&&s.get(n+i,t+i);)a[2]++,i++;if(t+i>=u||n+i>=l)return!1;for(;t+i<u&&n+i<l&&!s.get(n+i,t+i)&&a[3]<r;)a[3]++,i++;if(t+i>=u||n+i>=l||a[3]>=r)return!1;for(;t+i<u&&n+i<l&&s.get(n+i,t+i)&&a[4]<r;)a[4]++,i++;if(a[4]>=r)return!1;var c=a[0]+a[1]+a[2]+a[3]+a[4];return Math.abs(c-o)<2*o&&e.foundPatternCross(a)},e.prototype.crossCheckVertical=function(t,n,r,o){for(var a=this.image,i=a.getHeight(),s=this.getCrossCheckStateCount(),u=t;u>=0&&a.get(n,u);)s[2]++,u--;if(u<0)return NaN;for(;u>=0&&!a.get(n,u)&&s[1]<=r;)s[1]++,u--;if(u<0||s[1]>r)return NaN;for(;u>=0&&a.get(n,u)&&s[0]<=r;)s[0]++,u--;if(s[0]>r)return NaN;for(u=t+1;u<i&&a.get(n,u);)s[2]++,u++;if(u===i)return NaN;for(;u<i&&!a.get(n,u)&&s[3]<r;)s[3]++,u++;if(u===i||s[3]>=r)return NaN;for(;u<i&&a.get(n,u)&&s[4]<r;)s[4]++,u++;if(s[4]>=r)return NaN;var l=s[0]+s[1]+s[2]+s[3]+s[4];return 5*Math.abs(l-o)>=2*o?NaN:e.foundPatternCross(s)?e.centerFromEnd(s,u):NaN},e.prototype.crossCheckHorizontal=function(t,n,r,o){for(var a=this.image,i=a.getWidth(),s=this.getCrossCheckStateCount(),u=t;u>=0&&a.get(u,n);)s[2]++,u--;if(u<0)return NaN;for(;u>=0&&!a.get(u,n)&&s[1]<=r;)s[1]++,u--;if(u<0||s[1]>r)return NaN;for(;u>=0&&a.get(u,n)&&s[0]<=r;)s[0]++,u--;if(s[0]>r)return NaN;for(u=t+1;u<i&&a.get(u,n);)s[2]++,u++;if(u===i)return NaN;for(;u<i&&!a.get(u,n)&&s[3]<r;)s[3]++,u++;if(u===i||s[3]>=r)return NaN;for(;u<i&&a.get(u,n)&&s[4]<r;)s[4]++,u++;if(s[4]>=r)return NaN;var l=s[0]+s[1]+s[2]+s[3]+s[4];return 5*Math.abs(l-o)>=o?NaN:e.foundPatternCross(s)?e.centerFromEnd(s,u):NaN},e.prototype.handlePossibleCenter=function(t,n,r,a){var i=t[0]+t[1]+t[2]+t[3]+t[4],s=e.centerFromEnd(t,r),u=this.crossCheckVertical(n,Math.floor(s),t[2],i);if(!isNaN(u)&&(s=this.crossCheckHorizontal(Math.floor(s),Math.floor(u),t[2],i),!isNaN(s)&&(!a||this.crossCheckDiagonal(Math.floor(u),Math.floor(s),t[2],i)))){for(var l=i/7,c=!1,f=this.possibleCenters,d=0,p=f.length;d<p;d++){var h=f[d];if(h.aboutEquals(l,u,s)){f[d]=h.combineEstimate(u,s,l),c=!0;break}}if(!c){var g=new o.default(s,u,l);f.push(g),null!==this.resultPointCallback&&void 0!==this.resultPointCallback&&this.resultPointCallback.foundPossibleResultPoint(g)}return!0}return!1},e.prototype.findRowSkip=function(){if(this.possibleCenters.length<=1)return 0;for(var t=null,n=0,r=this.possibleCenters;n<r.length;n++){var o=r[n];if(o.getCount()>=e.CENTER_QUORUM){if(null!=t)return this.hasSkipped=!0,Math.floor((Math.abs(t.getX()-o.getX())-Math.abs(t.getY()-o.getY()))/2);t=o}}return 0},e.prototype.haveMultiplyConfirmedCenters=function(){for(var t=0,n=0,r=this.possibleCenters.length,o=0,a=this.possibleCenters;o<a.length;o++){(c=a[o]).getCount()>=e.CENTER_QUORUM&&(t++,n+=c.getEstimatedModuleSize())}if(t<3)return!1;for(var i=n/r,s=0,u=0,l=this.possibleCenters;u<l.length;u++){var c=l[u];s+=Math.abs(c.getEstimatedModuleSize()-i)}return s<=.05*n},e.prototype.selectBestPatterns=function(){var e=this.possibleCenters.length;if(e<3)throw new i.default;var t,n=this.possibleCenters;if(e>3){for(var r=0,o=0,a=0,s=this.possibleCenters;a<s.length;a++){var u=s[a].getEstimatedModuleSize();r+=u,o+=u*u}t=r/e;var l=Math.sqrt(o/e-t*t);n.sort(function(e,n){var r=Math.abs(n.getEstimatedModuleSize()-t),o=Math.abs(e.getEstimatedModuleSize()-t);return r<o?-1:r>o?1:0});for(var c=Math.max(.2*t,l),f=0;f<n.length&&n.length>3;f++){var d=n[f];Math.abs(d.getEstimatedModuleSize()-t)>c&&(n.splice(f,1),f--)}}if(n.length>3){r=0;for(var p=0,h=n;p<h.length;p++){r+=h[p].getEstimatedModuleSize()}t=r/n.length,n.sort(function(e,n){if(n.getCount()===e.getCount()){var r=Math.abs(n.getEstimatedModuleSize()-t),o=Math.abs(e.getEstimatedModuleSize()-t);return r<o?1:r>o?-1:0}return n.getCount()-e.getCount()}),n.splice(3)}return[n[0],n[1],n[2]]},e.CENTER_QUORUM=2,e.MIN_SKIP=3,e.MAX_MODULES=57,e}();t.default=s},function(e,t,n){"use strict";var r=this&&this.__extends||function(){var e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])};return function(t,n){function r(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}();Object.defineProperty(t,"__esModule",{value:!0});var o=function(e){function t(t,n,r,o){var a=e.call(this,t,n)||this;return a.estimatedModuleSize=r,a.count=o,void 0===o&&(a.count=1),a}return r(t,e),t.prototype.getEstimatedModuleSize=function(){return this.estimatedModuleSize},t.prototype.getCount=function(){return this.count},t.prototype.aboutEquals=function(e,t,n){if(Math.abs(t-this.getY())<=e&&Math.abs(n-this.getX())<=e){var r=Math.abs(e-this.estimatedModuleSize);return r<=1||r<=this.estimatedModuleSize}return!1},t.prototype.combineEstimate=function(e,n,r){var o=this.count+1;return new t((this.count*this.getX()+n)/o,(this.count*this.getY()+e)/o,(this.count*this.estimatedModuleSize+r)/o,o)},t}(n(6).default);t.default=o},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e){this.bottomLeft=e[0],this.topLeft=e[1],this.topRight=e[2]}return e.prototype.getBottomLeft=function(){return this.bottomLeft},e.prototype.getTopLeft=function(){return this.topLeft},e.prototype.getTopRight=function(){return this.topRight},e}();t.default=r},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(152),o=n(3),a=function(){function e(e,t,n,r,o,a,i){this.image=e,this.startX=t,this.startY=n,this.width=r,this.height=o,this.moduleSize=a,this.resultPointCallback=i,this.possibleCenters=[],this.crossCheckStateCount=new Int32Array(3)}return e.prototype.find=function(){for(var e=this.startX,t=this.height,n=e+this.width,r=this.startY+t/2,a=new Int32Array(3),i=this.image,s=0;s<t;s++){var u=r+(0==(1&s)?Math.floor((s+1)/2):-Math.floor((s+1)/2));a[0]=0,a[1]=0,a[2]=0;for(var l=e;l<n&&!i.get(l,u);)l++;for(var c=0;l<n;){if(i.get(l,u))if(1===c)a[1]++;else if(2===c){var f;if(this.foundPatternCross(a))if(null!==(f=this.handlePossibleCenter(a,u,l)))return f;a[0]=a[2],a[1]=1,a[2]=0,c=1}else a[++c]++;else 1===c&&c++,a[c]++;l++}if(this.foundPatternCross(a))if(null!==(f=this.handlePossibleCenter(a,u,n)))return f}if(0!==this.possibleCenters.length)return this.possibleCenters[0];throw new o.default},e.centerFromEnd=function(e,t){return t-e[2]-e[1]/2},e.prototype.foundPatternCross=function(e){for(var t=this.moduleSize,n=t/2,r=0;r<3;r++)if(Math.abs(t-e[r])>=n)return!1;return!0},e.prototype.crossCheckVertical=function(t,n,r,o){var a=this.image,i=a.getHeight(),s=this.crossCheckStateCount;s[0]=0,s[1]=0,s[2]=0;for(var u=t;u>=0&&a.get(n,u)&&s[1]<=r;)s[1]++,u--;if(u<0||s[1]>r)return NaN;for(;u>=0&&!a.get(n,u)&&s[0]<=r;)s[0]++,u--;if(s[0]>r)return NaN;for(u=t+1;u<i&&a.get(n,u)&&s[1]<=r;)s[1]++,u++;if(u===i||s[1]>r)return NaN;for(;u<i&&!a.get(n,u)&&s[2]<=r;)s[2]++,u++;if(s[2]>r)return NaN;var l=s[0]+s[1]+s[2];return 5*Math.abs(l-o)>=2*o?NaN:this.foundPatternCross(s)?e.centerFromEnd(s,u):NaN},e.prototype.handlePossibleCenter=function(t,n,o){var a=t[0]+t[1]+t[2],i=e.centerFromEnd(t,o),s=this.crossCheckVertical(n,i,2*t[1],a);if(!isNaN(s)){for(var u=(t[0]+t[1]+t[2])/3,l=0,c=this.possibleCenters;l<c.length;l++){var f=c[l];if(f.aboutEquals(u,s,i))return f.combineEstimate(s,i,u)}var d=new r.default(i,s,u);this.possibleCenters.push(d),null!==this.resultPointCallback&&void 0!==this.resultPointCallback&&this.resultPointCallback.foundPossibleResultPoint(d)}return null},e}();t.default=a},function(e,t,n){"use strict";var r=this&&this.__extends||function(){var e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])};return function(t,n){function r(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}();Object.defineProperty(t,"__esModule",{value:!0});var o=function(e){function t(t,n,r){var o=e.call(this,t,n)||this;return o.estimatedModuleSize=r,o}return r(t,e),t.prototype.aboutEquals=function(e,t,n){if(Math.abs(t-this.getY())<=e&&Math.abs(n-this.getX())<=e){var r=Math.abs(e-this.estimatedModuleSize);return r<=1||r<=this.estimatedModuleSize}return!1},t.prototype.combineEstimate=function(e,n,r){return new t((this.getX()+n)/2,(this.getY()+e)/2,(this.estimatedModuleSize+r)/2)},t}(n(6).default);t.default=o},function(e,t,n){"use strict";var r=this&&this.__extends||function(){var e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])};return function(t,n){function r(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}();Object.defineProperty(t,"__esModule",{value:!0});var o=n(27),a=n(46),i=function(e){function t(t){return void 0===t&&(t=500),e.call(this,new a.default,t)||this}return r(t,e),t}(o.BrowserCodeReader);t.BrowserDatamatrixCodeReader=i},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(38),o=n(19),a=n(155),i=n(157),s=n(158),u=n(14),l=function(){function e(){this.rsDecoder=new r.default(o.default.DATA_MATRIX_FIELD_256)}return e.prototype.decode=function(e){for(var t=new a.default(e),n=t.getVersion(),r=t.readCodewords(),o=i.default.getDataBlocks(r,n),u=0,l=0,c=o;l<c.length;l++){u+=c[l].getNumDataCodewords()}for(var f=new Uint8Array(u),d=o.length,p=0;p<d;p++){var h=o[p],g=h.getCodewords(),v=h.getNumDataCodewords();this.correctErrors(g,v);for(var m=0;m<v;m++)f[m*d+p]=g[m]}return s.default.decode(f)},e.prototype.correctErrors=function(e,t){e.length;var n=new Int32Array(e);try{this.rsDecoder.decode(n,e.length-t)}catch(e){throw new u.default}for(var r=0;r<t;r++)e[r]=n[r]},e}();t.default=l},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(11),o=n(156),a=n(7),i=n(4),s=function(){function e(t){var n=t.getHeight();if(n<8||n>144||0!=(1&n))throw new a.default;this.version=e.readVersion(t),this.mappingBitMatrix=this.extractDataRegion(t),this.readMappingMatrix=new r.default(this.mappingBitMatrix.getWidth(),this.mappingBitMatrix.getHeight())}return e.prototype.getVersion=function(){return this.version},e.readVersion=function(e){var t=e.getHeight(),n=e.getWidth();return o.default.getVersionForDimensions(t,n)},e.prototype.readCodewords=function(){var e=new Int8Array(this.version.getTotalCodewords()),t=0,n=4,r=0,o=this.mappingBitMatrix.getHeight(),i=this.mappingBitMatrix.getWidth(),s=!1,u=!1,l=!1,c=!1;do{if(n!==o||0!==r||s)if(n!==o-2||0!==r||0==(3&i)||u)if(n!==o+4||2!==r||0!=(7&i)||l)if(n!==o-2||0!==r||4!=(7&i)||c){do{n<o&&r>=0&&!this.readMappingMatrix.get(r,n)&&(e[t++]=255&this.readUtah(n,r,o,i)),n-=2,r+=2}while(n>=0&&r<i);n+=1,r+=3;do{n>=0&&r<i&&!this.readMappingMatrix.get(r,n)&&(e[t++]=255&this.readUtah(n,r,o,i)),n+=2,r-=2}while(n<o&&r>=0);n+=3,r+=1}else e[t++]=255&this.readCorner4(o,i),n-=2,r+=2,c=!0;else e[t++]=255&this.readCorner3(o,i),n-=2,r+=2,l=!0;else e[t++]=255&this.readCorner2(o,i),n-=2,r+=2,u=!0;else e[t++]=255&this.readCorner1(o,i),n-=2,r+=2,s=!0}while(n<o||r<i);if(t!==this.version.getTotalCodewords())throw new a.default;return e},e.prototype.readModule=function(e,t,n,r){return e<0&&(e+=n,t+=4-(n+4&7)),t<0&&(t+=r,e+=4-(r+4&7)),this.readMappingMatrix.set(t,e),this.mappingBitMatrix.get(t,e)},e.prototype.readUtah=function(e,t,n,r){var o=0;return this.readModule(e-2,t-2,n,r)&&(o|=1),o<<=1,this.readModule(e-2,t-1,n,r)&&(o|=1),o<<=1,this.readModule(e-1,t-2,n,r)&&(o|=1),o<<=1,this.readModule(e-1,t-1,n,r)&&(o|=1),o<<=1,this.readModule(e-1,t,n,r)&&(o|=1),o<<=1,this.readModule(e,t-2,n,r)&&(o|=1),o<<=1,this.readModule(e,t-1,n,r)&&(o|=1),o<<=1,this.readModule(e,t,n,r)&&(o|=1),o},e.prototype.readCorner1=function(e,t){var n=0;return this.readModule(e-1,0,e,t)&&(n|=1),n<<=1,this.readModule(e-1,1,e,t)&&(n|=1),n<<=1,this.readModule(e-1,2,e,t)&&(n|=1),n<<=1,this.readModule(0,t-2,e,t)&&(n|=1),n<<=1,this.readModule(0,t-1,e,t)&&(n|=1),n<<=1,this.readModule(1,t-1,e,t)&&(n|=1),n<<=1,this.readModule(2,t-1,e,t)&&(n|=1),n<<=1,this.readModule(3,t-1,e,t)&&(n|=1),n},e.prototype.readCorner2=function(e,t){var n=0;return this.readModule(e-3,0,e,t)&&(n|=1),n<<=1,this.readModule(e-2,0,e,t)&&(n|=1),n<<=1,this.readModule(e-1,0,e,t)&&(n|=1),n<<=1,this.readModule(0,t-4,e,t)&&(n|=1),n<<=1,this.readModule(0,t-3,e,t)&&(n|=1),n<<=1,this.readModule(0,t-2,e,t)&&(n|=1),n<<=1,this.readModule(0,t-1,e,t)&&(n|=1),n<<=1,this.readModule(1,t-1,e,t)&&(n|=1),n},e.prototype.readCorner3=function(e,t){var n=0;return this.readModule(e-1,0,e,t)&&(n|=1),n<<=1,this.readModule(e-1,t-1,e,t)&&(n|=1),n<<=1,this.readModule(0,t-3,e,t)&&(n|=1),n<<=1,this.readModule(0,t-2,e,t)&&(n|=1),n<<=1,this.readModule(0,t-1,e,t)&&(n|=1),n<<=1,this.readModule(1,t-3,e,t)&&(n|=1),n<<=1,this.readModule(1,t-2,e,t)&&(n|=1),n<<=1,this.readModule(1,t-1,e,t)&&(n|=1),n},e.prototype.readCorner4=function(e,t){var n=0;return this.readModule(e-3,0,e,t)&&(n|=1),n<<=1,this.readModule(e-2,0,e,t)&&(n|=1),n<<=1,this.readModule(e-1,0,e,t)&&(n|=1),n<<=1,this.readModule(0,t-2,e,t)&&(n|=1),n<<=1,this.readModule(0,t-1,e,t)&&(n|=1),n<<=1,this.readModule(1,t-1,e,t)&&(n|=1),n<<=1,this.readModule(2,t-1,e,t)&&(n|=1),n<<=1,this.readModule(3,t-1,e,t)&&(n|=1),n},e.prototype.extractDataRegion=function(e){var t=this.version.getSymbolSizeRows(),n=this.version.getSymbolSizeColumns();if(e.getHeight()!==t)throw new i.default("Dimension of bitMatrix must match the version size");for(var o=this.version.getDataRegionSizeRows(),a=this.version.getDataRegionSizeColumns(),s=t/o|0,u=n/a|0,l=s*o,c=u*a,f=new r.default(c,l),d=0;d<s;++d)for(var p=d*o,h=0;h<u;++h)for(var g=h*a,v=0;v<o;++v)for(var m=d*(o+2)+1+v,y=p+v,w=0;w<a;++w){var b=h*(a+2)+1+w;if(e.get(b,m)){var E=g+w;f.set(E,y)}}return f},e}();t.default=s},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(7),o=function(){function e(e,t,n){this.ecCodewords=e,this.ecBlocks=[t],n&&this.ecBlocks.push(n)}return e.prototype.getECCodewords=function(){return this.ecCodewords},e.prototype.getECBlocks=function(){return this.ecBlocks},e}();t.ECBlocks=o;var a=function(){function e(e,t){this.count=e,this.dataCodewords=t}return e.prototype.getCount=function(){return this.count},e.prototype.getDataCodewords=function(){return this.dataCodewords},e}();t.ECB=a;var i=function(){function e(e,t,n,r,o,a){this.versionNumber=e,this.symbolSizeRows=t,this.symbolSizeColumns=n,this.dataRegionSizeRows=r,this.dataRegionSizeColumns=o,this.ecBlocks=a;for(var i=0,s=a.getECCodewords(),u=0,l=a.getECBlocks();u<l.length;u++){var c=l[u];i+=c.getCount()*(c.getDataCodewords()+s)}this.totalCodewords=i}return e.prototype.getVersionNumber=function(){return this.versionNumber},e.prototype.getSymbolSizeRows=function(){return this.symbolSizeRows},e.prototype.getSymbolSizeColumns=function(){return this.symbolSizeColumns},e.prototype.getDataRegionSizeRows=function(){return this.dataRegionSizeRows},e.prototype.getDataRegionSizeColumns=function(){return this.dataRegionSizeColumns},e.prototype.getTotalCodewords=function(){return this.totalCodewords},e.prototype.getECBlocks=function(){return this.ecBlocks},e.getVersionForDimensions=function(t,n){if(0!=(1&t)||0!=(1&n))throw new r.default;for(var o=0,a=e.VERSIONS;o<a.length;o++){var i=a[o];if(i.symbolSizeRows===t&&i.symbolSizeColumns===n)return i}throw new r.default},e.prototype.toString=function(){return""+this.versionNumber},e.buildVersions=function(){return[new e(1,10,10,8,8,new o(5,new a(1,3))),new e(2,12,12,10,10,new o(7,new a(1,5))),new e(3,14,14,12,12,new o(10,new a(1,8))),new e(4,16,16,14,14,new o(12,new a(1,12))),new e(5,18,18,16,16,new o(14,new a(1,18))),new e(6,20,20,18,18,new o(18,new a(1,22))),new e(7,22,22,20,20,new o(20,new a(1,30))),new e(8,24,24,22,22,new o(24,new a(1,36))),new e(9,26,26,24,24,new o(28,new a(1,44))),new e(10,32,32,14,14,new o(36,new a(1,62))),new e(11,36,36,16,16,new o(42,new a(1,86))),new e(12,40,40,18,18,new o(48,new a(1,114))),new e(13,44,44,20,20,new o(56,new a(1,144))),new e(14,48,48,22,22,new o(68,new a(1,174))),new e(15,52,52,24,24,new o(42,new a(2,102))),new e(16,64,64,14,14,new o(56,new a(2,140))),new e(17,72,72,16,16,new o(36,new a(4,92))),new e(18,80,80,18,18,new o(48,new a(4,114))),new e(19,88,88,20,20,new o(56,new a(4,144))),new e(20,96,96,22,22,new o(68,new a(4,174))),new e(21,104,104,24,24,new o(56,new a(6,136))),new e(22,120,120,18,18,new o(68,new a(6,175))),new e(23,132,132,20,20,new o(62,new a(8,163))),new e(24,144,144,22,22,new o(62,new a(8,156),new a(2,155))),new e(25,8,18,6,16,new o(7,new a(1,5))),new e(26,8,32,6,14,new o(11,new a(1,10))),new e(27,12,26,10,24,new o(14,new a(1,16))),new e(28,12,36,10,16,new o(18,new a(1,22))),new e(29,16,36,14,16,new o(24,new a(1,32))),new e(30,16,48,14,22,new o(28,new a(1,49)))]},e.VERSIONS=e.buildVersions(),e}();t.default=i},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(4),o=function(){function e(e,t){this.numDataCodewords=e,this.codewords=t}return e.getDataBlocks=function(t,n){for(var o=n.getECBlocks(),a=0,i=o.getECBlocks(),s=0,u=i;s<u.length;s++){a+=(p=u[s]).getCount()}for(var l=new Array(a),c=0,f=0,d=i;f<d.length;f++)for(var p=d[f],h=0;h<p.getCount();h++){var g=p.getDataCodewords(),v=o.getECCodewords()+g;l[c++]=new e(g,new Uint8Array(v))}var m=l[0].codewords.length-o.getECCodewords(),y=m-1,w=0;for(h=0;h<y;h++)for(var b=0;b<c;b++)l[b].codewords[h]=t[w++];var E=24===n.getVersionNumber(),_=E?8:c;for(b=0;b<_;b++)l[b].codewords[m-1]=t[w++];var C=l[0].codewords.length;for(h=m;h<C;h++)for(b=0;b<c;b++){var T=E?(b+8)%c:b,O=E&&T>7?h-1:h;l[T].codewords[O]=t[w++]}if(w!==t.length)throw new r.default;return l},e.prototype.getNumDataCodewords=function(){return this.numDataCodewords},e.prototype.getCodewords=function(){return this.codewords},e}();t.default=o},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=n(41),a=n(40),i=n(13),s=n(42),u=n(66),l=n(7),c=n(23);!function(e){e[e.PAD_ENCODE=0]="PAD_ENCODE",e[e.ASCII_ENCODE=1]="ASCII_ENCODE",e[e.C40_ENCODE=2]="C40_ENCODE",e[e.TEXT_ENCODE=3]="TEXT_ENCODE",e[e.ANSIX12_ENCODE=4]="ANSIX12_ENCODE",e[e.EDIFACT_ENCODE=5]="EDIFACT_ENCODE",e[e.BASE256_ENCODE=6]="BASE256_ENCODE"}(r||(r={}));var f=function(){function e(){}return e.decode=function(e){var t=new a.default(e),n=new i.default,s=new i.default,u=new Array,c=r.ASCII_ENCODE;do{if(c===r.ASCII_ENCODE)c=this.decodeAsciiSegment(t,n,s);else{switch(c){case r.C40_ENCODE:this.decodeC40Segment(t,n);break;case r.TEXT_ENCODE:this.decodeTextSegment(t,n);break;case r.ANSIX12_ENCODE:this.decodeAnsiX12Segment(t,n);break;case r.EDIFACT_ENCODE:this.decodeEdifactSegment(t,n);break;case r.BASE256_ENCODE:this.decodeBase256Segment(t,n,u);break;default:throw new l.default}c=r.ASCII_ENCODE}}while(c!==r.PAD_ENCODE&&t.available()>0);return s.length()>0&&n.append(s.toString()),new o.default(e,n.toString(),0===u.length?null:u,null)},e.decodeAsciiSegment=function(e,t,n){var o=!1;do{var a=e.readBits(8);if(0===a)throw new l.default;if(a<=128)return o&&(a+=128),t.append(String.fromCharCode(a-1)),r.ASCII_ENCODE;if(129===a)return r.PAD_ENCODE;if(a<=229){var i=a-130;i<10&&t.append("0"),t.append(""+i)}else switch(a){case 230:return r.C40_ENCODE;case 231:return r.BASE256_ENCODE;case 232:t.append(String.fromCharCode(29));break;case 233:case 234:break;case 235:o=!0;break;case 236:t.append("[)>05"),n.insert(0,"");break;case 237:t.append("[)>06"),n.insert(0,"");break;case 238:return r.ANSIX12_ENCODE;case 239:return r.TEXT_ENCODE;case 240:return r.EDIFACT_ENCODE;case 241:break;default:if(254!==a||0!==e.available())throw new l.default}}while(e.available()>0);return r.ASCII_ENCODE},e.decodeC40Segment=function(e,t){var n=!1,r=[],o=0;do{if(8===e.available())return;var a=e.readBits(8);if(254===a)return;this.parseTwoBytes(a,e.readBits(8),r);for(var i=0;i<3;i++){var s=r[i];switch(o){case 0:if(s<3)o=s+1;else{if(!(s<this.C40_BASIC_SET_CHARS.length))throw new l.default;var u=this.C40_BASIC_SET_CHARS[s];n?(t.append(String.fromCharCode(u.charCodeAt(0)+128)),n=!1):t.append(u)}break;case 1:n?(t.append(String.fromCharCode(s+128)),n=!1):t.append(String.fromCharCode(s)),o=0;break;case 2:if(s<this.C40_SHIFT2_SET_CHARS.length){u=this.C40_SHIFT2_SET_CHARS[s];n?(t.append(String.fromCharCode(u.charCodeAt(0)+128)),n=!1):t.append(u)}else switch(s){case 27:t.append(String.fromCharCode(29));break;case 30:n=!0;break;default:throw new l.default}o=0;break;case 3:n?(t.append(String.fromCharCode(s+224)),n=!1):t.append(String.fromCharCode(s+96)),o=0;break;default:throw new l.default}}}while(e.available()>0)},e.decodeTextSegment=function(e,t){var n=!1,r=[],o=0;do{if(8===e.available())return;var a=e.readBits(8);if(254===a)return;this.parseTwoBytes(a,e.readBits(8),r);for(var i=0;i<3;i++){var s=r[i];switch(o){case 0:if(s<3)o=s+1;else{if(!(s<this.TEXT_BASIC_SET_CHARS.length))throw new l.default;var u=this.TEXT_BASIC_SET_CHARS[s];n?(t.append(String.fromCharCode(u.charCodeAt(0)+128)),n=!1):t.append(u)}break;case 1:n?(t.append(String.fromCharCode(s+128)),n=!1):t.append(String.fromCharCode(s)),o=0;break;case 2:if(s<this.TEXT_SHIFT2_SET_CHARS.length){u=this.TEXT_SHIFT2_SET_CHARS[s];n?(t.append(String.fromCharCode(u.charCodeAt(0)+128)),n=!1):t.append(u)}else switch(s){case 27:t.append(String.fromCharCode(29));break;case 30:n=!0;break;default:throw new l.default}o=0;break;case 3:if(!(s<this.TEXT_SHIFT3_SET_CHARS.length))throw new l.default;u=this.TEXT_SHIFT3_SET_CHARS[s];n?(t.append(String.fromCharCode(u.charCodeAt(0)+128)),n=!1):t.append(u),o=0;break;default:throw new l.default}}}while(e.available()>0)},e.decodeAnsiX12Segment=function(e,t){var n=[];do{if(8===e.available())return;var r=e.readBits(8);if(254===r)return;this.parseTwoBytes(r,e.readBits(8),n);for(var o=0;o<3;o++){var a=n[o];switch(a){case 0:t.append("\r");break;case 1:t.append("*");break;case 2:t.append(">");break;case 3:t.append(" ");break;default:if(a<14)t.append(String.fromCharCode(a+44));else{if(!(a<40))throw new l.default;t.append(String.fromCharCode(a+51))}}}}while(e.available()>0)},e.parseTwoBytes=function(e,t,n){var r=(e<<8)+t-1,o=Math.floor(r/1600);n[0]=o,r-=1600*o,o=Math.floor(r/40),n[1]=o,n[2]=r-40*o},e.decodeEdifactSegment=function(e,t){do{if(e.available()<=16)return;for(var n=0;n<4;n++){var r=e.readBits(6);if(31===r){var o=8-e.getBitOffset();return void(8!==o&&e.readBits(o))}0==(32&r)&&(r|=64),t.append(String.fromCharCode(r))}}while(e.available()>0)},e.decodeBase256Segment=function(e,t,n){var r,o=1+e.getByteOffset(),a=this.unrandomize255State(e.readBits(8),o++);if((r=0===a?e.available()/8|0:a<250?a:250*(a-249)+this.unrandomize255State(e.readBits(8),o++))<0)throw new l.default;for(var i=new Uint8Array(r),f=0;f<r;f++){if(e.available()<8)throw new l.default;i[f]=this.unrandomize255State(e.readBits(8),o++)}n.push(i);try{t.append(s.default.decode(i,u.StringUtils.ISO88591))}catch(e){throw new c.default("Platform does not support required encoding: "+e.message)}},e.unrandomize255State=function(e,t){var n=e-(149*t%255+1);return n>=0?n:n+256},e.C40_BASIC_SET_CHARS=["*","*","*"," ","0","1","2","3","4","5","6","7","8","9","A","B","C","D","E","F","G","H","I","J","K","L","M","N","O","P","Q","R","S","T","U","V","W","X","Y","Z"],e.C40_SHIFT2_SET_CHARS=["!",'"',"#","$","%","&","'","(",")","*","+",",","-",".","/",":",";","<","=",">","?","@","[","\\","]","^","_"],e.TEXT_BASIC_SET_CHARS=["*","*","*"," ","0","1","2","3","4","5","6","7","8","9","a","b","c","d","e","f","g","h","i","j","k","l","m","n","o","p","q","r","s","t","u","v","w","x","y","z"],e.TEXT_SHIFT2_SET_CHARS=e.C40_SHIFT2_SET_CHARS,e.TEXT_SHIFT3_SET_CHARS=["`","A","B","C","D","E","F","G","H","I","J","K","L","M","N","O","P","Q","R","S","T","U","V","W","X","Y","Z","{","|","}","~",String.fromCharCode(127)],e}();t.default=f},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(6),o=n(43),a=n(44),i=n(22),s=n(81),u=n(3),l=function(){function e(e){this.image=e,this.rectangleDetector=new s.default(e)}return e.prototype.detect=function(){var t=this.rectangleDetector.detect(),n=t[0],a=t[1],i=t[2],s=t[3],l=[];l.push(this.transitionsBetween(n,a)),l.push(this.transitionsBetween(n,i)),l.push(this.transitionsBetween(a,s)),l.push(this.transitionsBetween(i,s)),l.sort(c.resultPointsAndTransitionsComparator);var f=l[0],d=l[1],p=new Map;e.increment(p,f.getFrom()),e.increment(p,f.getTo()),e.increment(p,d.getFrom()),e.increment(p,d.getTo());for(var h=null,g=null,v=null,m=0,y=Array.from(p.entries());m<y.length;m++){var w=y[m],b=w[0];2===w[1]?g=b:null==h?h=b:v=b}if(null==h||null==g||null==v)throw new u.default;var E=[h,g,v];r.default.orderBestPatterns(E);var _=E[0];g=E[1];var C,T=E[2];C=p.has(n)?p.has(a)?p.has(i)?s:i:a:n;var O,S,N=this.transitionsBetween(T,C).getTransitions(),A=this.transitionsBetween(_,C).getTransitions();if(1==(1&N)&&N++,N+=2,1==(1&A)&&A++,4*N>=7*(A+=2)||4*A>=7*N)null==(S=this.correctTopRightRectangular(g,_,T,C,N,A))&&(S=C),N=this.transitionsBetween(T,S).getTransitions(),A=this.transitionsBetween(_,S).getTransitions(),1==(1&N)&&N++,1==(1&A)&&A++,O=e.sampleGrid(this.image,T,g,_,S,N,A);else{var P=Math.min(A,N);null==(S=this.correctTopRight(g,_,T,C,P))&&(S=C);var I=Math.max(this.transitionsBetween(T,S).getTransitions(),this.transitionsBetween(_,S).getTransitions());1==(1&++I)&&I++,O=e.sampleGrid(this.image,T,g,_,S,I,I)}return new o.default(O,[T,g,_,S])},e.prototype.correctTopRightRectangular=function(t,n,o,a,i,s){var u=e.distance(t,n)/i,l=e.distance(o,a),c=(a.getX()-o.getX())/l,f=(a.getY()-o.getY())/l,d=new r.default(a.getX()+u*c,a.getY()+u*f);u=e.distance(t,o)/s,l=e.distance(n,a),c=(a.getX()-n.getX())/l,f=(a.getY()-n.getY())/l;var p=new r.default(a.getX()+u*c,a.getY()+u*f);return this.isValid(d)?this.isValid(p)?Math.abs(i-this.transitionsBetween(o,d).getTransitions())+Math.abs(s-this.transitionsBetween(n,d).getTransitions())<=Math.abs(i-this.transitionsBetween(o,p).getTransitions())+Math.abs(s-this.transitionsBetween(n,p).getTransitions())?d:p:d:this.isValid(p)?p:null},e.prototype.correctTopRight=function(t,n,o,a,i){var s=e.distance(t,n)/i,u=e.distance(o,a),l=(a.getX()-o.getX())/u,c=(a.getY()-o.getY())/u,f=new r.default(a.getX()+s*l,a.getY()+s*c);s=e.distance(t,o)/i,u=e.distance(n,a),l=(a.getX()-n.getX())/u,c=(a.getY()-n.getY())/u;var d=new r.default(a.getX()+s*l,a.getY()+s*c);return this.isValid(f)?this.isValid(d)?Math.abs(this.transitionsBetween(o,f).getTransitions()-this.transitionsBetween(n,f).getTransitions())<=Math.abs(this.transitionsBetween(o,d).getTransitions()-this.transitionsBetween(n,d).getTransitions())?f:d:f:this.isValid(d)?d:null},e.prototype.isValid=function(e){return e.getX()>=0&&e.getX()<this.image.getWidth()&&e.getY()>0&&e.getY()<this.image.getHeight()},e.distance=function(e,t){return i.default.round(r.default.distance(e,t))},e.increment=function(e,t){var n=e.get(t);e.set(t,null==n?1:n+1)},e.sampleGrid=function(e,t,n,r,o,i,s){return a.default.getInstance().sampleGrid(e,i,s,.5,.5,i-.5,.5,i-.5,s-.5,.5,s-.5,t.getX(),t.getY(),o.getX(),o.getY(),r.getX(),r.getY(),n.getX(),n.getY())},e.prototype.transitionsBetween=function(e,t){var n=0|e.getX(),r=0|e.getY(),o=0|t.getX(),a=0|t.getY(),i=Math.abs(a-r)>Math.abs(o-n);if(i){var s=n;n=r,r=s,s=o,o=a,a=s}for(var u=Math.abs(o-n),l=Math.abs(a-r),f=-u/2,d=r<a?1:-1,p=n<o?1:-1,h=0,g=this.image.get(i?r:n,i?n:r),v=n,m=r;v!==o;v+=p){var y=this.image.get(i?m:v,i?v:m);if(y!==g&&(h++,g=y),(f+=l)>0){if(m===a)break;m+=d,f-=u}}return new c(e,t,h)},e}();t.default=l;var c=function(){function e(e,t,n){this.from=e,this.to=t,this.transitions=n}return e.prototype.getFrom=function(){return this.from},e.prototype.getTo=function(){return this.to},e.prototype.getTransitions=function(){return this.transitions},e.prototype.toString=function(){return this.from+"/"+this.to+"/"+this.transitions},e.resultPointsAndTransitionsComparator=function(e,t){return e.getTransitions()-t.getTransitions()},e}()},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(31),o=n(47),a=n(30),i=n(4),s=n(23),u=function(){function e(e){this.containerElement="string"==typeof e?document.getElementById(e):e}return e.prototype.write=function(t,n,s,u){if(void 0===u&&(u=null),0===t.length)throw new i.default("Found empty contents");if(n<0||s<0)throw new i.default("Requested dimensions are too small: "+n+"x"+s);var l=a.default.L,c=e.QUIET_ZONE_SIZE;null!==u&&(void 0!==u.get(r.default.ERROR_CORRECTION)&&(l=a.default.fromString(u.get(r.default.ERROR_CORRECTION).toString())),void 0!==u.get(r.default.MARGIN)&&(c=Number.parseInt(u.get(r.default.MARGIN).toString(),10)));var f=o.default.encode(t,l,u);return this.renderResult(f,n,s,c)},e.prototype.renderResult=function(e,t,n,r){var o=e.getMatrix();if(null===o)throw new s.default;var a=o.getWidth(),i=o.getHeight(),u=a+2*r,l=i+2*r,c=Math.max(t,u),f=Math.max(n,l),d=Math.min(Math.floor(c/u),Math.floor(f/l)),p=Math.floor((c-a*d)/2),h=Math.floor((f-i*d)/2),g=this.createSVGElement(c,f);this.containerElement.appendChild(g);for(var v=0,m=h;v<i;v++,m+=d)for(var y=0,w=p;y<a;y++,w+=d)if(1===o.get(y,v)){var b=this.createSvgRectElement(w,m,d,d);g.appendChild(b)}return g},e.prototype.createSVGElement=function(t,n){var r=document.createElementNS(e.SVG_NS,"svg");return r.setAttributeNS(null,"height",t.toString()),r.setAttributeNS(null,"width",n.toString()),r},e.prototype.createSvgRectElement=function(t,n,r,o){var a=document.createElementNS(e.SVG_NS,"rect");return a.setAttributeNS(null,"x",t.toString()),a.setAttributeNS(null,"y",n.toString()),a.setAttributeNS(null,"height",r.toString()),a.setAttributeNS(null,"width",o.toString()),a.setAttributeNS(null,"fill","#000000"),a},e.QUIET_ZONE_SIZE=4,e.SVG_NS="http://www.w3.org/2000/svg",e}();t.BrowserQRCodeSvgWriter=u},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(35),o=n(13),a=function(){function e(e,t){this.width=e,this.height=t;for(var n=new Array(t),r=0;r!==t;r++)n[r]=new Uint8Array(e);this.bytes=n}return e.prototype.getHeight=function(){return this.height},e.prototype.getWidth=function(){return this.width},e.prototype.get=function(e,t){return this.bytes[t][e]},e.prototype.getArray=function(){return this.bytes},e.prototype.setNumber=function(e,t,n){this.bytes[t][e]=n},e.prototype.setBoolean=function(e,t,n){this.bytes[t][e]=n?1:0},e.prototype.clear=function(e){for(var t=0,n=this.bytes;t<n.length;t++){var o=n[t];r.default.fillUint8Array(o,e)}},e.prototype.equals=function(t){if(!(t instanceof e))return!1;var n=t;if(this.width!==n.width)return!1;if(this.height!==n.height)return!1;for(var r=0,o=this.height;r<o;++r)for(var a=this.bytes[r],i=n.bytes[r],s=0,u=this.width;s<u;++s)if(a[s]!==i[s])return!1;return!0},e.prototype.toString=function(){for(var e=new o.default,t=0,n=this.height;t<n;++t){for(var r=this.bytes[t],a=0,i=this.width;a<i;++a)switch(r[a]){case 0:e.append(" 0");break;case 1:e.append(" 1");break;default:e.append("  ")}e.append("\n")}return e.toString()},e}();t.default=a},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(18),o=n(28),a=n(48),i=n(83),s=n(49),u=n(4),l=function(){function e(){}return e.clearMatrix=function(e){e.clear(255)},e.buildMatrix=function(t,n,r,o,a){e.clearMatrix(a),e.embedBasicPatterns(r,a),e.embedTypeInfo(n,o,a),e.maybeEmbedVersionInfo(r,a),e.embedDataBits(t,o,a)},e.embedBasicPatterns=function(t,n){e.embedPositionDetectionPatternsAndSeparators(n),e.embedDarkDotAtLeftBottomCorner(n),e.maybeEmbedPositionAdjustmentPatterns(t,n),e.embedTimingPatterns(n)},e.embedTypeInfo=function(t,n,o){var a=new r.default;e.makeTypeInfoBits(t,n,a);for(var i=0,s=a.getSize();i<s;++i){var u=a.get(a.getSize()-1-i),l=e.TYPE_INFO_COORDINATES[i],c=l[0],f=l[1];if(o.setBoolean(c,f,u),i<8){var d=o.getWidth()-i-1,p=8;o.setBoolean(d,p,u)}else{d=8,p=o.getHeight()-7+(i-8);o.setBoolean(d,p,u)}}},e.maybeEmbedVersionInfo=function(t,n){if(!(t.getVersionNumber()<7)){var o=new r.default;e.makeVersionInfoBits(t,o);for(var a=17,i=0;i<6;++i)for(var s=0;s<3;++s){var u=o.get(a);a--,n.setBoolean(i,n.getHeight()-11+s,u),n.setBoolean(n.getHeight()-11+s,i,u)}}},e.embedDataBits=function(t,n,r){for(var o=0,a=-1,u=r.getWidth()-1,l=r.getHeight()-1;u>0;){for(6===u&&(u-=1);l>=0&&l<r.getHeight();){for(var c=0;c<2;++c){var f=u-c;if(e.isEmpty(r.get(f,l))){var d=void 0;o<t.getSize()?(d=t.get(o),++o):d=!1,255!==n&&i.default.getDataMaskBit(n,f,l)&&(d=!d),r.setBoolean(f,l,d)}}l+=a}l+=a=-a,u-=2}if(o!==t.getSize())throw new s.default("Not all bits consumed: "+o+"/"+t.getSize())},e.findMSBSet=function(e){return 32-o.default.numberOfLeadingZeros(e)},e.calculateBCHCode=function(t,n){if(0===n)throw new u.default("0 polynomial");var r=e.findMSBSet(n);for(t<<=r-1;e.findMSBSet(t)>=r;)t^=n<<e.findMSBSet(t)-r;return t},e.makeTypeInfoBits=function(t,n,o){if(!a.default.isValidMaskPattern(n))throw new s.default("Invalid mask pattern");var i=t.getBits()<<3|n;o.appendBits(i,5);var u=e.calculateBCHCode(i,e.TYPE_INFO_POLY);o.appendBits(u,10);var l=new r.default;if(l.appendBits(e.TYPE_INFO_MASK_PATTERN,15),o.xor(l),15!==o.getSize())throw new s.default("should not happen but we got: "+o.getSize())},e.makeVersionInfoBits=function(t,n){n.appendBits(t.getVersionNumber(),6);var r=e.calculateBCHCode(t.getVersionNumber(),e.VERSION_INFO_POLY);if(n.appendBits(r,12),18!==n.getSize())throw new s.default("should not happen but we got: "+n.getSize())},e.isEmpty=function(e){return 255===e},e.embedTimingPatterns=function(t){for(var n=8;n<t.getWidth()-8;++n){var r=(n+1)%2;e.isEmpty(t.get(n,6))&&t.setNumber(n,6,r),e.isEmpty(t.get(6,n))&&t.setNumber(6,n,r)}},e.embedDarkDotAtLeftBottomCorner=function(e){if(0===e.get(8,e.getHeight()-8))throw new s.default;e.setNumber(8,e.getHeight()-8,1)},e.embedHorizontalSeparationPattern=function(t,n,r){for(var o=0;o<8;++o){if(!e.isEmpty(r.get(t+o,n)))throw new s.default;r.setNumber(t+o,n,0)}},e.embedVerticalSeparationPattern=function(t,n,r){for(var o=0;o<7;++o){if(!e.isEmpty(r.get(t,n+o)))throw new s.default;r.setNumber(t,n+o,0)}},e.embedPositionAdjustmentPattern=function(t,n,r){for(var o=0;o<5;++o)for(var a=e.POSITION_ADJUSTMENT_PATTERN[o],i=0;i<5;++i)r.setNumber(t+i,n+o,a[i])},e.embedPositionDetectionPattern=function(t,n,r){for(var o=0;o<7;++o)for(var a=e.POSITION_DETECTION_PATTERN[o],i=0;i<7;++i)r.setNumber(t+i,n+o,a[i])},e.embedPositionDetectionPatternsAndSeparators=function(t){var n=e.POSITION_DETECTION_PATTERN[0].length;e.embedPositionDetectionPattern(0,0,t),e.embedPositionDetectionPattern(t.getWidth()-n,0,t),e.embedPositionDetectionPattern(0,t.getWidth()-n,t);e.embedHorizontalSeparationPattern(0,7,t),e.embedHorizontalSeparationPattern(t.getWidth()-8,7,t),e.embedHorizontalSeparationPattern(0,t.getWidth()-8,t);e.embedVerticalSeparationPattern(7,0,t),e.embedVerticalSeparationPattern(t.getHeight()-7-1,0,t),e.embedVerticalSeparationPattern(7,t.getHeight()-7,t)},e.maybeEmbedPositionAdjustmentPatterns=function(t,n){if(!(t.getVersionNumber()<2))for(var r=t.getVersionNumber()-1,o=e.POSITION_ADJUSTMENT_PATTERN_COORDINATE_TABLE[r],a=0,i=o.length;a!==i;a++){var s=o[a];if(s>=0)for(var u=0;u!==i;u++){var l=o[u];l>=0&&e.isEmpty(n.get(l,s))&&e.embedPositionAdjustmentPattern(l-2,s-2,n)}}},e.POSITION_DETECTION_PATTERN=Array.from([Int32Array.from([1,1,1,1,1,1,1]),Int32Array.from([1,0,0,0,0,0,1]),Int32Array.from([1,0,1,1,1,0,1]),Int32Array.from([1,0,1,1,1,0,1]),Int32Array.from([1,0,1,1,1,0,1]),Int32Array.from([1,0,0,0,0,0,1]),Int32Array.from([1,1,1,1,1,1,1])]),e.POSITION_ADJUSTMENT_PATTERN=Array.from([Int32Array.from([1,1,1,1,1]),Int32Array.from([1,0,0,0,1]),Int32Array.from([1,0,1,0,1]),Int32Array.from([1,0,0,0,1]),Int32Array.from([1,1,1,1,1])]),e.POSITION_ADJUSTMENT_PATTERN_COORDINATE_TABLE=Array.from([Int32Array.from([-1,-1,-1,-1,-1,-1,-1]),Int32Array.from([6,18,-1,-1,-1,-1,-1]),Int32Array.from([6,22,-1,-1,-1,-1,-1]),Int32Array.from([6,26,-1,-1,-1,-1,-1]),Int32Array.from([6,30,-1,-1,-1,-1,-1]),Int32Array.from([6,34,-1,-1,-1,-1,-1]),Int32Array.from([6,22,38,-1,-1,-1,-1]),Int32Array.from([6,24,42,-1,-1,-1,-1]),Int32Array.from([6,26,46,-1,-1,-1,-1]),Int32Array.from([6,28,50,-1,-1,-1,-1]),Int32Array.from([6,30,54,-1,-1,-1,-1]),Int32Array.from([6,32,58,-1,-1,-1,-1]),Int32Array.from([6,34,62,-1,-1,-1,-1]),Int32Array.from([6,26,46,66,-1,-1,-1]),Int32Array.from([6,26,48,70,-1,-1,-1]),Int32Array.from([6,26,50,74,-1,-1,-1]),Int32Array.from([6,30,54,78,-1,-1,-1]),Int32Array.from([6,30,56,82,-1,-1,-1]),Int32Array.from([6,30,58,86,-1,-1,-1]),Int32Array.from([6,34,62,90,-1,-1,-1]),Int32Array.from([6,28,50,72,94,-1,-1]),Int32Array.from([6,26,50,74,98,-1,-1]),Int32Array.from([6,30,54,78,102,-1,-1]),Int32Array.from([6,28,54,80,106,-1,-1]),Int32Array.from([6,32,58,84,110,-1,-1]),Int32Array.from([6,30,58,86,114,-1,-1]),Int32Array.from([6,34,62,90,118,-1,-1]),Int32Array.from([6,26,50,74,98,122,-1]),Int32Array.from([6,30,54,78,102,126,-1]),Int32Array.from([6,26,52,78,104,130,-1]),Int32Array.from([6,30,56,82,108,134,-1]),Int32Array.from([6,34,60,86,112,138,-1]),Int32Array.from([6,30,58,86,114,142,-1]),Int32Array.from([6,34,62,90,118,146,-1]),Int32Array.from([6,30,54,78,102,126,150]),Int32Array.from([6,24,50,76,102,128,154]),Int32Array.from([6,28,54,80,106,132,158]),Int32Array.from([6,32,58,84,110,136,162]),Int32Array.from([6,26,54,82,110,138,166]),Int32Array.from([6,30,58,86,114,142,170])]),e.TYPE_INFO_COORDINATES=Array.from([Int32Array.from([8,0]),Int32Array.from([8,1]),Int32Array.from([8,2]),Int32Array.from([8,3]),Int32Array.from([8,4]),Int32Array.from([8,5]),Int32Array.from([8,7]),Int32Array.from([8,8]),Int32Array.from([7,8]),Int32Array.from([5,8]),Int32Array.from([4,8]),Int32Array.from([3,8]),Int32Array.from([2,8]),Int32Array.from([1,8]),Int32Array.from([0,8])]),e.VERSION_INFO_POLY=7973,e.TYPE_INFO_POLY=1335,e.TYPE_INFO_MASK_PATTERN=21522,e}();t.default=l},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){this.dataBytes=e,this.errorCorrectionBytes=t}return e.prototype.getDataBytes=function(){return this.dataBytes},e.prototype.getErrorCorrectionBytes=function(){return this.errorCorrectionBytes},e}();t.default=r},function(e,t,n){"use strict";var r=this&&this.__extends||function(){var e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])};return function(t,n){function r(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}();Object.defineProperty(t,"__esModule",{value:!0});var o=n(27),a=n(50),i=function(e){function t(t,n){return void 0===t&&(t=500),e.call(this,new a.default(n),t,n)||this}return r(t,e),t}(o.BrowserCodeReader);t.BrowserBarcodeReader=i},function(e,t,n){"use strict";var r=this&&this.__extends||function(){var e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])};return function(t,n){function r(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}();Object.defineProperty(t,"__esModule",{value:!0});var o=n(5),a=n(16),i=n(87),s=n(3),u=function(e){function t(t){var n=e.call(this)||this,r=null==t?null:t.get(2),a=[];return null!=r&&r.indexOf(o.default.EAN_13)>-1&&a.push(new i.default),0===a.length&&a.push(new i.default),n.readers=a,n}return r(t,e),t.prototype.decodeRow=function(e,t,n){for(var r=0,o=this.readers;r<o.length;r++){var a=o[r];try{return a.decodeRow(e,t,n)}catch(e){}}throw new s.default},t.prototype.reset=function(){for(var e=0,t=this.readers;e<t.length;e++){t[e].reset()}},t}(a.default);t.default=u},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(32),o=n(167),a=n(168),i=function(){function e(){}return e.decodeRow=function(e,t,n){var i=r.default.findGuardPattern(t,n,!1,this.EXTENSION_START_PATTERN,new Array(this.EXTENSION_START_PATTERN.length).fill(0));try{return(new o.default).decodeRow(e,t,i)}catch(n){return(new a.default).decodeRow(e,t,i)}},e.EXTENSION_START_PATTERN=[1,1,2],e}();t.default=i},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(5),o=n(32),a=n(12),i=n(6),s=n(15),u=n(3),l=function(){function e(){this.CHECK_DIGIT_ENCODINGS=[24,20,18,17,12,6,3,10,9,5],this.decodeMiddleCounters=[0,0,0,0],this.decodeRowStringBuffer=""}return e.prototype.decodeRow=function(t,n,o){var s=this.decodeRowStringBuffer,u=this.decodeMiddle(n,o,s),l=s.toString(),c=e.parseExtensionString(l),f=[new i.default((o[0]+o[1])/2,t),new i.default(u,t)],d=new a.default(l,null,0,f,r.default.UPC_EAN_EXTENSION,(new Date).getTime());return null!=c&&d.putAllMetadata(c),d},e.prototype.decodeMiddle=function(t,n,r){var a=this.decodeMiddleCounters;a[0]=0,a[1]=0,a[2]=0,a[3]=0;for(var i=t.getSize(),s=n[1],l=0,c=0;c<5&&s<i;c++){var f=o.default.decodeDigit(t,a,s,o.default.L_AND_G_PATTERNS);r+=String.fromCharCode("0".charCodeAt(0)+f%10);for(var d=0,p=a;d<p.length;d++){s+=p[d]}f>=10&&(l|=1<<4-c),4!==c&&(s=t.getNextSet(s),s=t.getNextUnset(s))}if(5!==r.length)throw new u.default;var h=this.determineCheckDigit(l);if(e.extensionChecksum(r.toString())!==h)throw new u.default;return s},e.extensionChecksum=function(e){for(var t=e.length,n=0,r=t-2;r>=0;r-=2)n+=e.charAt(r).charCodeAt(0)-"0".charCodeAt(0);n*=3;for(r=t-1;r>=0;r-=2)n+=e.charAt(r).charCodeAt(0)-"0".charCodeAt(0);return(n*=3)%10},e.prototype.determineCheckDigit=function(e){for(var t=0;t<10;t++)if(e===this.CHECK_DIGIT_ENCODINGS[t])return t;throw new u.default},e.parseExtensionString=function(t){if(5!==t.length)return null;var n=e.parseExtension5String(t);return null==n?null:new Map([[s.default.SUGGESTED_PRICE,n]])},e.parseExtension5String=function(e){var t;switch(e.charAt(0)){case"0":t="£";break;case"5":t="$";break;case"9":switch(e){case"90000":return null;case"99991":return"0.00";case"99990":return"Used"}t="";break;default:t=""}var n=parseInt(e.substring(1)),r=n%100;return t+(n/100).toString()+"."+(r<10?"0"+r:r.toString())},e}();t.default=l},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(5),o=n(32),a=n(12),i=n(6),s=n(15),u=n(3),l=function(){function e(){this.decodeMiddleCounters=[0,0,0,0],this.decodeRowStringBuffer=""}return e.prototype.decodeRow=function(t,n,o){var s=this.decodeRowStringBuffer,u=this.decodeMiddle(n,o,s),l=s.toString(),c=e.parseExtensionString(l),f=[new i.default((o[0]+o[1])/2,t),new i.default(u,t)],d=new a.default(l,null,0,f,r.default.UPC_EAN_EXTENSION,(new Date).getTime());return null!=c&&d.putAllMetadata(c),d},e.prototype.decodeMiddle=function(e,t,n){var r=this.decodeMiddleCounters;r[0]=0,r[1]=0,r[2]=0,r[3]=0;for(var a=e.getSize(),i=t[1],s=0,l=0;l<2&&i<a;l++){var c=o.default.decodeDigit(e,r,i,o.default.L_AND_G_PATTERNS);n+=String.fromCharCode("0".charCodeAt(0)+c%10);for(var f=0,d=r;f<d.length;f++){i+=d[f]}c>=10&&(s|=1<<1-l),1!==l&&(i=e.getNextSet(i),i=e.getNextUnset(i))}if(2!==n.length)throw new u.default;if(parseInt(n.toString())%4!==s)throw new u.default;return i},e.parseExtensionString=function(e){return 2!==e.length?null:new Map([[s.default.ISSUE_NUMBER,parseInt(e)]])},e}();t.default=l},function(e,t,n){"use strict";var r;Object.defineProperty(t,"__esModule",{value:!0}),function(e){e[e.OTHER=0]="OTHER",e[e.PURE_BARCODE=1]="PURE_BARCODE",e[e.POSSIBLE_FORMATS=2]="POSSIBLE_FORMATS",e[e.TRY_HARDER=3]="TRY_HARDER",e[e.CHARACTER_SET=4]="CHARACTER_SET",e[e.ALLOWED_LENGTHS=5]="ALLOWED_LENGTHS",e[e.ASSUME_CODE_39_CHECK_DIGIT=6]="ASSUME_CODE_39_CHECK_DIGIT",e[e.ASSUME_GS1=7]="ASSUME_GS1",e[e.RETURN_CODABAR_START_END=8]="RETURN_CODABAR_START_END",e[e.NEED_RESULT_POINT_CALLBACK=9]="NEED_RESULT_POINT_CALLBACK",e[e.ALLOWED_EAN_EXTENSIONS=10]="ALLOWED_EAN_EXTENSIONS"}(r||(r={})),t.default=r},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(5),o=n(37),a=n(50),i=n(46),s=n(3),u=n(88),l=function(){function e(){}return e.prototype.decode=function(e,t){return this.setHints(t),this.decodeInternal(e)},e.prototype.decodeWithState=function(e){return null!==this.readers&&void 0!==this.readers||this.setHints(null),this.decodeInternal(e)},e.prototype.setHints=function(e){this.hints=e;var t=null!==e&&void 0!==e&&void 0!==e.get(3),n=null===e||void 0===e?null:e.get(2),s=new Array;if(null!==n&&void 0!==n){var u=n.some(function(e){return e===r.default.UPC_A||e===r.default.UPC_E||e===r.default.EAN_13||e===r.default.EAN_8||e===r.default.CODABAR||e===r.default.CODE_39||e===r.default.CODE_93||e===r.default.CODE_128||e===r.default.ITF||e===r.default.RSS_14||e===r.default.RSS_EXPANDED});u&&!t&&s.push(new a.default(e)),n.includes(r.default.QR_CODE)&&s.push(new o.default),n.includes(r.default.DATA_MATRIX)&&s.push(new i.default),u&&t&&s.push(new a.default(e))}0===s.length&&(t||s.push(new a.default(e)),s.push(new o.default),s.push(new i.default),t&&s.push(new a.default(e))),this.readers=s},e.prototype.reset=function(){if(null!==this.readers)for(var e=0,t=this.readers;e<t.length;e++){t[e].reset()}},e.prototype.decodeInternal=function(e){if(null===this.readers)throw new u.default("No readers where selected, nothing can be read.");for(var t=0,n=this.readers;t<n.length;t++){var r=n[t];try{return r.decode(e,this.hints)}catch(e){if(e instanceof u.default)continue}}throw new s.default("No MultiFormat Readers were able to detect the code.")},e}();t.default=l},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(89),o=n(5),a=n(4),i=function(){function e(){}return e.prototype.encode=function(e,t,n,i,s){var u;switch(t){case o.default.QR_CODE:u=new r.default;break;default:throw new a.default("No encoder available for format "+t)}return u.encode(e,t,n,i,s)},e}();t.default=i},function(e,t,n){"use strict";var r=this&&this.__extends||function(){var e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])};return function(t,n){function r(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}();Object.defineProperty(t,"__esModule",{value:!0});var o=n(10),a=n(21),i=n(20),s=n(4),u=function(e){function t(t,n,r,o,a,i,u,l){var c=e.call(this,i,u)||this;if(c.yuvData=t,c.dataWidth=n,c.dataHeight=r,c.left=o,c.top=a,o+i>n||a+u>r)throw new s.default("Crop rectangle does not fit within image data.");return l&&c.reverseHorizontal(i,u),c}return r(t,e),t.prototype.getRow=function(e,t){if(e<0||e>=this.getHeight())throw new s.default("Requested row is outside the image: "+e);var n=this.getWidth();(null===t||void 0===t||t.length<n)&&(t=new Uint8ClampedArray(n));var r=(e+this.top)*this.dataWidth+this.left;return o.default.arraycopy(this.yuvData,r,t,0,n),t},t.prototype.getMatrix=function(){var e=this.getWidth(),t=this.getHeight();if(e===this.dataWidth&&t===this.dataHeight)return this.yuvData;var n=e*t,r=new Uint8ClampedArray(n),a=this.top*this.dataWidth+this.left;if(e===this.dataWidth)return o.default.arraycopy(this.yuvData,a,r,0,n),r;for(var i=0;i<t;i++){var s=i*e;o.default.arraycopy(this.yuvData,a,r,s,e),a+=this.dataWidth}return r},t.prototype.isCropSupported=function(){return!0},t.prototype.crop=function(e,n,r,o){return new t(this.yuvData,this.dataWidth,this.dataHeight,this.left+e,this.top+n,r,o,!1)},t.prototype.renderThumbnail=function(){for(var e=this.getWidth()/t.THUMBNAIL_SCALE_FACTOR,n=this.getHeight()/t.THUMBNAIL_SCALE_FACTOR,r=new Int32Array(e*n),o=this.yuvData,a=this.top*this.dataWidth+this.left,i=0;i<n;i++){for(var s=i*e,u=0;u<e;u++){var l=255&o[a+u*t.THUMBNAIL_SCALE_FACTOR];r[s+u]=4278190080|65793*l}a+=this.dataWidth*t.THUMBNAIL_SCALE_FACTOR}return r},t.prototype.getThumbnailWidth=function(){return this.getWidth()/t.THUMBNAIL_SCALE_FACTOR},t.prototype.getThumbnailHeight=function(){return this.getHeight()/t.THUMBNAIL_SCALE_FACTOR},t.prototype.reverseHorizontal=function(e,t){for(var n=this.yuvData,r=0,o=this.top*this.dataWidth+this.left;r<t;r++,o+=this.dataWidth)for(var a=o+e/2,i=o,s=o+e-1;i<a;i++,s--){var u=n[i];n[i]=n[s],n[s]=u}},t.prototype.invert=function(){return new i.default(this)},t.THUMBNAIL_SCALE_FACTOR=2,t}(a.default);t.default=u},function(e,t,n){"use strict";var r=this&&this.__extends||function(){var e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])};return function(t,n){function r(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}();Object.defineProperty(t,"__esModule",{value:!0}),n(20);var o=n(20),a=n(21),i=n(10),s=n(4),u=function(e){function t(t,n,r,o,a,i,u){var l=e.call(this,n,r)||this;if(l.dataWidth=o,l.dataHeight=a,l.left=i,l.top=u,4===t.BYTES_PER_ELEMENT){for(var c=n*r,f=new Uint8ClampedArray(c),d=0;d<c;d++){var p=t[d],h=p>>16&255,g=p>>7&510,v=255&p;f[d]=(h+g+v)/4&255}l.luminances=f}else l.luminances=t;if(void 0===o&&(l.dataWidth=n),void 0===a&&(l.dataHeight=r),void 0===i&&(l.left=0),void 0===u&&(l.top=0),l.left+n>l.dataWidth||l.top+r>l.dataHeight)throw new s.default("Crop rectangle does not fit within image data.");return l}return r(t,e),t.prototype.getRow=function(e,t){if(e<0||e>=this.getHeight())throw new s.default("Requested row is outside the image: "+e);var n=this.getWidth();(null===t||void 0===t||t.length<n)&&(t=new Uint8ClampedArray(n));var r=(e+this.top)*this.dataWidth+this.left;return i.default.arraycopy(this.luminances,r,t,0,n),t},t.prototype.getMatrix=function(){var e=this.getWidth(),t=this.getHeight();if(e===this.dataWidth&&t===this.dataHeight)return this.luminances;var n=e*t,r=new Uint8ClampedArray(n),o=this.top*this.dataWidth+this.left;if(e===this.dataWidth)return i.default.arraycopy(this.luminances,o,r,0,n),r;for(var a=0;a<t;a++){var s=a*e;i.default.arraycopy(this.luminances,o,r,s,e),o+=this.dataWidth}return r},t.prototype.isCropSupported=function(){return!0},t.prototype.crop=function(e,n,r,o){return new t(this.luminances,r,o,this.dataWidth,this.dataHeight,this.left+e,this.top+n)},t.prototype.invert=function(){return new o.default(this)},t}(a.default);t.default=u}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,