import TreeNode from './TreeNode';
import * as React from "react";
import * as classNames from "classnames";
import nanoid = require("nanoid");

id NodeOrChildren = TreeNode | React.ReactNode;

module Tree {
    export interface Props {
        nodes: (TreeNode | React.ReactNode)[]
        disabled: boolean,
        expandDisabled: boolean,
        expandOnClick: boolean,
        expanded: string[],
        name: string,
        nameAsArray: boolean,
        nativeCheckboxes: boolean,
        noCascade: boolean,
        onlyLeafCheckboxes: boolean,
        showNodeIcon: boolean,
        onClick: () => void,
        onExpand: () => void
    }

    export interface State {
        id: string,
        nodes: React.ReactNode[],
        expanded: boolean
    }
}

class Tree extends React.Component<Tree.Props, Tree.State> {
    static defaultProps = {
        onClick: () => {
        },
        onExpand: () => {
        },
    };

    id: string;
    nodes: any;

    constructor(props: Tree.Props) {
        super(props);

        this.id = `rct-${nanoid(7)}`;
        this.nodes = {};

        this.onExpand = this.onExpand.bind(this);
    }

    onExpand(node: TreeNode) {
        const {onExpand} = this.props;
        node.onExpand()
    }

    renderTreeNodes(nodes: TreeNode[], parent = {}) {

        const {
            expandDisabled,
            expandOnClick,
            showNodeIcon,
            onClick,
        } = this.props;

        const treeNodes = nodes.map((node: TreeNode, idx: number) => {
            const isLeaf: boolean = !node.hasChildren();
            const children = this.renderChildNodes(node);
            // Show checkbox only if this is a leaf node or showCheckbox is true

            return (
                <TreeNode
                    key={node.key}
                    className={node.className}
                    expandOnClick={expandOnClick}
                    expanded={node.expanded}
                    icon={node.icon}
                    label={node.label}
                    rawChildren={node.children}
                    showNodeIcon={showNodeIcon}
                    treeId={this.id}
                    value={node.value}
                    onClick={onClick}
                    onExpand={this.onExpand}
                >
                    {children}
                </TreeNode>
            );
        });

        return (
            <ol>
                {treeNodes}
            </ol>
        );
    }

    renderChildNodes(node: TreeNode): React.ReactNode[] {
        if (node.hasChildren() !== null && node.props.expanded) {
            return this.renderTreeNodes(node.children, node);
        }

    }

    render() {
        const treeNodes = this.renderTreeNodes(this.nodes);
        const className = classNames({
            'react-checkbox-tree': true,
            'rct-disabled': this.props.disabled,
            'rct-native-display': this.props.nativeCheckboxes,
        });

        return (
            <div className={className}>
                {treeNodes}
            </div>
        );
    }
}

export default Tree;